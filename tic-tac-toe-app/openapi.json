{
  "components": {
    "schemas": {
      "bureau_Activity": {
        "properties": {
          "assignees": {
            "items": {
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array"
          },
          "assignmentId": {
            "type": "string"
          },
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "clientDbId": {
            "format": "int64",
            "type": "integer"
          },
          "clientId": {
            "type": "string"
          },
          "comment": {
            "maxLength": 1024,
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "digitalActivityType": {
            "enum": [
              "TO_HANDLE",
              "SENDER_TO_HANDLE",
              "PAYMENTS_TO_BOOKKEEP",
              "INTERPRETING_IN_PROGRESS",
              "INCOMING_INVOICE",
              "TO_AUTHORIZE",
              "TO_BOOKKEEP",
              "PAYMENTS_TO_AUTHORIZE",
              "TO_PAY",
              "INACTIVE_PAYMENT_FILE",
              "PAYMENT_PENDING",
              "CUSTOMER_INVOICES_TO_BOOKKEEP",
              "TO_APPLY_FOR",
              "REPORTS_TO_ATTEST",
              "REPORTS_TO_SEND",
              "INVALID_REPORTS",
              "PARTIAL_REPORTS",
              "INCOMING_REQUESTS"
            ],
            "type": "string"
          },
          "estimatedTimeMinutes": {
            "format": "int64",
            "maximum": 45000,
            "minimum": 0,
            "type": "integer"
          },
          "finished": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "metaData": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "relatedPeriodEnd": {
            "format": "date",
            "type": "string"
          },
          "relatedPeriodStart": {
            "format": "date",
            "type": "string"
          },
          "reminderDate": {
            "format": "date",
            "type": "string"
          },
          "status": {
            "enum": [
              "NEW",
              "MIN",
              "MAR",
              "COM",
              "DON"
            ],
            "type": "string"
          },
          "subType": {
            "enum": [
              "ACC",
              "DCA",
              "CAP",
              "REC",
              "RTC",
              "DVO",
              "DDT",
              "DER",
              "DEP",
              "DBT",
              "OAC",
              "VAT",
              "EBD",
              "RVT",
              "PAV",
              "SAL",
              "CIV",
              "ECI",
              "MAR",
              "RAR",
              "CRE",
              "TRE",
              "DCI",
              "SIV",
              "SIN",
              "SIA",
              "CPP",
              "PAL",
              "SIB",
              "SID",
              "SRG",
              "SPY",
              "SRP",
              "REQ",
              "OSI",
              "FBK",
              "PEC",
              "OER",
              "AIS",
              "FSA",
              "QFA",
              "PRY",
              "COR",
              "MFA",
              "OWN",
              "OWS",
              "ANR",
              "DEC",
              "SAA",
              "FAR",
              "OAR",
              "INC",
              "EPD",
              "EPA",
              "IIT",
              "PLA",
              "QID",
              "PIN",
              "LID",
              "PAR",
              "CRP",
              "SPC",
              "PAY",
              "AVD",
              "ADI",
              "PAT",
              "ORE",
              "FRE",
              "STA",
              "KUS",
              "KUI",
              "KUD",
              "OW1"
            ],
            "type": "string"
          },
          "title": {
            "maxLength": 255,
            "type": "string"
          },
          "type": {
            "enum": [
              "ACC",
              "VAT",
              "SAL",
              "CIV",
              "SIV",
              "FBK",
              "ANR",
              "INC",
              "PAR",
              "OW1"
            ],
            "type": "string"
          },
          "urgency": {
            "enum": [
              "URGENT",
              "FUTURE",
              "AVAILABLE"
            ],
            "type": "string"
          },
          "warningDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "date",
          "finished",
          "subType",
          "title",
          "type"
        ],
        "type": "object"
      },
      "bureau_ActivityParams": {
        "properties": {
          "agreements": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assigneeId": {
            "type": "string"
          },
          "clientAssigneeId": {
            "type": "string"
          },
          "clientDbId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "endDate": {
            "format": "date",
            "type": "string"
          },
          "includeFinished": {
            "type": "boolean"
          },
          "responsibleUserId": {
            "type": "string"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          },
          "subType": {
            "enum": [
              "ACC",
              "DCA",
              "CAP",
              "REC",
              "RTC",
              "DVO",
              "DDT",
              "DER",
              "DEP",
              "DBT",
              "OAC",
              "VAT",
              "EBD",
              "RVT",
              "PAV",
              "SAL",
              "CIV",
              "ECI",
              "MAR",
              "RAR",
              "CRE",
              "TRE",
              "DCI",
              "SIV",
              "SIN",
              "SIA",
              "CPP",
              "PAL",
              "SIB",
              "SID",
              "SRG",
              "SPY",
              "SRP",
              "REQ",
              "OSI",
              "FBK",
              "PEC",
              "OER",
              "AIS",
              "FSA",
              "QFA",
              "PRY",
              "COR",
              "MFA",
              "OWN",
              "OWS",
              "ANR",
              "DEC",
              "SAA",
              "FAR",
              "OAR",
              "INC",
              "EPD",
              "EPA",
              "IIT",
              "PLA",
              "QID",
              "PIN",
              "LID",
              "PAR",
              "CRP",
              "SPC",
              "PAY",
              "AVD",
              "ADI",
              "PAT",
              "ORE",
              "FRE",
              "STA",
              "KUS",
              "KUI",
              "KUD",
              "OW1"
            ],
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "ACC",
              "VAT",
              "SAL",
              "CIV",
              "SIV",
              "FBK",
              "ANR",
              "INC",
              "PAR",
              "OW1"
            ],
            "type": "string"
          },
          "types": {
            "items": {
              "enum": [
                "ACC",
                "VAT",
                "SAL",
                "CIV",
                "SIV",
                "FBK",
                "ANR",
                "INC",
                "PAR",
                "OW1"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "urgencies": {
            "items": {
              "enum": [
                "URGENT",
                "FUTURE",
                "AVAILABLE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "userTags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_Agreement": {
        "properties": {
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "generatedId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "type": "string"
          },
          "responsibleUserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "clientId",
          "id",
          "responsibleUserId"
        ],
        "type": "object"
      },
      "bureau_AgreementWithClient": {
        "properties": {
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "responsibleUserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bureau_AssigneeEstimatedTime": {
        "properties": {
          "assigneeId": {
            "format": "int64",
            "type": "integer"
          },
          "estimatedTimeMilliseconds": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bureau_BureauClient": {
        "properties": {
          "activated": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "agreementSkipped": {
            "type": "boolean"
          },
          "applyForBureauRespite": {
            "type": "boolean"
          },
          "assignees": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "auditFirm": {
            "maxLength": 100,
            "type": "string"
          },
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "companyDomicile": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "companyType": {
            "enum": [
              "ESTATE",
              "SOLE_TRADER",
              "NATURAL_PERSON",
              "CORPORATION",
              "NONPROFIT_ASSOCIATION",
              "HOUSING_ASSOCIATION",
              "TENANCY_COMPOUND",
              "COOPERATIVE",
              "ECONOMIC_ASSOCIATION",
              "HOUSING_SOCIETY",
              "RELIGIOUS_BODY",
              "LIMITED_PARTNERSHIP",
              "PARTNERSHIP",
              "PRIVATE_INDIVIDUAL",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "contactFirstName": {
            "type": "string"
          },
          "contactLastName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          },
          "customerNumberSource": {
            "enum": [
              "USER",
              "CUSTOMER_REGISTRY"
            ],
            "type": "string"
          },
          "dbId": {
            "format": "int64",
            "type": "integer"
          },
          "dbTag": {
            "type": "string"
          },
          "dbTagId": {
            "type": "string"
          },
          "disconnected": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "enableAuthorizeFlow": {
            "type": "boolean"
          },
          "favorite": {
            "type": "boolean"
          },
          "fax": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "hasAccess": {
            "type": "boolean"
          },
          "hasAgoyAccess": {
            "type": "boolean"
          },
          "hasAuditObligations": {
            "type": "boolean"
          },
          "hasInterpretSupplierInvoices": {
            "type": "boolean"
          },
          "homepage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "information": {
            "maxLength": 4096,
            "type": "string"
          },
          "kycSkipped": {
            "type": "boolean"
          },
          "lastReconciliationDate": {
            "format": "date",
            "type": "string"
          },
          "nonFortnoxClient": {
            "type": "boolean"
          },
          "orgNo": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phone2": {
            "type": "string"
          },
          "postalAddress": {
            "type": "string"
          },
          "postalCity": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "privateIndividual": {
            "type": "boolean"
          },
          "prospect": {
            "type": "boolean"
          },
          "relations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "removedAt": {
            "format": "date-time",
            "type": "string"
          },
          "sysadmins": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userDisabledAt": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "visitingCountry": {
            "type": "string"
          },
          "visitingCountryCode": {
            "type": "string"
          },
          "visitingName": {
            "type": "string"
          },
          "visitingPostalAddress": {
            "type": "string"
          },
          "visitingPostalCity": {
            "type": "string"
          },
          "visitingPostalCode": {
            "type": "string"
          }
        },
        "required": [
          "assignees",
          "tags"
        ],
        "type": "object"
      },
      "bureau_BureauClientContact": {
        "properties": {
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "contactId": {
            "format": "uuid",
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "pattern": "^$|^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",
            "type": "string"
          },
          "firstName": {
            "maxLength": 100,
            "type": "string"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string"
          },
          "mobilePhone": {
            "maxLength": 20,
            "pattern": "^$|^[0-9+()\\- ]+$",
            "type": "string"
          },
          "phone": {
            "maxLength": 20,
            "pattern": "^$|^[0-9+()\\- ]+$",
            "type": "string"
          },
          "roleType": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_BureauClientFilter": {
        "properties": {
          "assigneeId": {
            "type": "string"
          },
          "companyType": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludeCompanyType": {
            "items": {
              "enum": [
                "ESTATE",
                "SOLE_TRADER",
                "NATURAL_PERSON",
                "CORPORATION",
                "NONPROFIT_ASSOCIATION",
                "HOUSING_ASSOCIATION",
                "TENANCY_COMPOUND",
                "COOPERATIVE",
                "ECONOMIC_ASSOCIATION",
                "HOUSING_SOCIETY",
                "RELIGIOUS_BODY",
                "LIMITED_PARTNERSHIP",
                "PARTNERSHIP",
                "PRIVATE_INDIVIDUAL",
                "UNKNOWN"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "filter": {
            "type": "string"
          },
          "filteredUserId": {
            "type": "string"
          },
          "filteredUserIdHasAccess": {
            "type": "boolean"
          },
          "includeOnlyClientsWithoutTags": {
            "type": "boolean"
          },
          "includeStates": {
            "items": {
              "enum": [
                "DISCONNECTED",
                "ACTIVE",
                "INACTIVE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "showOnlyFavorites": {
            "type": "boolean"
          },
          "showOnlyWithAgoyAccess": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_BureauClientLight": {
        "properties": {
          "activated": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "companyName": {
            "type": "string"
          },
          "companyType": {
            "enum": [
              "ESTATE",
              "SOLE_TRADER",
              "NATURAL_PERSON",
              "CORPORATION",
              "NONPROFIT_ASSOCIATION",
              "HOUSING_ASSOCIATION",
              "TENANCY_COMPOUND",
              "COOPERATIVE",
              "ECONOMIC_ASSOCIATION",
              "HOUSING_SOCIETY",
              "RELIGIOUS_BODY",
              "LIMITED_PARTNERSHIP",
              "PARTNERSHIP",
              "PRIVATE_INDIVIDUAL",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "dbId": {
            "format": "int64",
            "type": "integer"
          },
          "hasAccess": {
            "type": "boolean"
          },
          "hasInterpretSupplierInvoices": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "orgNo": {
            "type": "string"
          },
          "removedAt": {
            "format": "date-time",
            "type": "string"
          },
          "userDisabledAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_BureauClientOrder": {
        "properties": {
          "addressCity": {
            "type": "string"
          },
          "addressPostCode": {
            "type": "string"
          },
          "addressStreet": {
            "type": "string"
          },
          "allProductsBeingOrdered": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "allProductsIdsBeingOrdered": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true
          },
          "campaignCode": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "confirmEmail": {
            "type": "string"
          },
          "consultants": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "email": {
            "type": "string"
          },
          "extraProducts": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "firstName": {
            "type": "string"
          },
          "information": {
            "type": "string"
          },
          "invoiceInterval": {
            "format": "int32",
            "type": "integer"
          },
          "lastName": {
            "type": "string"
          },
          "organizationNumber": {
            "type": "string"
          },
          "ownAccess": {
            "type": "boolean"
          },
          "payerProducts": {
            "enum": [
              "PARENT_COMPANY",
              "CHILD_COMPANY"
            ],
            "type": "string"
          },
          "payerTicks": {
            "enum": [
              "PARENT_COMPANY",
              "CHILD_COMPANY"
            ],
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "products": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "totalAmountReceiptAndTravel": {
            "format": "int32",
            "type": "integer"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/bureau_InvitedUser"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_BureauClientWithConnection": {
        "properties": {
          "activated": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "agreementSkipped": {
            "type": "boolean"
          },
          "applyForBureauRespite": {
            "type": "boolean"
          },
          "assignees": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "auditFirm": {
            "maxLength": 100,
            "type": "string"
          },
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "companyDomicile": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "companyType": {
            "enum": [
              "ESTATE",
              "SOLE_TRADER",
              "NATURAL_PERSON",
              "CORPORATION",
              "NONPROFIT_ASSOCIATION",
              "HOUSING_ASSOCIATION",
              "TENANCY_COMPOUND",
              "COOPERATIVE",
              "ECONOMIC_ASSOCIATION",
              "HOUSING_SOCIETY",
              "RELIGIOUS_BODY",
              "LIMITED_PARTNERSHIP",
              "PARTNERSHIP",
              "PRIVATE_INDIVIDUAL",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "connectionClientId": {
            "format": "uuid",
            "type": "string"
          },
          "connectionType": {
            "maxLength": 40,
            "type": "string"
          },
          "contactFirstName": {
            "type": "string"
          },
          "contactLastName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "customerNumber": {
            "type": "string"
          },
          "customerNumberSource": {
            "enum": [
              "USER",
              "CUSTOMER_REGISTRY"
            ],
            "type": "string"
          },
          "dbId": {
            "format": "int64",
            "type": "integer"
          },
          "dbTag": {
            "type": "string"
          },
          "dbTagId": {
            "type": "string"
          },
          "disconnected": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "enableAuthorizeFlow": {
            "type": "boolean"
          },
          "favorite": {
            "type": "boolean"
          },
          "fax": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "hasAccess": {
            "type": "boolean"
          },
          "hasAgoyAccess": {
            "type": "boolean"
          },
          "hasAuditObligations": {
            "type": "boolean"
          },
          "hasInterpretSupplierInvoices": {
            "type": "boolean"
          },
          "homepage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "information": {
            "maxLength": 4096,
            "type": "string"
          },
          "kycSkipped": {
            "type": "boolean"
          },
          "lastReconciliationDate": {
            "format": "date",
            "type": "string"
          },
          "nonFortnoxClient": {
            "type": "boolean"
          },
          "orgNo": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phone2": {
            "type": "string"
          },
          "postalAddress": {
            "type": "string"
          },
          "postalCity": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "privateIndividual": {
            "type": "boolean"
          },
          "prospect": {
            "type": "boolean"
          },
          "relations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "removedAt": {
            "format": "date-time",
            "type": "string"
          },
          "sysadmins": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userDisabledAt": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "visitingCountry": {
            "type": "string"
          },
          "visitingCountryCode": {
            "type": "string"
          },
          "visitingName": {
            "type": "string"
          },
          "visitingPostalAddress": {
            "type": "string"
          },
          "visitingPostalCity": {
            "type": "string"
          },
          "visitingPostalCode": {
            "type": "string"
          }
        },
        "required": [
          "assignees",
          "tags"
        ],
        "type": "object"
      },
      "bureau_ChangeStatusBulkOperation": {
        "properties": {
          "activityIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "params": {
            "$ref": "#/components/schemas/bureau_ActivityParams"
          },
          "status": {
            "enum": [
              "NEW",
              "MIN",
              "MAR",
              "COM",
              "DON"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_ClientAssigneeReplaceBulkOperation": {
        "properties": {
          "bureauClientFilter": {
            "$ref": "#/components/schemas/bureau_BureauClientFilter"
          },
          "clientIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "newAssigneeId": {
            "type": "string"
          },
          "oldAssigneeId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_ClientAssigneesBulkOperation": {
        "properties": {
          "assigneeIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bureauClientFilter": {
            "$ref": "#/components/schemas/bureau_BureauClientFilter"
          },
          "clientIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_ClientBulkOperation": {
        "properties": {
          "bureauClientFilter": {
            "$ref": "#/components/schemas/bureau_BureauClientFilter"
          },
          "clientIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_ClientLogin": {
        "properties": {
          "login": {
            "type": "string"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_ClientTagBulkOperation": {
        "properties": {
          "bureauClientFilter": {
            "$ref": "#/components/schemas/bureau_BureauClientFilter"
          },
          "clientIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tagIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "BULK_REMOVE_TAGS",
              "BULK_ADD_TAGS"
            ],
            "type": "string"
          }
        },
        "required": [
          "tagIds"
        ],
        "type": "object"
      },
      "bureau_CopySpecification": {
        "properties": {
          "assignees": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "maxItems": 5,
            "minItems": 1,
            "type": "array"
          },
          "clientIdFrom": {
            "format": "uuid",
            "type": "string"
          },
          "clientIdTo": {
            "format": "uuid",
            "type": "string"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "assignees",
          "clientIdFrom",
          "clientIdTo",
          "startDate"
        ],
        "type": "object"
      },
      "bureau_ErrorReason": {
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_EstimatedTime": {
        "properties": {
          "estimatedTimeMinutes": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bureau_HistoricCoordinationNumber": {
        "properties": {
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "coordNo": {
            "type": "string"
          },
          "dateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_Inquiry": {
        "properties": {
          "agreementType": {
            "enum": [
              "BUREAU_INITIATED_CONNECTION",
              "BUREAU_INITIATED_DISCONNECTION",
              "BUREAU_INITIATED_DISCONTINUE",
              "INTERNAL_INITIATED_DISCONNECTION",
              "INTERNAL_INITIATED_CONNECTION"
            ],
            "type": "string"
          },
          "approverTenantId": {
            "format": "int64",
            "type": "integer"
          },
          "consultantUserId": {
            "format": "int64",
            "type": "integer"
          },
          "scheduledFor": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "agreementType",
          "approverTenantId"
        ],
        "type": "object"
      },
      "bureau_InvitedUser": {
        "properties": {
          "cellular": {
            "pattern": "^$|^[0-9\\+()\\- ]*$",
            "type": "string"
          },
          "civicNo": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "loginName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "enum": [
              "USER_CHAT",
              "BUREAU",
              "SUBSCRIPTION_FORM",
              "ONBOARDING_GUIDE"
            ],
            "type": "string"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "civicNo",
          "source",
          "tenantId"
        ],
        "type": "object"
      },
      "bureau_KYCAssignment": {
        "properties": {
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "dateCreated": {
            "format": "date-time",
            "type": "string"
          },
          "dateStopped": {
            "format": "date-time",
            "type": "string"
          },
          "hasAccess": {
            "type": "boolean"
          },
          "hasUrgentPendingActions": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "nextKycDate": {
            "format": "date",
            "type": "string"
          },
          "privateIndividual": {
            "type": "boolean"
          },
          "prospect": {
            "type": "boolean"
          },
          "riskLevel": {
            "type": "string"
          },
          "riskSeverity": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_Link": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ],
        "type": "object"
      },
      "bureau_NewBureauClientOrder": {
        "properties": {
          "orderId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bureau_NewClientOrder": {
        "properties": {
          "addressCity": {
            "type": "string"
          },
          "addressPostCode": {
            "type": "string"
          },
          "addressStreet": {
            "type": "string"
          },
          "allProductsBeingOrdered": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "allProductsIdsBeingOrdered": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true
          },
          "campaignCode": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "consultants": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "email": {
            "type": "string"
          },
          "extraProducts": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "firstName": {
            "type": "string"
          },
          "invoiceInterval": {
            "format": "int32",
            "type": "integer"
          },
          "lastName": {
            "type": "string"
          },
          "organizationNumber": {
            "type": "string"
          },
          "payerProducts": {
            "enum": [
              "PARENT_COMPANY",
              "CHILD_COMPANY"
            ],
            "type": "string"
          },
          "payerTicks": {
            "enum": [
              "PARENT_COMPANY",
              "CHILD_COMPANY"
            ],
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "products": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "totalAmountReceiptAndTravel": {
            "format": "int32",
            "type": "integer"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/bureau_InvitedUser"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_NewOrganization": {
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "urlPrefix": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_PendingInformation": {
        "properties": {
          "pendingConnection": {
            "type": "boolean"
          },
          "pendingCreation": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "bureau_Tag": {
        "properties": {
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "bureau_Tagging": {
        "properties": {
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "usersFilter": {
            "$ref": "#/components/schemas/bureau_UsersFilter"
          }
        },
        "type": "object"
      },
      "bureau_Task": {
        "properties": {
          "assignees": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "hasComments": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "recurrence": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "NOT_DONE",
              "DONE"
            ],
            "type": "string"
          },
          "statusDate": {
            "format": "date",
            "type": "string"
          },
          "taskSpecificationHasEndDate": {
            "type": "boolean"
          },
          "taskSpecificationId": {
            "format": "uuid",
            "type": "string"
          },
          "taskType": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "bureau_TaskComment": {
        "properties": {
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "datetime": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "taskId": {
            "format": "uuid",
            "type": "string"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bureau_TaskSpecification": {
        "properties": {
          "agreementGeneratedId": {
            "format": "uuid",
            "type": "string"
          },
          "assignees": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "maxItems": 5,
            "minItems": 1,
            "type": "array"
          },
          "bureauId": {
            "format": "int64",
            "type": "integer"
          },
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "endDate": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "recurrence": {
            "items": {
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array"
          },
          "routine": {
            "type": "string"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          },
          "taskType": {
            "type": "string"
          },
          "title": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "assignees",
          "clientId",
          "recurrence",
          "startDate"
        ],
        "type": "object"
      },
      "bureau_UpdatableAgreement": {
        "properties": {
          "name": {
            "maxLength": 200,
            "type": "string"
          },
          "responsibleUserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "responsibleUserId"
        ],
        "type": "object"
      },
      "bureau_UpdatableBureauClient": {
        "properties": {
          "assignees": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "auditFirm": {
            "maxLength": 100,
            "type": "string"
          },
          "companyName": {
            "maxLength": 1024,
            "type": "string"
          },
          "companyType": {
            "enum": [
              "ESTATE",
              "SOLE_TRADER",
              "NATURAL_PERSON",
              "CORPORATION",
              "NONPROFIT_ASSOCIATION",
              "HOUSING_ASSOCIATION",
              "TENANCY_COMPOUND",
              "COOPERATIVE",
              "ECONOMIC_ASSOCIATION",
              "HOUSING_SOCIETY",
              "RELIGIOUS_BODY",
              "LIMITED_PARTNERSHIP",
              "PARTNERSHIP",
              "PRIVATE_INDIVIDUAL",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "contactFirstName": {
            "maxLength": 100,
            "type": "string"
          },
          "contactLastName": {
            "maxLength": 100,
            "type": "string"
          },
          "country": {
            "maxLength": 100,
            "type": "string"
          },
          "customerNumber": {
            "maxLength": 40,
            "type": "string"
          },
          "email": {
            "maxLength": 200,
            "type": "string"
          },
          "hasAuditObligations": {
            "type": "boolean"
          },
          "homepage": {
            "maxLength": 200,
            "type": "string"
          },
          "information": {
            "maxLength": 4096,
            "type": "string"
          },
          "lastReconciliationDate": {
            "format": "date",
            "type": "string"
          },
          "phone": {
            "maxLength": 20,
            "type": "string"
          },
          "postalAddress": {
            "maxLength": 100,
            "type": "string"
          },
          "postalCity": {
            "maxLength": 100,
            "type": "string"
          },
          "postalCode": {
            "maxLength": 10,
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "visitingCountry": {
            "maxLength": 100,
            "type": "string"
          },
          "visitingPostalAddress": {
            "maxLength": 100,
            "type": "string"
          },
          "visitingPostalCity": {
            "maxLength": 100,
            "type": "string"
          },
          "visitingPostalCode": {
            "maxLength": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_UpdatableBureauClientContact": {
        "properties": {
          "email": {
            "maxLength": 100,
            "pattern": "^$|^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",
            "type": "string"
          },
          "firstName": {
            "maxLength": 100,
            "type": "string"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string"
          },
          "mobilePhone": {
            "maxLength": 20,
            "pattern": "^$|^[0-9+()\\- ]+$",
            "type": "string"
          },
          "phone": {
            "maxLength": 20,
            "pattern": "^$|^[0-9+()\\- ]+$",
            "type": "string"
          },
          "roleType": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_UpdatableTask": {
        "properties": {
          "assignees": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "status": {
            "enum": [
              "NOT_DONE",
              "DONE"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "bureau_UpdateActivityOptions": {
        "properties": {
          "locators": {
            "$ref": "#/components/schemas/bureau_UpdateActivityOptions_Locators"
          },
          "values": {
            "$ref": "#/components/schemas/bureau_UpdateActivityOptions_Values"
          }
        },
        "type": "object"
      },
      "bureau_UpdateActivityOptions_Locators": {
        "properties": {
          "activity": {
            "type": "string"
          },
          "periodEnd": {
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_UpdateActivityOptions_Values": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "status": {
            "enum": [
              "NEW",
              "MIN",
              "MAR",
              "COM",
              "DON"
            ],
            "type": "string"
          },
          "titleSuffix": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bureau_UpdateWrapperUpdatableAgreement": {
        "properties": {
          "old": {
            "$ref": "#/components/schemas/bureau_UpdatableAgreement"
          },
          "updated": {
            "$ref": "#/components/schemas/bureau_UpdatableAgreement"
          }
        },
        "type": "object"
      },
      "bureau_UpdateWrapperUpdatableBureauClient": {
        "properties": {
          "old": {
            "$ref": "#/components/schemas/bureau_UpdatableBureauClient"
          },
          "updated": {
            "$ref": "#/components/schemas/bureau_UpdatableBureauClient"
          }
        },
        "type": "object"
      },
      "bureau_UpdateWrapperUpdatableBureauClientContact": {
        "properties": {
          "old": {
            "$ref": "#/components/schemas/bureau_UpdatableBureauClientContact"
          },
          "updated": {
            "$ref": "#/components/schemas/bureau_UpdatableBureauClientContact"
          }
        },
        "type": "object"
      },
      "bureau_UpdateWrapperUpdatableTask": {
        "properties": {
          "old": {
            "$ref": "#/components/schemas/bureau_UpdatableTask"
          },
          "updated": {
            "$ref": "#/components/schemas/bureau_UpdatableTask"
          }
        },
        "type": "object"
      },
      "bureau_User": {
        "properties": {
          "cellular": {
            "type": "string"
          },
          "civicNo": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          },
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bureau_UserWithClientInfo": {
        "properties": {
          "clientId": {
            "format": "uuid",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sysAdmin": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/bureau_Tag"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_UsersFilter": {
        "properties": {
          "excludeTaggedUsers": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "statuses": {
            "items": {
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "DELETED",
                "CONSULTANT",
                "DELETED_CONSULTANT",
                "TIME_USER",
                "DELETED_TIME_USER",
                "ACTIVE_SUPPORT",
                "INACTIVE_SUPPORT",
                "SERVICE_USER",
                "API_USER",
                "DELETED_API_USER"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "bureau_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fileattachments_Attachment": {
        "properties": {
          "entityId": {
            "format": "int64",
            "type": "integer"
          },
          "entityType": {
            "enum": [
              "OF",
              "O",
              "F",
              "C",
              "LGR_IO",
              "LGR_IG"
            ],
            "type": "string"
          },
          "fileId": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "includeOnSend": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "fileattachments_NumberOfAttachments": {
        "properties": {
          "entityId": {
            "format": "int64",
            "type": "integer"
          },
          "numberOfAttachments": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "entityId"
        ],
        "type": "object"
      },
      "fileattachments_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_AbsenceTransactionListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "CauseCode": {
            "enum": [
              "ASK",
              "FPE",
              "FRA",
              "HAV",
              "KOM",
              "MIL",
              "NAR",
              "OS1",
              "OS2",
              "OS3",
              "OS4",
              "OS5",
              "PAP",
              "PEM",
              "PER",
              "SEM",
              "SJK",
              "SMB",
              "SVE",
              "TJL",
              "UTB",
              "VAB"
            ],
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "Extent": {
            "format": "float",
            "type": "number"
          },
          "HolidayEntitling": {
            "type": "boolean"
          },
          "Hours": {
            "format": "float",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "CauseCode",
          "Date",
          "EmployeeId"
        ],
        "type": "object"
      },
      "fortnox_AbsenceTransactionListItem_Wrap": {
        "properties": {
          "AbsenceTransactions": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AbsenceTransactionListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_AbsenceTransactionPayload": {
        "properties": {
          "CauseCode": {
            "enum": [
              "ASK",
              "FPE",
              "FRA",
              "HAV",
              "KOM",
              "MIL",
              "NAR",
              "OS1",
              "OS2",
              "OS3",
              "OS4",
              "OS5",
              "PAP",
              "PEM",
              "PER",
              "SEM",
              "SJK",
              "SMB",
              "SVE",
              "TJL",
              "UTB",
              "VAB"
            ],
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "type": "string"
          },
          "Extent": {
            "format": "float",
            "type": "number"
          },
          "HolidayEntitling": {
            "type": "boolean"
          },
          "Hours": {
            "format": "float",
            "type": "number"
          },
          "Project": {
            "type": "string"
          }
        },
        "required": [
          "CauseCode",
          "Date",
          "EmployeeId"
        ],
        "type": "object"
      },
      "fortnox_AbsenceTransactionPayload_Wrap": {
        "properties": {
          "AbsenceTransaction": {
            "$ref": "#/components/schemas/fortnox_AbsenceTransactionPayload"
          }
        },
        "type": "object"
      },
      "fortnox_AbsenceTransactionSingleItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "CauseCode": {
            "enum": [
              "ASK",
              "FPE",
              "FRA",
              "HAV",
              "KOM",
              "MIL",
              "NAR",
              "OS1",
              "OS2",
              "OS3",
              "OS4",
              "OS5",
              "PAP",
              "PEM",
              "PER",
              "SEM",
              "SJK",
              "SMB",
              "SVE",
              "TJL",
              "UTB",
              "VAB"
            ],
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "Extent": {
            "format": "float",
            "type": "number"
          },
          "HolidayEntitling": {
            "type": "boolean"
          },
          "Hours": {
            "format": "float",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "CauseCode",
          "Date",
          "EmployeeId"
        ],
        "type": "object"
      },
      "fortnox_AbsenceTransactionSingleItem_Wrap": {
        "properties": {
          "AbsenceTransaction": {
            "$ref": "#/components/schemas/fortnox_AbsenceTransactionSingleItem"
          }
        },
        "type": "object"
      },
      "fortnox_AccountChart": {
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_AccountChart_Wrap": {
        "properties": {
          "AccountCharts": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AccountChart"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_AccountListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "BalanceBroughtForward": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "CostCenterSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "Number": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Project": {
            "type": "string"
          },
          "ProjectSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "SRU": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Description",
          "Number"
        ],
        "type": "object"
      },
      "fortnox_AccountListItem_Wrap": {
        "properties": {
          "Accounts": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AccountListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_AccountPayload": {
        "properties": {
          "Active": {
            "type": "boolean"
          },
          "BalanceBroughtForward": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "CostCenterSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "Number": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "OpeningQuantities": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AccountPayload_OpeningQuantities"
            },
            "type": "array"
          },
          "Project": {
            "type": "string"
          },
          "ProjectSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "SRU": {
            "format": "int32",
            "type": "integer"
          },
          "TransactionInformation": {
            "type": "string"
          },
          "TransactionInformationSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "required": [
          "Description",
          "Number"
        ],
        "type": "object"
      },
      "fortnox_AccountPayload_OpeningQuantities": {
        "properties": {
          "Balance": {
            "format": "int32",
            "type": "integer"
          },
          "Project": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_AccountPayload_Wrap": {
        "properties": {
          "Account": {
            "$ref": "#/components/schemas/fortnox_AccountPayload"
          }
        },
        "type": "object"
      },
      "fortnox_AccountSingleItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "BalanceBroughtForward": {
            "format": "double",
            "type": "number"
          },
          "BalanceCarriedForward": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "CostCenterSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "Number": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "OpeningQuantities": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AccountSingleItem_OpeningQuantities"
            },
            "type": "array"
          },
          "Project": {
            "type": "string"
          },
          "ProjectSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "QuantitySettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "QuantityUnit": {
            "type": "string"
          },
          "SRU": {
            "format": "int32",
            "type": "integer"
          },
          "TransactionInformation": {
            "type": "string"
          },
          "TransactionInformationSettings": {
            "enum": [
              "ALLOWED",
              "MANDATORY",
              "NOTALLOWED"
            ],
            "type": "string"
          },
          "VATCode": {
            "type": "string"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Description",
          "Number"
        ],
        "type": "object"
      },
      "fortnox_AccountSingleItem_OpeningQuantities": {
        "properties": {
          "Balance": {
            "format": "int32",
            "type": "integer"
          },
          "Project": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_AccountSingleItem_Wrap": {
        "properties": {
          "Account": {
            "$ref": "#/components/schemas/fortnox_AccountSingleItem"
          }
        },
        "type": "object"
      },
      "fortnox_Article": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "ArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "Bulky": {
            "type": "boolean"
          },
          "ConstructionAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "CostCalculationMethod": {
            "type": "string"
          },
          "DefaultStockLocation": {
            "type": "string"
          },
          "DefaultStockPoint": {
            "type": "string"
          },
          "Depth": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "DirectCost": {
            "format": "double",
            "type": "number"
          },
          "DisposableQuantity": {
            "format": "double",
            "type": "number"
          },
          "EAN": {
            "maxLength": 30,
            "type": "string"
          },
          "EUAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "EUVATAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "Expired": {
            "type": "boolean"
          },
          "ExportAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "FreightCost": {
            "format": "double",
            "type": "number"
          },
          "Height": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          },
          "Housework": {
            "type": "boolean"
          },
          "HouseworkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "COOKING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "TUTORING",
              "FURNISHING",
              "HOMEMAINTENANCE",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "EMPTYHOUSEWORK",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Manufacturer": {
            "maxLength": 50,
            "type": "string"
          },
          "ManufacturerArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "Note": {
            "maxLength": 10000,
            "type": "string"
          },
          "OtherCost": {
            "format": "double",
            "type": "number"
          },
          "PurchaseAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "PurchasePrice": {
            "format": "double",
            "type": "number"
          },
          "QuantityInStock": {
            "format": "double",
            "type": "number"
          },
          "ReservedQuantity": {
            "format": "double",
            "type": "number"
          },
          "SalesAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "SalesPrice": {
            "format": "double",
            "type": "number"
          },
          "StockAccount": {
            "format": "int32",
            "type": "integer"
          },
          "StockChangeAccount": {
            "format": "int32",
            "type": "integer"
          },
          "StockGoods": {
            "type": "boolean"
          },
          "StockPlace": {
            "maxLength": 100,
            "type": "string"
          },
          "StockValue": {
            "format": "double",
            "type": "number"
          },
          "StockWarning": {
            "format": "double",
            "type": "number"
          },
          "SupplierName": {
            "type": "string"
          },
          "SupplierNumber": {
            "type": "string"
          },
          "Type": {
            "enum": [
              "STOCK",
              "SERVICE"
            ],
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "WebshopArticle": {
            "type": "boolean"
          },
          "Weight": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          },
          "Width": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_ArticleFileConnection": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "FileId": {
            "type": "string"
          }
        },
        "required": [
          "ArticleNumber",
          "FileId"
        ],
        "type": "object"
      },
      "fortnox_ArticleFileConnectionListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "FileId": {
            "type": "string"
          }
        },
        "required": [
          "ArticleNumber",
          "FileId"
        ],
        "type": "object"
      },
      "fortnox_ArticleFileConnectionListItem_Wrap": {
        "properties": {
          "ArticleFileConnections": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ArticleFileConnectionListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleFileConnection_Wrap": {
        "properties": {
          "ArticleFileConnection": {
            "$ref": "#/components/schemas/fortnox_ArticleFileConnection"
          }
        },
        "required": [
          "ArticleFileConnection"
        ],
        "type": "object"
      },
      "fortnox_ArticleListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "DisposableQuantity": {
            "type": "string"
          },
          "EAN": {
            "maxLength": 30,
            "type": "string"
          },
          "Housework": {
            "type": "boolean"
          },
          "PurchasePrice": {
            "type": "string"
          },
          "QuantityInStock": {
            "format": "double",
            "type": "number"
          },
          "ReservedQuantity": {
            "type": "string"
          },
          "SalesPrice": {
            "type": "string"
          },
          "StockPlace": {
            "maxLength": 100,
            "type": "string"
          },
          "StockValue": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "type": "string"
          },
          "WebshopArticle": {
            "type": "boolean"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_ArticleListItemV2": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "DisposableQuantity": {
            "type": "string"
          },
          "EAN": {
            "maxLength": 30,
            "type": "string"
          },
          "Housework": {
            "type": "boolean"
          },
          "PurchasePrice": {
            "type": "string"
          },
          "QuantityInStock": {
            "format": "double",
            "type": "number"
          },
          "ReservedQuantity": {
            "type": "string"
          },
          "SalesPrice": {
            "type": "string"
          },
          "StockPlace": {
            "maxLength": 100,
            "type": "string"
          },
          "StockValue": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "type": "string"
          },
          "WebshopArticle": {
            "type": "boolean"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_ArticleListItemV2_List": {
        "properties": {
          "Articles": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ArticleListItemV2"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleListItem_List": {
        "properties": {
          "Articles": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ArticleListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleUrlConnection": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "URLConnection": {
            "type": "string"
          }
        },
        "required": [
          "ArticleNumber",
          "URLConnection"
        ],
        "type": "object"
      },
      "fortnox_ArticleUrlConnectionListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "URLConnection": {
            "type": "string"
          }
        },
        "required": [
          "ArticleNumber",
          "URLConnection"
        ],
        "type": "object"
      },
      "fortnox_ArticleUrlConnectionListItem_List": {
        "properties": {
          "ArticleUrlConnections": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ArticleUrlConnectionListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleUrlConnection_Wrap": {
        "properties": {
          "ArticleUrlConnection": {
            "$ref": "#/components/schemas/fortnox_ArticleUrlConnection"
          }
        },
        "required": [
          "ArticleUrlConnection"
        ],
        "type": "object"
      },
      "fortnox_ArticleV2": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "ArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "Bulky": {
            "type": "boolean"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_ArticleV2_Bundle"
          },
          "BundleArticle": {
            "type": "boolean"
          },
          "ConstructionAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "CostCalculationMethod": {
            "type": "string"
          },
          "DefaultStockLocation": {
            "type": "string"
          },
          "DefaultStockPoint": {
            "type": "string"
          },
          "Depth": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "DirectCost": {
            "format": "double",
            "type": "number"
          },
          "DisposableQuantity": {
            "format": "double",
            "type": "number"
          },
          "EAN": {
            "maxLength": 30,
            "type": "string"
          },
          "EUAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "EUVATAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "Expired": {
            "type": "boolean"
          },
          "ExportAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "FreightCost": {
            "format": "double",
            "type": "number"
          },
          "Height": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          },
          "Housework": {
            "type": "boolean"
          },
          "HouseworkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "FURNISHING",
              "HOMEMAINTENANCE",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "EMPTYHOUSEWORK",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Manufacturer": {
            "maxLength": 50,
            "type": "string"
          },
          "ManufacturerArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "Note": {
            "maxLength": 10000,
            "type": "string"
          },
          "OtherCost": {
            "format": "double",
            "type": "number"
          },
          "PurchaseAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "PurchasePrice": {
            "format": "double",
            "type": "number"
          },
          "QuantityInStock": {
            "format": "double",
            "type": "number"
          },
          "ReservedQuantity": {
            "format": "double",
            "type": "number"
          },
          "SalesAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "SalesPrice": {
            "format": "double",
            "type": "number"
          },
          "StockAccount": {
            "format": "int32",
            "type": "integer"
          },
          "StockChangeAccount": {
            "format": "int32",
            "type": "integer"
          },
          "StockGoods": {
            "type": "boolean"
          },
          "StockPlace": {
            "maxLength": 100,
            "type": "string"
          },
          "StockValue": {
            "format": "double",
            "type": "number"
          },
          "StockWarning": {
            "format": "double",
            "type": "number"
          },
          "SupplierName": {
            "type": "string"
          },
          "SupplierNumber": {
            "type": "string"
          },
          "Type": {
            "enum": [
              "STOCK",
              "SERVICE"
            ],
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "WebshopArticle": {
            "type": "boolean"
          },
          "Weight": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          },
          "Width": {
            "format": "int32",
            "maximum": 999999999,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_ArticleV2_Bundle": {
        "properties": {
          "Comment": {
            "type": "string"
          },
          "PriceAdjustmentRow": {
            "$ref": "#/components/schemas/fortnox_ArticleV2_Bundle_PriceAdjustmentRow"
          },
          "SubItems": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ArticleV2_Bundle_SubItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleV2_Bundle_PriceAdjustmentRow": {
        "properties": {
          "ConstructionAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "Description": {
            "maxLength": 255,
            "type": "string"
          },
          "EUAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "EUVATAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "ExportAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "SalesAccount": {
            "format": "int32",
            "maximum": 99999,
            "minimum": 1000,
            "type": "integer"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleV2_Bundle_SubItem": {
        "properties": {
          "ArticleNumber": {
            "maxLength": 50,
            "type": "string"
          },
          "FixedPrice": {
            "type": "boolean"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fortnox_ArticleV2_Wrap": {
        "properties": {
          "Article": {
            "$ref": "#/components/schemas/fortnox_ArticleV2"
          }
        },
        "type": "object"
      },
      "fortnox_Article_Wrap": {
        "properties": {
          "Article": {
            "$ref": "#/components/schemas/fortnox_Article"
          }
        },
        "type": "object"
      },
      "fortnox_Asset": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AcquisitionDate": {
            "type": "string"
          },
          "AcquisitionStart": {
            "type": "string"
          },
          "AcquisitionValue": {
            "format": "int32",
            "type": "integer"
          },
          "Brand": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Department": {
            "type": "string"
          },
          "DepreciateToResidualValue": {
            "format": "int32",
            "type": "integer"
          },
          "DepreciatedTo": {
            "type": "string"
          },
          "DepreciationFinal": {
            "type": "string"
          },
          "DepreciationMethod": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Group": {
            "type": "string"
          },
          "History": {
            "items": {
              "$ref": "#/components/schemas/fortnox_History"
            },
            "type": "array"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "InsuredNumber": {
            "type": "string"
          },
          "InsuredWith": {
            "type": "string"
          },
          "ManualOb": {
            "format": "int32",
            "type": "integer"
          },
          "Notes": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Placement": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Reference": {
            "type": "string"
          },
          "Room": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "StatusId": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "TypeId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_AssetFileConnection": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AssetId": {
            "type": "string"
          },
          "FileId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_AssetFileConnectionResponse": {
        "properties": {
          "AssetFileConnections": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AssetFileConnection"
            },
            "type": "array"
          },
          "MetaInformation": {
            "$ref": "#/components/schemas/fortnox_MetaInformation"
          }
        },
        "type": "object"
      },
      "fortnox_AssetType": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccountAsset": {
            "format": "int32",
            "type": "integer"
          },
          "AccountAssetId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountDepreciation": {
            "format": "int32",
            "type": "integer"
          },
          "AccountDepreciationId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountRevaluation": {
            "format": "int32",
            "type": "integer"
          },
          "AccountRevaluationId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountSaleLoss": {
            "format": "int32",
            "type": "integer"
          },
          "AccountSaleLossId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountSaleWin": {
            "format": "int32",
            "type": "integer"
          },
          "AccountSaleWinId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountValueLoss": {
            "format": "int32",
            "type": "integer"
          },
          "AccountValueLossId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountWriteDown": {
            "format": "int32",
            "type": "integer"
          },
          "AccountWriteDownAck": {
            "format": "int32",
            "type": "integer"
          },
          "AccountWriteDownAckId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountWriteDownId": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "InUse": {
            "type": "boolean"
          },
          "Notes": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_AssetType_WrapList": {
        "properties": {
          "MetaInformation": {
            "$ref": "#/components/schemas/fortnox_MetaInformation"
          },
          "Types": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AssetType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_AssetType_WrapSingle": {
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/fortnox_AssetType"
          }
        },
        "type": "object"
      },
      "fortnox_Asset_Single": {
        "properties": {
          "Assets": {
            "$ref": "#/components/schemas/fortnox_Asset"
          }
        },
        "type": "object"
      },
      "fortnox_AttendanceTransaction": {
        "properties": {
          "CauseCode": {
            "enum": [
              "ARB",
              "BE2",
              "BER",
              "FLX",
              "HLG",
              "JO2",
              "JOR",
              "MER",
              "OB1",
              "OB2",
              "OB3",
              "OB4",
              "OB5",
              "OK0",
              "OK1",
              "OK2",
              "OK3",
              "OK4",
              "OK5",
              "OT1",
              "OT2",
              "OT3",
              "OT4",
              "OT5",
              "RES",
              "TID"
            ],
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "Hours": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          }
        },
        "required": [
          "CauseCode",
          "Date",
          "EmployeeId"
        ],
        "type": "object"
      },
      "fortnox_AttendanceTransactionListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "CauseCode": {
            "enum": [
              "ARB",
              "BE2",
              "BER",
              "FLX",
              "HLG",
              "JO2",
              "JOR",
              "MER",
              "OB1",
              "OB2",
              "OB3",
              "OB4",
              "OB5",
              "OK0",
              "OK1",
              "OK2",
              "OK3",
              "OK4",
              "OK5",
              "OT1",
              "OT2",
              "OT3",
              "OT4",
              "OT5",
              "RES",
              "TID"
            ],
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "Hours": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "CauseCode",
          "Date",
          "EmployeeId"
        ],
        "type": "object"
      },
      "fortnox_AttendanceTransactionListItem_List": {
        "properties": {
          "AttendanceTransactions": {
            "items": {
              "$ref": "#/components/schemas/fortnox_AttendanceTransactionListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_AttendanceTransaction_Wrap": {
        "properties": {
          "AttendanceTransaction": {
            "$ref": "#/components/schemas/fortnox_AttendanceTransaction"
          }
        },
        "type": "object"
      },
      "fortnox_AuthData": {
        "properties": {
          "Authorization": {
            "$ref": "#/components/schemas/fortnox_AuthorizationCode"
          }
        },
        "type": "object"
      },
      "fortnox_AuthorizationCode": {
        "properties": {
          "AuthorizationCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_BundlePriceCalculation": {
        "properties": {
          "Rows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_BundlePriceCalculation_BundleRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_BundlePriceCalculation_Bundle": {
        "properties": {
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_BundlePriceCalculation_SubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_BundlePriceCalculation_BundleRow": {
        "properties": {
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_BundlePriceCalculation_Bundle"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fortnox_BundlePriceCalculation_BundleSubItem": {
        "properties": {
          "AmountInBundle": {
            "format": "double",
            "type": "number"
          },
          "FixedPrice": {
            "type": "boolean"
          },
          "PriceAdjustment": {
            "type": "boolean"
          },
          "SalesPriceInBundle": {
            "format": "double",
            "type": "number"
          },
          "UserPrice": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "fortnox_BundlePriceCalculation_SubRow": {
        "properties": {
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundlePriceCalculation_BundleSubItem"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "fortnox_BundlePriceCalculation_Wrap": {
        "properties": {
          "BundlePriceCalculation": {
            "$ref": "#/components/schemas/fortnox_BundlePriceCalculation"
          }
        },
        "type": "object"
      },
      "fortnox_BundleSubItem": {
        "properties": {
          "AmountInBundle": {
            "format": "double",
            "type": "number"
          },
          "FixedPrice": {
            "type": "boolean"
          },
          "PriceAdjustment": {
            "type": "boolean"
          },
          "SalesPriceInBundle": {
            "format": "double",
            "type": "number"
          },
          "UserPrice": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "fortnox_ClientInfo": {
        "properties": {
          "CompanyName": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "OrganizationNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_CompanyInfo": {
        "properties": {
          "Address": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "CountryCode": {
            "type": "string"
          },
          "DatabaseNumber": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationNumber": {
            "type": "string"
          },
          "VisitAddress": {
            "type": "string"
          },
          "VisitCity": {
            "type": "string"
          },
          "VisitCountryCode": {
            "type": "string"
          },
          "VisitZipCode": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_CompanyInfo_Wrap": {
        "properties": {
          "CompanyInformation": {
            "$ref": "#/components/schemas/fortnox_CompanyInfo"
          }
        },
        "type": "object"
      },
      "fortnox_CompanySettings": {
        "properties": {
          "Address": {
            "type": "string"
          },
          "BG": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "BranchCode": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ContactFirstName": {
            "type": "string"
          },
          "ContactLastName": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "CountryCode": {
            "type": "string"
          },
          "DatabaseNumber": {
            "type": "string"
          },
          "Domicile": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Fax": {
            "type": "string"
          },
          "IBAN": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationNumber": {
            "type": "string"
          },
          "PG": {
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "TaxEnabled": {
            "type": "boolean"
          },
          "VATNumber": {
            "type": "string"
          },
          "VisitAddress": {
            "type": "string"
          },
          "VisitCity": {
            "type": "string"
          },
          "VisitCountry": {
            "type": "string"
          },
          "VisitCountryCode": {
            "type": "string"
          },
          "VisitName": {
            "type": "string"
          },
          "VisitZipCode": {
            "type": "string"
          },
          "WWW": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_CompanySettings_Wrap": {
        "properties": {
          "CompanySettings": {
            "$ref": "#/components/schemas/fortnox_CompanySettings"
          }
        },
        "type": "object"
      },
      "fortnox_Contract": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "Continuous": {
            "type": "boolean"
          },
          "ContractDate": {
            "format": "date",
            "type": "string"
          },
          "ContractLength": {
            "format": "int32",
            "type": "integer"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_Contract_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceDiscount": {
            "format": "double",
            "type": "number"
          },
          "InvoiceInterval": {
            "format": "int32",
            "type": "integer"
          },
          "InvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Contract_InvoiceRow"
            },
            "type": "array"
          },
          "InvoicesRemaining": {
            "type": "string"
          },
          "Language": {
            "enum": [
              "SV",
              "EN"
            ],
            "type": "string"
          },
          "LastInvoiceDate": {
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "OurReference": {
            "maxLength": 25,
            "type": "string"
          },
          "PeriodEnd": {
            "format": "date",
            "type": "string"
          },
          "PeriodStart": {
            "format": "date",
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "TaxReduction": {
            "format": "double",
            "type": "number"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TemplateName": {
            "type": "string"
          },
          "TemplateNumber": {
            "format": "int32",
            "type": "integer"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VatIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber",
          "InvoiceRows",
          "PeriodEnd"
        ],
        "type": "object"
      },
      "fortnox_ContractAccrual": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccrualAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "AccrualRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ContractAccrual_AccrualRow"
            },
            "maxItems": 2147483647,
            "minItems": 2,
            "type": "array"
          },
          "CostAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "DocumentNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Period": {
            "enum": [
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "ANNUALLY"
            ],
            "type": "string"
          },
          "Times": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          }
        },
        "required": [
          "AccrualAccount",
          "AccrualRows",
          "CostAccount",
          "Description",
          "DocumentNumber",
          "Total"
        ],
        "type": "object"
      },
      "fortnox_ContractAccrualListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DocumentNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Period": {
            "enum": [
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "ANNUALLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "Description",
          "DocumentNumber"
        ],
        "type": "object"
      },
      "fortnox_ContractAccrualListItem_List": {
        "properties": {
          "ContractAccruals": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ContractAccrualListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ContractAccrual_AccrualRow": {
        "properties": {
          "Account": {
            "format": "int32",
            "type": "integer"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "format": "double",
            "type": "number"
          },
          "Debit": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "TransactionInformation": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "Account",
          "Credit",
          "Debit"
        ],
        "type": "object"
      },
      "fortnox_ContractAccrual_Wrap": {
        "properties": {
          "ContractAccrual": {
            "$ref": "#/components/schemas/fortnox_ContractAccrual"
          }
        },
        "type": "object"
      },
      "fortnox_ContractListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Continuous": {
            "type": "boolean"
          },
          "ContractLength": {
            "format": "int32",
            "type": "integer"
          },
          "Currency": {
            "type": "string"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "Invoiceinterval": {
            "format": "int32",
            "type": "integer"
          },
          "InvoicesRemaining": {
            "format": "int32",
            "type": "integer"
          },
          "LastInvoiceDate": {
            "type": "string"
          },
          "PeriodEnd": {
            "format": "date",
            "type": "string"
          },
          "PeriodStart": {
            "format": "date",
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "TemplateNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "CustomerNumber",
          "PeriodEnd"
        ],
        "type": "object"
      },
      "fortnox_ContractListItem_List": {
        "properties": {
          "Contracts": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ContractListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ContractTemplate": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "Continuous": {
            "type": "boolean"
          },
          "ContractLength": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1,
            "type": "integer"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "InvoiceInterval": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1,
            "type": "integer"
          },
          "InvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ContractTemplate_InvoiceRow"
            },
            "type": "array"
          },
          "OurReference": {
            "maxLength": 25,
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "TemplateName": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "TemplateNumber": {
            "format": "int32",
            "type": "integer"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "WayOfDelivery": {
            "type": "string"
          }
        },
        "required": [
          "TemplateName"
        ],
        "type": "object"
      },
      "fortnox_ContractTemplateListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ContractLength": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1,
            "type": "integer"
          },
          "ContractTemplate": {
            "format": "int32",
            "type": "integer"
          },
          "ContractTemplateName": {
            "type": "string"
          },
          "InvoiceInterval": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_ContractTemplateListItem_List": {
        "properties": {
          "ContractTemplates": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ContractTemplateListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ContractTemplate_InvoiceRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "PERCENT",
              "AMOUNT"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_ContractTemplate_Wrap": {
        "properties": {
          "ContractTemplate": {
            "$ref": "#/components/schemas/fortnox_ContractTemplate"
          }
        },
        "type": "object"
      },
      "fortnox_Contract_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "type": "string"
          },
          "EmailSubject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Contract_InvoiceRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "type": "integer"
          },
          "HouseWorkType": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "PriceExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "ArticleNumber",
          "DeliveredQuantity"
        ],
        "type": "object"
      },
      "fortnox_Contract_Wrap": {
        "properties": {
          "Contract": {
            "$ref": "#/components/schemas/fortnox_Contract"
          }
        },
        "type": "object"
      },
      "fortnox_CostCenter": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "Code": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "Note": {
            "type": "string"
          }
        },
        "required": [
          "Code",
          "Description"
        ],
        "type": "object"
      },
      "fortnox_CostCenter_List": {
        "properties": {
          "CostCenters": {
            "items": {
              "$ref": "#/components/schemas/fortnox_CostCenter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_CostCenter_Wrap": {
        "properties": {
          "CostCenter": {
            "$ref": "#/components/schemas/fortnox_CostCenter"
          }
        },
        "type": "object"
      },
      "fortnox_CreateAsset": {
        "properties": {
          "AccountAssetId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountDepreciationId": {
            "format": "int32",
            "type": "integer"
          },
          "AccountValueLossId": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Type": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_CreateAssetFileConnection": {
        "properties": {
          "AssetId": {
            "type": "string"
          },
          "FileId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_CreateAsset_Wrap": {
        "properties": {
          "AssetType": {
            "$ref": "#/components/schemas/fortnox_CreateAsset"
          }
        },
        "type": "object"
      },
      "fortnox_CreatePayload": {
        "properties": {
          "InvoiceNumber": {
            "type": "string"
          },
          "SendMethod": {
            "type": "string"
          },
          "Service": {
            "type": "string"
          }
        },
        "required": [
          "InvoiceNumber",
          "SendMethod",
          "Service"
        ],
        "type": "object"
      },
      "fortnox_CreatePayload_Wrap": {
        "properties": {
          "NoxFinansInvoice": {
            "$ref": "#/components/schemas/fortnox_CreatePayload"
          }
        },
        "type": "object"
      },
      "fortnox_Currency": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "BuyRate": {
            "format": "double",
            "type": "number"
          },
          "Code": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsAutomatic": {
            "type": "boolean"
          },
          "SellRate": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "Code",
          "Description"
        ],
        "type": "object"
      },
      "fortnox_Currency_List": {
        "properties": {
          "Currencies": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Currency"
            },
            "type": "array"
          },
          "MetaInformation": {
            "$ref": "#/components/schemas/fortnox_MetaInformation"
          }
        },
        "type": "object"
      },
      "fortnox_Currency_Wrap": {
        "properties": {
          "Currency": {
            "$ref": "#/components/schemas/fortnox_Currency"
          }
        },
        "required": [
          "Currency"
        ],
        "type": "object"
      },
      "fortnox_Customer": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "Address1": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "Address2": {
            "maxLength": 1024,
            "type": "string"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "CountryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CustomerNumber": {
            "maxLength": 1024,
            "type": "string"
          },
          "DefaultDeliveryTypes": {
            "$ref": "#/components/schemas/fortnox_Customer_DefaultDeliveryTypes"
          },
          "DefaultTemplates": {
            "$ref": "#/components/schemas/fortnox_Customer_DefaultTemplates"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "DeliveryFax": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryPhone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryPhone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "maxLength": 10,
            "type": "string"
          },
          "Email": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailInvoice": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailInvoiceBCC": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailInvoiceCC": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailOffer": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailOfferBCC": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailOfferCC": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailOrder": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailOrderBCC": {
            "maxLength": 1024,
            "type": "string"
          },
          "EmailOrderCC": {
            "maxLength": 1024,
            "type": "string"
          },
          "ExternalReference": {
            "maxLength": 1024,
            "type": "string"
          },
          "Fax": {
            "maxLength": 1024,
            "type": "string"
          },
          "GLN": {
            "maxLength": 13,
            "minLength": 13,
            "type": "string"
          },
          "GLNDelivery": {
            "maxLength": 13,
            "minLength": 13,
            "type": "string"
          },
          "InvoiceAdministrationFee": {
            "type": "string"
          },
          "InvoiceDiscount": {
            "format": "double",
            "type": "number"
          },
          "InvoiceFreight": {
            "type": "string"
          },
          "InvoiceRemark": {
            "maxLength": 1024,
            "type": "string"
          },
          "Name": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "Phone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Phone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SalesAccount": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "ShowPriceVATIncluded": {
            "type": "boolean"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "Type": {
            "enum": [
              "PRIVATE",
              "COMPANY"
            ],
            "type": "string"
          },
          "VATNumber": {
            "type": "string"
          },
          "VATType": {
            "enum": [
              "SEVAT",
              "SEREVERSEDVAT",
              "EUREVERSEDVAT",
              "EUVAT",
              "EXPORT"
            ],
            "type": "string"
          },
          "VisitingAddress": {
            "maxLength": 128,
            "type": "string"
          },
          "VisitingCity": {
            "maxLength": 128,
            "type": "string"
          },
          "VisitingCountry": {
            "maxLength": 128,
            "type": "string"
          },
          "VisitingCountryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "VisitingZipCode": {
            "maxLength": 10,
            "type": "string"
          },
          "WWW": {
            "maxLength": 128,
            "type": "string"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "maxLength": 10,
            "type": "string"
          }
        },
        "required": [
          "Name"
        ],
        "type": "object"
      },
      "fortnox_CustomerListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Address1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Address2": {
            "maxLength": 1024,
            "type": "string"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "CustomerNumber": {
            "maxLength": 1024,
            "type": "string"
          },
          "Email": {
            "maxLength": 1024,
            "type": "string"
          },
          "Name": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "OrganisationNumber": {
            "maxLength": 30,
            "type": "string"
          },
          "Phone": {
            "maxLength": 1024,
            "type": "string"
          },
          "ZipCode": {
            "maxLength": 10,
            "type": "string"
          }
        },
        "required": [
          "Name"
        ],
        "type": "object"
      },
      "fortnox_CustomerListItem_List": {
        "properties": {
          "Customers": {
            "items": {
              "$ref": "#/components/schemas/fortnox_CustomerListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_CustomerReference": {
        "properties": {
          "CustomerReferenceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_CustomerReference_CustomerReferenceRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_CustomerReference_CustomerReferenceRow": {
        "properties": {
          "CustomerNumber": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_CustomerReference_CustomerReferenceRow_Wrap": {
        "properties": {
          "CustomerReferenceRow": {
            "$ref": "#/components/schemas/fortnox_CustomerReference_CustomerReferenceRow"
          }
        },
        "type": "object"
      },
      "fortnox_CustomerReference_Wrap": {
        "properties": {
          "CustomerReference": {
            "$ref": "#/components/schemas/fortnox_CustomerReference"
          }
        },
        "type": "object"
      },
      "fortnox_Customer_DefaultDeliveryTypes": {
        "properties": {
          "Invoice": {
            "enum": [
              "PRINT",
              "EMAIL",
              "PRINTSERVICE"
            ],
            "type": "string"
          },
          "Offer": {
            "enum": [
              "PRINT",
              "EMAIL",
              "PRINTSERVICE"
            ],
            "type": "string"
          },
          "Order": {
            "enum": [
              "PRINT",
              "EMAIL",
              "PRINTSERVICE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Customer_DefaultTemplates": {
        "properties": {
          "CashInvoice": {
            "type": "string"
          },
          "Invoice": {
            "type": "string"
          },
          "Offer": {
            "type": "string"
          },
          "Order": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Customer_Wrap": {
        "properties": {
          "Customer": {
            "$ref": "#/components/schemas/fortnox_Customer"
          }
        },
        "type": "object"
      },
      "fortnox_Delete": {
        "properties": {
          "Date": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Delete_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_Delete"
          }
        },
        "type": "object"
      },
      "fortnox_Depreciation": {
        "properties": {
          "AssetIds": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "DepreciateUntil": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_DepreciationResponse": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "FinancialYear": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_DepreciationResponse_Wrap": {
        "properties": {
          "AssetsDepreciation": {
            "items": {
              "$ref": "#/components/schemas/fortnox_DepreciationResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Depreciation_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_Depreciation"
          }
        },
        "type": "object"
      },
      "fortnox_EUVatLimitRegulation": {
        "properties": {
          "IsOverLimit": {
            "type": "boolean"
          },
          "Limit": {
            "format": "int32",
            "type": "integer"
          },
          "TotalExclVat": {
            "format": "double",
            "type": "number"
          },
          "Year": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_EUVatLimitRegulation_Wrap": {
        "properties": {
          "EUVatLimitRegulation": {
            "$ref": "#/components/schemas/fortnox_EUVatLimitRegulation"
          }
        },
        "type": "object"
      },
      "fortnox_Employee": {
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AutoNonRecurringTax": {
            "type": "boolean"
          },
          "AverageHourlyWage": {
            "type": "string"
          },
          "AverageWeeklyHours": {
            "type": "string"
          },
          "BankAccountNo": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ClearingNo": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "DatedSchedules": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Employee_DatedSchedule"
            },
            "type": "array"
          },
          "DatedWages": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Employee_DatedWage"
            },
            "type": "array"
          },
          "Email": {
            "type": "string"
          },
          "EmployedTo": {
            "format": "date",
            "type": "string"
          },
          "EmployeeChildren": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Employee_EmployeeChild"
            },
            "type": "array"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "EmploymentDate": {
            "format": "date",
            "type": "string"
          },
          "EmploymentForm": {
            "enum": [
              "TV",
              "PRO",
              "TID",
              "SVT",
              "VIK",
              "PRJ",
              "PRA",
              "FER",
              "SES",
              "NEJ"
            ],
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "ForaType": {
            "enum": [
              "A",
              "A51",
              "A52",
              "A53",
              "A54",
              "A55",
              "A56",
              "A57",
              "A58",
              "A59",
              "A60",
              "A61",
              "A62",
              "A63",
              "A64",
              "A65",
              "A66",
              "A67",
              "A68",
              "A69",
              "A70",
              "A71",
              "A72",
              "A73",
              "A74",
              "A75",
              "A76",
              "A77",
              "A78",
              "A79",
              "A80",
              "A81",
              "A82",
              "A83",
              "A84",
              "A85",
              "A86",
              "A3",
              "A91",
              "A92",
              "A93",
              "A11",
              "A12",
              "A13",
              "A14",
              "A15",
              "A16",
              "A17",
              "A18",
              "A19",
              "A20",
              "A21",
              "A22",
              "A23",
              "A24",
              "A25",
              "A26",
              "A27",
              "A28",
              "A29",
              "A30",
              "A41",
              "A42",
              "A43",
              "A44",
              "A45",
              "A46",
              "A47",
              "A48",
              "T",
              "T6",
              "-"
            ],
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "HourlyPay": {
            "type": "string"
          },
          "Inactive": {
            "type": "boolean"
          },
          "JobTitle": {
            "maxLength": 30,
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "MonthlySalary": {
            "type": "string"
          },
          "NonRecurringTax": {
            "type": "string"
          },
          "PersonalIdentityNumber": {
            "type": "string"
          },
          "PersonelType": {
            "enum": [
              "TJM",
              "ARB"
            ],
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PostCode": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SalaryForm": {
            "enum": [
              "MAN",
              "TIM"
            ],
            "type": "string"
          },
          "ScheduleId": {
            "type": "string"
          },
          "TaxAllowance": {
            "enum": [
              "HUV",
              "EXT",
              "TMP",
              "STU",
              "EJ",
              "???"
            ],
            "type": "string"
          },
          "TaxColumn": {
            "format": "int32",
            "maximum": 6,
            "minimum": 1,
            "type": "integer"
          },
          "TaxTable": {
            "type": "string"
          },
          "VacationDaysPaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingPaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingPrepaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSaved": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingUnpaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPrepaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredPaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredPrepaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSaved": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredUnpaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSaved": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysUnpaid": {
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "Email",
          "FirstName",
          "LastName"
        ],
        "type": "object"
      },
      "fortnox_EmployeeListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AutoNonRecurringTax": {
            "type": "boolean"
          },
          "AverageHourlyWage": {
            "type": "string"
          },
          "AverageWeeklyHours": {
            "type": "string"
          },
          "BankAccountNo": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ClearingNo": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "DatedSchedules": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Employee_DatedSchedule"
            },
            "type": "array"
          },
          "DatedWages": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Employee_DatedWage"
            },
            "type": "array"
          },
          "Email": {
            "type": "string"
          },
          "EmployedTo": {
            "format": "date",
            "type": "string"
          },
          "EmployeeChildren": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Employee_EmployeeChild"
            },
            "type": "array"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "EmploymentDate": {
            "format": "date",
            "type": "string"
          },
          "EmploymentForm": {
            "enum": [
              "TV",
              "PRO",
              "TID",
              "SVT",
              "VIK",
              "PRJ",
              "PRA",
              "FER",
              "SES",
              "NEJ"
            ],
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "ForaType": {
            "enum": [
              "A",
              "A51",
              "A52",
              "A53",
              "A54",
              "A55",
              "A56",
              "A57",
              "A58",
              "A59",
              "A60",
              "A61",
              "A62",
              "A63",
              "A64",
              "A65",
              "A66",
              "A67",
              "A68",
              "A69",
              "A70",
              "A71",
              "A72",
              "A73",
              "A74",
              "A75",
              "A76",
              "A77",
              "A78",
              "A79",
              "A80",
              "A81",
              "A82",
              "A83",
              "A84",
              "A85",
              "A86",
              "A3",
              "A91",
              "A92",
              "A93",
              "A11",
              "A12",
              "A13",
              "A14",
              "A15",
              "A16",
              "A17",
              "A18",
              "A19",
              "A20",
              "A21",
              "A22",
              "A23",
              "A24",
              "A25",
              "A26",
              "A27",
              "A28",
              "A29",
              "A30",
              "A41",
              "A42",
              "A43",
              "A44",
              "A45",
              "A46",
              "A47",
              "A48",
              "T",
              "T6",
              "-"
            ],
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "HourlyPay": {
            "type": "string"
          },
          "Inactive": {
            "type": "boolean"
          },
          "JobTitle": {
            "maxLength": 30,
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "MonthlySalary": {
            "type": "string"
          },
          "NonRecurringTax": {
            "type": "string"
          },
          "PersonalIdentityNumber": {
            "type": "string"
          },
          "PersonelType": {
            "enum": [
              "TJM",
              "ARB"
            ],
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PostCode": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SalaryForm": {
            "enum": [
              "MAN",
              "TIM"
            ],
            "type": "string"
          },
          "ScheduleId": {
            "type": "string"
          },
          "TaxAllowance": {
            "enum": [
              "HUV",
              "EXT",
              "TMP",
              "STU",
              "EJ",
              "???"
            ],
            "type": "string"
          },
          "TaxColumn": {
            "format": "int32",
            "maximum": 6,
            "minimum": 1,
            "type": "integer"
          },
          "TaxTable": {
            "type": "string"
          },
          "VacationDaysPaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingPaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingPrepaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSaved": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingSavedYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPendingUnpaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysPrepaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredPaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredPrepaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSaved": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredSavedYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysRegisteredUnpaid": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSaved": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedEmploymentRateYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear1": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear2": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear3": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear4": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear5": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysSavedYear6Plus": {
            "format": "float",
            "type": "number"
          },
          "VacationDaysUnpaid": {
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "Email",
          "FirstName",
          "LastName"
        ],
        "type": "object"
      },
      "fortnox_EmployeeListItem_Wrap": {
        "properties": {
          "Employees": {
            "items": {
              "$ref": "#/components/schemas/fortnox_EmployeeListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Employee_DatedSchedule": {
        "properties": {
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "FirstDay": {
            "format": "date",
            "type": "string"
          },
          "ScheduleId": {
            "type": "string"
          }
        },
        "required": [
          "EmployeeId",
          "FirstDay"
        ],
        "type": "object"
      },
      "fortnox_Employee_DatedWage": {
        "properties": {
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "FirstDay": {
            "format": "date",
            "type": "string"
          },
          "HourlyPay": {
            "type": "string"
          },
          "MonthlySalary": {
            "type": "string"
          }
        },
        "required": [
          "EmployeeId",
          "FirstDay"
        ],
        "type": "object"
      },
      "fortnox_Employee_EmployeeChild": {
        "properties": {
          "ApprovedDays": {
            "format": "int32",
            "type": "integer"
          },
          "Child": {
            "type": "string"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "IngoingWithdrawnDays": {
            "format": "int32",
            "type": "integer"
          },
          "WithdrawnDays": {
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "ApprovedDays",
          "Child",
          "EmployeeId",
          "IngoingWithdrawnDays"
        ],
        "type": "object"
      },
      "fortnox_Employee_Wrap": {
        "properties": {
          "Employee": {
            "$ref": "#/components/schemas/fortnox_Employee"
          }
        },
        "type": "object"
      },
      "fortnox_ErrorInformationWrap": {
        "properties": {
          "ErrorInformation": {
            "$ref": "#/components/schemas/fortnox_ErrorInformationWrap_ErrorInformation"
          }
        },
        "type": "object"
      },
      "fortnox_ErrorInformationWrap_ErrorInformation": {
        "properties": {
          "Code": {
            "format": "int32",
            "type": "integer"
          },
          "Error": {
            "format": "int32",
            "type": "integer"
          },
          "Message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Expense": {
        "properties": {
          "Account": {
            "format": "int32",
            "type": "integer"
          },
          "Code": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          }
        },
        "required": [
          "Account",
          "Code",
          "Text"
        ],
        "type": "object"
      },
      "fortnox_ExpenseListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Account": {
            "format": "int32",
            "type": "integer"
          },
          "Code": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          }
        },
        "required": [
          "Account",
          "Code",
          "Text"
        ],
        "type": "object"
      },
      "fortnox_ExpenseListItem_Wrap": {
        "properties": {
          "Expenses": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ExpenseListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Expense_Wrap": {
        "properties": {
          "Expense": {
            "$ref": "#/components/schemas/fortnox_Expense"
          }
        },
        "type": "object"
      },
      "fortnox_FinancialYear": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccountChartType": {
            "type": "string"
          },
          "AccountingMethod": {
            "enum": [
              "ACCRUAL",
              "CASH"
            ],
            "type": "string"
          },
          "FromDate": {
            "format": "date",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "ToDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "FromDate",
          "ToDate"
        ],
        "type": "object"
      },
      "fortnox_FinancialYear_Wrap": {
        "properties": {
          "FinancialYear": {
            "$ref": "#/components/schemas/fortnox_FinancialYear"
          }
        },
        "required": [
          "FinancialYear"
        ],
        "type": "object"
      },
      "fortnox_FinancialYear_WrapList": {
        "properties": {
          "FinancialYears": {
            "items": {
              "$ref": "#/components/schemas/fortnox_FinancialYear"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Folder": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Files": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Folder_FileRow"
            },
            "type": "array"
          },
          "Folders": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Folder_FolderRow"
            },
            "type": "array"
          },
          "Id": {
            "type": "string"
          },
          "Name": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "Name"
        ],
        "type": "object"
      },
      "fortnox_Folder_FileRow": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArchiveFileId": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "Size": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Folder_FileRow_Wrap": {
        "properties": {
          "File": {
            "$ref": "#/components/schemas/fortnox_Folder_FileRow"
          }
        },
        "type": "object"
      },
      "fortnox_Folder_FolderRow": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Folder_Wrap": {
        "properties": {
          "Folder": {
            "$ref": "#/components/schemas/fortnox_Folder"
          }
        },
        "type": "object"
      },
      "fortnox_History": {
        "properties": {
          "Amount": {
            "type": "string"
          },
          "Date": {
            "type": "string"
          },
          "EventId": {
            "format": "int32",
            "type": "integer"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Notes": {
            "type": "string"
          },
          "SupplierInvoice": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Invoice": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "AccountingMethod": {
            "enum": [
              "ACCRUAL",
              "CASH"
            ],
            "type": "string"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "AdministrationFeeVAT": {
            "format": "double",
            "type": "number"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "ContractReference": {
            "format": "int32",
            "type": "integer"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Credit": {
            "type": "string"
          },
          "CreditInvoiceReference": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "maxLength": 1024,
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "EDIInformation": {
            "$ref": "#/components/schemas/fortnox_Invoice_EDIInformation"
          },
          "EUQuarterlyReport": {
            "type": "boolean"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_Invoice_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "maxLength": 80,
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "maxLength": 80,
            "type": "string"
          },
          "FinalPayDate": {
            "format": "date",
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "FreightVAT": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoicePeriodEnd": {
            "format": "date",
            "type": "string"
          },
          "InvoicePeriodReference": {
            "type": "string"
          },
          "InvoicePeriodStart": {
            "format": "date",
            "type": "string"
          },
          "InvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Invoice_InvoiceRow"
            },
            "type": "array"
          },
          "InvoiceType": {
            "enum": [
              "INVOICE",
              "AGREEMENTINVOICE",
              "INTRESTINVOICE",
              "SUMMARYINVOICE",
              "CASHINVOICE"
            ],
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Invoice_Label"
            },
            "type": "array"
          },
          "Language": {
            "enum": [
              "SV",
              "EN"
            ],
            "type": "string"
          },
          "LastRemindDate": {
            "format": "date",
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "NoxFinans": {
            "type": "boolean"
          },
          "OCR": {
            "type": "string"
          },
          "OfferReference": {
            "type": "string"
          },
          "OrderReference": {
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "PaymentWay": {
            "enum": [
              "CASH",
              "CARD",
              "AG"
            ],
            "type": "string"
          },
          "Phone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Phone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "Reminders": {
            "format": "int32",
            "type": "integer"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "Sent": {
            "type": "boolean"
          },
          "TaxReduction": {
            "format": "int32",
            "type": "integer"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "TimeBasisReference": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "WarehouseReady": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "maxLength": 1024,
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoiceAccrual": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccrualAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceAccrualRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoiceAccrual_InvoiceAccrualRow"
            },
            "maxItems": 2147483647,
            "minItems": 2,
            "type": "array"
          },
          "InvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Period": {
            "enum": [
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "ANNUALLY",
              "1_MONTHS",
              "2_MONTHS",
              "3_MONTHS",
              "6_MONTHS",
              "12_MONTHS"
            ],
            "type": "string"
          },
          "RevenueAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "StartDate": {
            "format": "date",
            "type": "string"
          },
          "Times": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          }
        },
        "required": [
          "AccrualAccount",
          "Description",
          "EndDate",
          "InvoiceAccrualRows",
          "InvoiceNumber",
          "RevenueAccount",
          "StartDate",
          "Total"
        ],
        "type": "object"
      },
      "fortnox_InvoiceAccrualListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "InvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Period": {
            "enum": [
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "ANNUALLY",
              "1_MONTHS",
              "2_MONTHS",
              "3_MONTHS",
              "6_MONTHS",
              "12_MONTHS"
            ],
            "type": "string"
          }
        },
        "required": [
          "Description",
          "InvoiceNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoiceAccrualListItem_List": {
        "properties": {
          "InvoiceAccruals": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoiceAccrualListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceAccrual_InvoiceAccrualRow": {
        "properties": {
          "Account": {
            "format": "int32",
            "type": "integer"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "format": "double",
            "type": "number"
          },
          "Debit": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "TransactionInformation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceAccrual_Wrap": {
        "properties": {
          "InvoiceAccrual": {
            "$ref": "#/components/schemas/fortnox_InvoiceAccrual"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "FinalPayDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceType": {
            "enum": [
              "INVOICE",
              "AGREEMENTINVOICE",
              "INTRESTINVOICE",
              "SUMMARYINVOICE",
              "CASHINVOICE"
            ],
            "type": "string"
          },
          "NoxFinans": {
            "type": "boolean"
          },
          "OCR": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Sent": {
            "type": "boolean"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "WayOfDelivery": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceListItem_Wrap": {
        "properties": {
          "Invoices": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoiceListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayload": {
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "CreditInvoiceReference": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "maxLength": 1024,
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "EDIInformation": {
            "$ref": "#/components/schemas/fortnox_InvoicePayload_EDIInformation"
          },
          "EUQuarterlyReport": {
            "type": "boolean"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_InvoicePayload_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "maxLength": 80,
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "maxLength": 80,
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePayload_InvoiceRow"
            },
            "type": "array"
          },
          "InvoiceType": {
            "enum": [
              "INVOICE",
              "AGREEMENTINVOICE",
              "INTRESTINVOICE",
              "SUMMARYINVOICE",
              "CASHINVOICE"
            ],
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePayload_Label"
            },
            "type": "array"
          },
          "Language": {
            "enum": [
              "SV",
              "EN"
            ],
            "type": "string"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OCR": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "PaymentWay": {
            "type": "string"
          },
          "Phone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Phone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "maxLength": 1024,
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoicePayloadV2": {
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "CreditInvoiceReference": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "maxLength": 1024,
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "EDIInformation": {
            "$ref": "#/components/schemas/fortnox_InvoicePayloadV2_EDIInformation"
          },
          "EUQuarterlyReport": {
            "type": "boolean"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_InvoicePayloadV2_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "maxLength": 80,
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "maxLength": 80,
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePayloadV2_InvoiceRow"
            },
            "type": "array"
          },
          "InvoiceType": {
            "enum": [
              "INVOICE",
              "AGREEMENTINVOICE",
              "INTRESTINVOICE",
              "SUMMARYINVOICE",
              "CASHINVOICE"
            ],
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePayloadV2_Label"
            },
            "type": "array"
          },
          "Language": {
            "enum": [
              "SV",
              "EN"
            ],
            "type": "string"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OCR": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "PaymentWay": {
            "type": "string"
          },
          "Phone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Phone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "maxLength": 1024,
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_Bundle": {
        "properties": {
          "Revision": {
            "format": "int32",
            "type": "integer"
          },
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePayloadV2_InvoiceBundleSubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_EDIInformation": {
        "properties": {
          "EDIGlobalLocationNumber": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIGlobalLocationNumberDelivery": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIInvoiceExtra1": {
            "type": "string"
          },
          "EDIInvoiceExtra2": {
            "type": "string"
          },
          "EDIOurElectronicReference": {
            "type": "string"
          },
          "EDIYourElectronicReference": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_InvoiceBundleSubRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundleSubItem"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "maximum": 999,
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "MAJORAPPLIANCEREPAIR",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "HOMEMAINTENANCE",
              "FURNISHING",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_InvoiceRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_InvoicePayloadV2_Bundle"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "maximum": 999,
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "MAJORAPPLIANCEREPAIR",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "HOMEMAINTENANCE",
              "FURNISHING",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayloadV2_Wrap": {
        "properties": {
          "Invoice": {
            "$ref": "#/components/schemas/fortnox_InvoicePayloadV2"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayload_EDIInformation": {
        "properties": {
          "EDIGlobalLocationNumber": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIGlobalLocationNumberDelivery": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIInvoiceExtra1": {
            "type": "string"
          },
          "EDIInvoiceExtra2": {
            "type": "string"
          },
          "EDIOurElectronicReference": {
            "type": "string"
          },
          "EDIYourElectronicReference": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayload_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayload_InvoiceRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "maximum": 999,
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "MAJORAPPLIANCEREPAIR",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "HOMEMAINTENANCE",
              "FURNISHING",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayload_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayload_Wrap": {
        "properties": {
          "Invoice": {
            "$ref": "#/components/schemas/fortnox_InvoicePayload"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayment": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "AmountCurrency": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "InvoiceCustomerName": {
            "type": "string"
          },
          "InvoiceCustomerNumber": {
            "type": "string"
          },
          "InvoiceDueDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "InvoiceOCR": {
            "type": "string"
          },
          "InvoiceTotal": {
            "type": "string"
          },
          "ModeOfPayment": {
            "type": "string"
          },
          "ModeOfPaymentAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Number": {
            "type": "string"
          },
          "PaymentDate": {
            "format": "date",
            "type": "string"
          },
          "Source": {
            "type": "string"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "WriteOffs": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePayment_WriteOff"
            },
            "type": "array"
          }
        },
        "required": [
          "InvoiceNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoicePaymentListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "InvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Number": {
            "type": "string"
          },
          "PaymentDate": {
            "format": "date",
            "type": "string"
          },
          "Source": {
            "type": "string"
          },
          "WriteOffExist": {
            "type": "boolean"
          }
        },
        "required": [
          "InvoiceNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoicePaymentListItem_List": {
        "properties": {
          "InvoicePayments": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoicePaymentListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayment_Wrap": {
        "properties": {
          "InvoicePayment": {
            "$ref": "#/components/schemas/fortnox_InvoicePayment"
          }
        },
        "type": "object"
      },
      "fortnox_InvoicePayment_WriteOff": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "TransactionInformation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceResponse": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "BalanceIncludeFees": {
            "format": "float",
            "type": "number"
          },
          "BalanceIncludeFeesCurrency": {
            "format": "float",
            "type": "number"
          },
          "CurrentCapitalBalance": {
            "format": "float",
            "type": "number"
          },
          "CurrentCapitalBalanceCurrency": {
            "format": "float",
            "type": "number"
          },
          "InvoiceDocumentURL": {
            "type": "string"
          },
          "InvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "NextEvent": {
            "type": "string"
          },
          "NextEventDate": {
            "format": "date",
            "type": "string"
          },
          "OCRNumber": {
            "type": "string"
          },
          "Service": {
            "type": "string"
          },
          "ServiceName": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "required": [
          "@url",
          "BalanceIncludeFees",
          "BalanceIncludeFeesCurrency",
          "CurrentCapitalBalance",
          "CurrentCapitalBalanceCurrency",
          "InvoiceNumber",
          "NextEvent",
          "NextEventDate",
          "OCRNumber",
          "Service",
          "ServiceName",
          "Status"
        ],
        "type": "object"
      },
      "fortnox_InvoiceResponse_Wrap": {
        "properties": {
          "NoxFinansInvoice": {
            "$ref": "#/components/schemas/fortnox_InvoiceResponse"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "AccountingMethod": {
            "enum": [
              "ACCRUAL",
              "CASH"
            ],
            "type": "string"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "AdministrationFeeVAT": {
            "format": "double",
            "type": "number"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "ContractReference": {
            "format": "int32",
            "type": "integer"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Credit": {
            "type": "string"
          },
          "CreditInvoiceReference": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "maxLength": 1024,
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "EDIInformation": {
            "$ref": "#/components/schemas/fortnox_InvoiceV2_EDIInformation"
          },
          "EUQuarterlyReport": {
            "type": "boolean"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_InvoiceV2_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "maxLength": 80,
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "maxLength": 80,
            "type": "string"
          },
          "FinalPayDate": {
            "format": "date",
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "FreightVAT": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoicePeriodEnd": {
            "format": "date",
            "type": "string"
          },
          "InvoicePeriodReference": {
            "type": "string"
          },
          "InvoicePeriodStart": {
            "format": "date",
            "type": "string"
          },
          "InvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoiceV2_InvoiceRow"
            },
            "type": "array"
          },
          "InvoiceType": {
            "enum": [
              "INVOICE",
              "AGREEMENTINVOICE",
              "INTRESTINVOICE",
              "SUMMARYINVOICE",
              "CASHINVOICE"
            ],
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoiceV2_Label"
            },
            "type": "array"
          },
          "Language": {
            "enum": [
              "SV",
              "EN"
            ],
            "type": "string"
          },
          "LastRemindDate": {
            "format": "date",
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "NoxFinans": {
            "type": "boolean"
          },
          "OCR": {
            "type": "string"
          },
          "OfferReference": {
            "type": "string"
          },
          "OrderReference": {
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "PaymentWay": {
            "enum": [
              "CASH",
              "CARD",
              "AG"
            ],
            "type": "string"
          },
          "Phone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Phone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "Reminders": {
            "format": "int32",
            "type": "integer"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "Sent": {
            "type": "boolean"
          },
          "TaxReduction": {
            "format": "int32",
            "type": "integer"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "TimeBasisReference": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "WarehouseReady": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "maxLength": 1024,
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_InvoiceV2_Bundle": {
        "properties": {
          "Revision": {
            "format": "int32",
            "type": "integer"
          },
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_InvoiceV2_InvoiceBundleSubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2_EDIInformation": {
        "properties": {
          "EDIGlobalLocationNumber": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIGlobalLocationNumberDelivery": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIInvoiceExtra1": {
            "type": "string"
          },
          "EDIInvoiceExtra2": {
            "type": "string"
          },
          "EDIOurElectronicReference": {
            "type": "string"
          },
          "EDIStatus": {
            "type": "string"
          },
          "EDIYourElectronicReference": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2_InvoiceBundleSubRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundleSubItem"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "maxLength": 255,
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "maximum": 999,
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "MAJORAPPLIANCEREPAIR",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "HOMEMAINTENANCE",
              "FURNISHING",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "PriceExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2_InvoiceRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_InvoiceV2_Bundle"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "maxLength": 255,
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "maximum": 999,
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "MAJORAPPLIANCEREPAIR",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "HOMEMAINTENANCE",
              "FURNISHING",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "PriceExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_InvoiceV2_Wrap": {
        "properties": {
          "Invoice": {
            "$ref": "#/components/schemas/fortnox_InvoiceV2"
          }
        },
        "type": "object"
      },
      "fortnox_Invoice_EDIInformation": {
        "properties": {
          "EDIGlobalLocationNumber": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIGlobalLocationNumberDelivery": {
            "maxLength": 13,
            "type": "string"
          },
          "EDIInvoiceExtra1": {
            "type": "string"
          },
          "EDIInvoiceExtra2": {
            "type": "string"
          },
          "EDIOurElectronicReference": {
            "type": "string"
          },
          "EDIStatus": {
            "type": "string"
          },
          "EDIYourElectronicReference": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Invoice_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Invoice_InvoiceRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "maxLength": 255,
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "maximum": 999,
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "MAJORAPPLIANCEREPAIR",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS",
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE",
              "HOMEMAINTENANCE",
              "FURNISHING",
              "TRANSPORTATIONSERVICES",
              "WASHINGANDCAREOFCLOTHING"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "PriceExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalExcludingVAT": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Invoice_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Invoice_Wrap": {
        "properties": {
          "Invoice": {
            "$ref": "#/components/schemas/fortnox_Invoice"
          }
        },
        "type": "object"
      },
      "fortnox_Label": {
        "properties": {
          "Description": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_Label_List": {
        "properties": {
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Label"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Label_Wrap": {
        "properties": {
          "Label": {
            "$ref": "#/components/schemas/fortnox_Label"
          }
        },
        "required": [
          "Label"
        ],
        "type": "object"
      },
      "fortnox_ListAsset": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AcquisitionDate": {
            "type": "string"
          },
          "AcquisitionValue": {
            "format": "int32",
            "type": "integer"
          },
          "DepreciatedTo": {
            "type": "string"
          },
          "DepreciationFinal": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Number": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "StatusId": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "TypeId": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_ListAsset_Wrap": {
        "properties": {
          "Assets": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ListAsset"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_LockedPeriod": {
        "properties": {
          "EndDate": {
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_LockedPeriod_Wrap": {
        "properties": {
          "LockedPeriod": {
            "$ref": "#/components/schemas/fortnox_LockedPeriod"
          }
        },
        "type": "object"
      },
      "fortnox_ManualObAsset": {
        "properties": {
          "Amount": {
            "format": "int32",
            "type": "integer"
          },
          "Comment": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Me": {
        "properties": {
          "Email": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Locale": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "SysAdmin": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "fortnox_Me_Wrap": {
        "properties": {
          "MeInformation": {
            "$ref": "#/components/schemas/fortnox_Me"
          }
        },
        "type": "object"
      },
      "fortnox_MetaInformation": {
        "properties": {
          "@CurrentPage": {
            "format": "int32",
            "type": "integer"
          },
          "@TotalPages": {
            "format": "int32",
            "type": "integer"
          },
          "@TotalResources": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_ModeOfPayment": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccountNumber": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "Code": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        },
        "required": [
          "AccountNumber"
        ],
        "type": "object"
      },
      "fortnox_ModeOfPayment_List": {
        "properties": {
          "ModesOfPayments": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ModeOfPayment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_ModeOfPayment_Wrap": {
        "properties": {
          "ModeOfPayment": {
            "$ref": "#/components/schemas/fortnox_ModeOfPayment"
          }
        },
        "required": [
          "ModeOfPayment"
        ],
        "type": "object"
      },
      "fortnox_Offer": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "Address1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Address2": {
            "maxLength": 1024,
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "AdministrationFeeVAT": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CopyRemarks": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_Offer_EmailInformation"
          },
          "ExpireDate": {
            "format": "date",
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "FreightVAT": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceReference": {
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Offer_Label"
            },
            "type": "array"
          },
          "Language": {
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OfferDate": {
            "format": "date",
            "type": "string"
          },
          "OfferRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Offer_OfferRow"
            },
            "type": "array"
          },
          "OrderReference": {
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "type": "string"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "Sent": {
            "type": "boolean"
          },
          "TaxReduction": {
            "format": "int32",
            "type": "integer"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourReference": {
            "type": "string"
          },
          "YourReferenceNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OfferListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "Currency": {
            "type": "string"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "OfferDate": {
            "format": "date",
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Sent": {
            "type": "boolean"
          },
          "Total": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OfferListItem_List": {
        "properties": {
          "Offers": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_OfferPayloadV2": {
        "properties": {
          "Address1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Address2": {
            "maxLength": 1024,
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "CopyRemarks": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_OfferPayloadV2_EmailInformation"
          },
          "ExpireDate": {
            "format": "date",
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferPayloadV2_Label"
            },
            "type": "array"
          },
          "Language": {
            "type": "string"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OfferDate": {
            "format": "date",
            "type": "string"
          },
          "OfferRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferPayloadV2_OfferRow"
            },
            "type": "array"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "type": "string"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourReference": {
            "type": "string"
          },
          "YourReferenceNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OfferPayloadV2_Bundle": {
        "properties": {
          "Revision": {
            "format": "int32",
            "type": "integer"
          },
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferPayloadV2_OfferBundleSubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_OfferPayloadV2_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OfferPayloadV2_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_OfferPayloadV2_OfferBundleSubRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundleSubItem"
          },
          "CostCenter": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "double",
            "maximum": 999,
            "type": "number"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "COOKING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "TUTORING",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OfferPayloadV2_OfferRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_OfferPayloadV2_Bundle"
          },
          "CostCenter": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "double",
            "maximum": 999,
            "type": "number"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "COOKING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "TUTORING",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OfferPayloadV2_Wrap": {
        "properties": {
          "Offer": {
            "$ref": "#/components/schemas/fortnox_OfferPayloadV2"
          }
        },
        "type": "object"
      },
      "fortnox_OfferV2": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "Address1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Address2": {
            "maxLength": 1024,
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "AdministrationFeeVAT": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CopyRemarks": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "int32",
            "type": "integer"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "maxLength": 1024,
            "type": "string"
          },
          "DeliveryZipCode": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_OfferV2_EmailInformation"
          },
          "ExpireDate": {
            "format": "date",
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "FreightVAT": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceReference": {
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferV2_Label"
            },
            "type": "array"
          },
          "Language": {
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OfferDate": {
            "format": "date",
            "type": "string"
          },
          "OfferRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferV2_OfferRow"
            },
            "type": "array"
          },
          "OrderReference": {
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "type": "string"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "Sent": {
            "type": "boolean"
          },
          "TaxReduction": {
            "format": "int32",
            "type": "integer"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourReference": {
            "type": "string"
          },
          "YourReferenceNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OfferV2_Bundle": {
        "properties": {
          "Revision": {
            "format": "int32",
            "type": "integer"
          },
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OfferV2_OfferBundleSubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_OfferV2_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OfferV2_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_OfferV2_OfferBundleSubRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundleSubItem"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "double",
            "maximum": 999,
            "type": "number"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "COOKING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "TUTORING",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OfferV2_OfferRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_OfferV2_Bundle"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "double",
            "maximum": 999,
            "type": "number"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "COOKING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "TUTORING",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OfferV2_Wrap": {
        "properties": {
          "Offer": {
            "$ref": "#/components/schemas/fortnox_OfferV2"
          }
        },
        "type": "object"
      },
      "fortnox_Offer_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "maxLength": 20000,
            "type": "string"
          },
          "EmailSubject": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Offer_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Offer_OfferRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "double",
            "maximum": 999,
            "type": "number"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "HVAC",
              "CLEANING",
              "TEXTILECLOTHING",
              "COOKING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "TUTORING",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "int32",
            "type": "integer"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Offer_Wrap": {
        "properties": {
          "Offer": {
            "$ref": "#/components/schemas/fortnox_Offer"
          }
        },
        "type": "object"
      },
      "fortnox_Order": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "AdministrationFeeVAT": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "City": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CopyRemarks": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "type": "string"
          },
          "DeliveryAddress2": {
            "type": "string"
          },
          "DeliveryCity": {
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "type": "string"
          },
          "DeliveryState": {
            "enum": [
              "registration",
              "reservation",
              "delivery"
            ],
            "type": "string"
          },
          "DeliveryZipCode": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_Order_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "FreightVAT": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceReference": {
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Order_Label"
            },
            "type": "array"
          },
          "Language": {
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OfferReference": {
            "type": "string"
          },
          "OrderDate": {
            "format": "date",
            "type": "string"
          },
          "OrderRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Order_OrderRow"
            },
            "type": "array"
          },
          "OrderType": {
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "Sent": {
            "type": "boolean"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "TaxReduction": {
            "format": "double",
            "type": "number"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "TimeBasisReference": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WarehouseReady": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OrderListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "Currency": {
            "maxLength": 3,
            "type": "string"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "OrderDate": {
            "format": "date",
            "type": "string"
          },
          "OrderType": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Sent": {
            "type": "boolean"
          },
          "Total": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OrderListItem_List": {
        "properties": {
          "Orders": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_OrderPayloadV2": {
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "City": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "CopyRemarks": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "type": "string"
          },
          "DeliveryAddress2": {
            "type": "string"
          },
          "DeliveryCity": {
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "type": "string"
          },
          "DeliveryState": {
            "enum": [
              "registration",
              "reservation",
              "delivery"
            ],
            "type": "string"
          },
          "DeliveryZipCode": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_OrderPayloadV2_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderPayloadV2_Label"
            },
            "type": "array"
          },
          "Language": {
            "type": "string"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OrderDate": {
            "format": "date",
            "type": "string"
          },
          "OrderRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderPayloadV2_OrderRow"
            },
            "type": "array"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OrderPayloadV2_Bundle": {
        "properties": {
          "Revision": {
            "format": "int32",
            "type": "integer"
          },
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderPayloadV2_OrderBundleSubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_OrderPayloadV2_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "type": "string"
          },
          "EmailSubject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OrderPayloadV2_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_OrderPayloadV2_OrderBundleSubRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundleSubItem"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "OrderedQuantity": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OrderPayloadV2_OrderRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_OrderPayloadV2_Bundle"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "OrderedQuantity": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OrderPayloadV2_Wrap": {
        "properties": {
          "Order": {
            "$ref": "#/components/schemas/fortnox_OrderPayloadV2"
          }
        },
        "type": "object"
      },
      "fortnox_OrderV2": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "@urlTaxReductionList": {
            "type": "string"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "AdministrationFee": {
            "format": "double",
            "type": "number"
          },
          "AdministrationFeeVAT": {
            "format": "double",
            "type": "number"
          },
          "BasisTaxReduction": {
            "format": "double",
            "type": "number"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "City": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "ContributionPercent": {
            "format": "double",
            "type": "number"
          },
          "ContributionValue": {
            "format": "double",
            "type": "number"
          },
          "CopyRemarks": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "CustomerName": {
            "type": "string"
          },
          "CustomerNumber": {
            "type": "string"
          },
          "DeliveryAddress1": {
            "type": "string"
          },
          "DeliveryAddress2": {
            "type": "string"
          },
          "DeliveryCity": {
            "type": "string"
          },
          "DeliveryCountry": {
            "type": "string"
          },
          "DeliveryDate": {
            "format": "date",
            "type": "string"
          },
          "DeliveryName": {
            "type": "string"
          },
          "DeliveryState": {
            "enum": [
              "registration",
              "reservation",
              "delivery"
            ],
            "type": "string"
          },
          "DeliveryZipCode": {
            "type": "string"
          },
          "DocumentNumber": {
            "type": "string"
          },
          "EmailInformation": {
            "$ref": "#/components/schemas/fortnox_OrderV2_EmailInformation"
          },
          "ExternalInvoiceReference1": {
            "type": "string"
          },
          "ExternalInvoiceReference2": {
            "type": "string"
          },
          "Freight": {
            "format": "double",
            "type": "number"
          },
          "FreightVAT": {
            "format": "double",
            "type": "number"
          },
          "Gross": {
            "format": "double",
            "type": "number"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "InvoiceReference": {
            "type": "string"
          },
          "Labels": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderV2_Label"
            },
            "type": "array"
          },
          "Language": {
            "type": "string"
          },
          "Net": {
            "format": "double",
            "type": "number"
          },
          "NotCompleted": {
            "type": "boolean"
          },
          "OfferReference": {
            "type": "string"
          },
          "OrderDate": {
            "format": "date",
            "type": "string"
          },
          "OrderRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderV2_OrderRow"
            },
            "type": "array"
          },
          "OrderType": {
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "OutboundDate": {
            "format": "date",
            "type": "string"
          },
          "Phone1": {
            "type": "string"
          },
          "Phone2": {
            "type": "string"
          },
          "PriceList": {
            "type": "string"
          },
          "PrintTemplate": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Remarks": {
            "maxLength": 1024,
            "type": "string"
          },
          "RoundOff": {
            "format": "double",
            "type": "number"
          },
          "Sent": {
            "type": "boolean"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "TaxReduction": {
            "format": "double",
            "type": "number"
          },
          "TaxReductionType": {
            "enum": [
              "none",
              "rot",
              "rut",
              "green"
            ],
            "type": "string"
          },
          "TermsOfDelivery": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "TimeBasisReference": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TotalToPay": {
            "format": "double",
            "type": "number"
          },
          "TotalVAT": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          },
          "WarehouseReady": {
            "type": "boolean"
          },
          "WayOfDelivery": {
            "type": "string"
          },
          "YourOrderNumber": {
            "maxLength": 75,
            "type": "string"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "CustomerNumber"
        ],
        "type": "object"
      },
      "fortnox_OrderV2_Bundle": {
        "properties": {
          "Revision": {
            "format": "int32",
            "type": "integer"
          },
          "SubRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_OrderV2_OrderBundleSubRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_OrderV2_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "type": "string"
          },
          "EmailSubject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OrderV2_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_OrderV2_OrderBundleSubRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "BundleSubItem": {
            "$ref": "#/components/schemas/fortnox_BundleSubItem"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "OrderedQuantity": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "ReservedQuantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OrderV2_OrderRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Bundle": {
            "$ref": "#/components/schemas/fortnox_OrderV2_Bundle"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "OrderedQuantity": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "ReservedQuantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_OrderV2_Wrap": {
        "properties": {
          "Order": {
            "$ref": "#/components/schemas/fortnox_OrderV2"
          }
        },
        "type": "object"
      },
      "fortnox_Order_EmailInformation": {
        "properties": {
          "EmailAddressBCC": {
            "type": "string"
          },
          "EmailAddressCC": {
            "type": "string"
          },
          "EmailAddressFrom": {
            "type": "string"
          },
          "EmailAddressTo": {
            "type": "string"
          },
          "EmailBody": {
            "type": "string"
          },
          "EmailSubject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Order_Label": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Order_OrderRow": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "type": "integer"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "ContributionPercent": {
            "type": "string"
          },
          "ContributionValue": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "DeliveredQuantity": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Discount": {
            "format": "double",
            "type": "number"
          },
          "DiscountType": {
            "enum": [
              "AMOUNT",
              "PERCENT"
            ],
            "type": "string"
          },
          "HouseWork": {
            "type": "boolean"
          },
          "HouseWorkHoursToReport": {
            "format": "int32",
            "type": "integer"
          },
          "HouseWorkType": {
            "enum": [
              "CONSTRUCTION",
              "ELECTRICITY",
              "GLASSMETALWORK",
              "GROUNDDRAINAGEWORK",
              "MASONRY",
              "PAINTINGWALLPAPERING",
              "MOVINGSERVICES",
              "ITSERVICES",
              "CLEANING",
              "TEXTILECLOTHING",
              "SNOWPLOWING",
              "GARDENING",
              "BABYSITTING",
              "OTHERCARE",
              "OTHERCOSTS"
            ],
            "type": "string"
          },
          "OrderedQuantity": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "ReservedQuantity": {
            "type": "string"
          },
          "RowId": {
            "format": "int32",
            "type": "integer"
          },
          "StockPointCode": {
            "type": "string"
          },
          "StockPointId": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "Unit": {
            "type": "string"
          },
          "VAT": {
            "format": "double",
            "type": "number"
          },
          "VATCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_Order_Wrap": {
        "properties": {
          "Order": {
            "$ref": "#/components/schemas/fortnox_Order"
          }
        },
        "type": "object"
      },
      "fortnox_PagedClientInfo": {
        "properties": {
          "Clients": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ClientInfo"
            },
            "type": "array"
          },
          "MetaInformation": {
            "$ref": "#/components/schemas/fortnox_MetaInformation"
          }
        },
        "type": "object"
      },
      "fortnox_PausePayload": {
        "properties": {
          "PausedUntilDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "PausedUntilDate"
        ],
        "type": "object"
      },
      "fortnox_PausePayload_Wrap": {
        "properties": {
          "NoxFinansInvoice": {
            "$ref": "#/components/schemas/fortnox_PausePayload"
          }
        },
        "type": "object"
      },
      "fortnox_PredefinedAccount": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Account": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "required": [
          "Account"
        ],
        "type": "object"
      },
      "fortnox_PredefinedAccount_List": {
        "properties": {
          "PreDefinedAccounts": {
            "items": {
              "$ref": "#/components/schemas/fortnox_PredefinedAccount"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_PredefinedAccount_Wrap": {
        "properties": {
          "PreDefinedAccount": {
            "$ref": "#/components/schemas/fortnox_PredefinedAccount"
          }
        },
        "required": [
          "PreDefinedAccount"
        ],
        "type": "object"
      },
      "fortnox_PredefinedVoucherSeries": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "VoucherSeries": {
            "maxLength": 1,
            "type": "string"
          }
        },
        "required": [
          "VoucherSeries"
        ],
        "type": "object"
      },
      "fortnox_PredefinedVoucherSeries_List": {
        "properties": {
          "PreDefinedVoucherSeriesCollection": {
            "items": {
              "$ref": "#/components/schemas/fortnox_PredefinedVoucherSeries"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_PredefinedVoucherSeries_Wrap": {
        "properties": {
          "PreDefinedVoucherSeries": {
            "$ref": "#/components/schemas/fortnox_PredefinedVoucherSeries"
          }
        },
        "type": "object"
      },
      "fortnox_Price": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Date": {
            "format": "date-time",
            "type": "string"
          },
          "FromQuantity": {
            "format": "double",
            "type": "number"
          },
          "Percent": {
            "format": "double",
            "type": "number"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "PriceList": {
            "type": "string"
          }
        },
        "required": [
          "ArticleNumber",
          "PriceList"
        ],
        "type": "object"
      },
      "fortnox_PriceList": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Code": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "Description": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "PreSelected": {
            "type": "boolean"
          }
        },
        "required": [
          "Code",
          "Description"
        ],
        "type": "object"
      },
      "fortnox_PriceListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "FromQuantity": {
            "format": "double",
            "type": "number"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "PriceList": {
            "type": "string"
          }
        },
        "required": [
          "ArticleNumber",
          "PriceList"
        ],
        "type": "object"
      },
      "fortnox_PriceListItem_List": {
        "properties": {
          "Prices": {
            "items": {
              "$ref": "#/components/schemas/fortnox_PriceListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_PriceList_List": {
        "properties": {
          "PriceLists": {
            "items": {
              "$ref": "#/components/schemas/fortnox_PriceList"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_PriceList_Wrap": {
        "properties": {
          "PriceList": {
            "$ref": "#/components/schemas/fortnox_PriceList"
          }
        },
        "required": [
          "PriceList"
        ],
        "type": "object"
      },
      "fortnox_Price_Wrap": {
        "properties": {
          "Price": {
            "$ref": "#/components/schemas/fortnox_Price"
          }
        },
        "type": "object"
      },
      "fortnox_PrintTemplate": {
        "properties": {
          "Name": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "Template": {
            "type": "string"
          }
        },
        "required": [
          "Template"
        ],
        "type": "object"
      },
      "fortnox_PrintTemplate_List": {
        "properties": {
          "PrintTemplates": {
            "items": {
              "$ref": "#/components/schemas/fortnox_PrintTemplate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Project": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Comments": {
            "maxLength": 512,
            "type": "string"
          },
          "ContactPerson": {
            "maxLength": 50,
            "type": "string"
          },
          "Description": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "type": "string"
          },
          "ProjectLeader": {
            "maxLength": 50,
            "type": "string"
          },
          "ProjectNumber": {
            "maxLength": 20,
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "type": "string"
          },
          "Status": {
            "enum": [
              "NOTSTARTED",
              "ONGOING",
              "COMPLETED"
            ],
            "type": "string"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_ProjectListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Description": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "type": "string"
          },
          "ProjectLeader": {
            "maxLength": 50,
            "type": "string"
          },
          "ProjectNumber": {
            "maxLength": 20,
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "type": "string"
          },
          "Status": {
            "enum": [
              "NOTSTARTED",
              "ONGOING",
              "COMPLETED"
            ],
            "type": "string"
          }
        },
        "required": [
          "Description"
        ],
        "type": "object"
      },
      "fortnox_ProjectListItem_List": {
        "properties": {
          "Projects": {
            "items": {
              "$ref": "#/components/schemas/fortnox_ProjectListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Project_Wrap": {
        "properties": {
          "Project": {
            "$ref": "#/components/schemas/fortnox_Project"
          }
        },
        "type": "object"
      },
      "fortnox_ReportPaymentPayload": {
        "properties": {
          "BookkeepPaymentInFortnox": {
            "type": "boolean"
          },
          "ClientTakesFees": {
            "type": "boolean"
          },
          "PaymentAmount": {
            "format": "float",
            "type": "number"
          },
          "PaymentMethodAccount": {
            "type": "string"
          },
          "PaymentMethodCode": {
            "type": "string"
          },
          "ReportToFinance": {
            "type": "boolean"
          }
        },
        "required": [
          "BookkeepPaymentInFortnox",
          "ClientTakesFees",
          "PaymentAmount",
          "PaymentMethodAccount",
          "PaymentMethodCode",
          "ReportToFinance"
        ],
        "type": "object"
      },
      "fortnox_SalaryTransaction": {
        "properties": {
          "Amount": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "type": "string"
          },
          "Expense": {
            "maxLength": 6,
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SalaryCode": {
            "type": "string"
          },
          "SalaryRow": {
            "format": "int32",
            "type": "integer"
          },
          "TextRow": {
            "maxLength": 40,
            "type": "string"
          },
          "Total": {
            "type": "string"
          },
          "VAT": {
            "type": "string"
          }
        },
        "required": [
          "Date",
          "EmployeeId",
          "SalaryCode"
        ],
        "type": "object"
      },
      "fortnox_SalaryTransactionListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Amount": {
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "type": "string"
          },
          "Expense": {
            "maxLength": 6,
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SalaryCode": {
            "type": "string"
          },
          "SalaryRow": {
            "format": "int32",
            "type": "integer"
          },
          "TextRow": {
            "maxLength": 40,
            "type": "string"
          },
          "Total": {
            "type": "string"
          },
          "VAT": {
            "type": "string"
          }
        },
        "required": [
          "Date",
          "EmployeeId",
          "SalaryCode"
        ],
        "type": "object"
      },
      "fortnox_SalaryTransactionListItem_List": {
        "properties": {
          "SalaryTransactions": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SalaryTransactionListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_SalaryTransaction_Wrap": {
        "properties": {
          "SalaryTransaction": {
            "$ref": "#/components/schemas/fortnox_SalaryTransaction"
          }
        },
        "required": [
          "SalaryTransaction"
        ],
        "type": "object"
      },
      "fortnox_ScheduleTime": {
        "properties": {
          "Date": {
            "format": "date",
            "type": "string"
          },
          "EmployeeId": {
            "type": "string"
          },
          "Hours": {
            "type": "string"
          },
          "IWH1": {
            "type": "string"
          },
          "IWH2": {
            "type": "string"
          },
          "IWH3": {
            "type": "string"
          },
          "IWH4": {
            "type": "string"
          },
          "IWH5": {
            "type": "string"
          },
          "ScheduleId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_ScheduleTime_Wrap": {
        "properties": {
          "ScheduleTime": {
            "$ref": "#/components/schemas/fortnox_ScheduleTime"
          }
        },
        "type": "object"
      },
      "fortnox_Scrap": {
        "properties": {
          "Comment": {
            "type": "string"
          },
          "Date": {
            "type": "string"
          },
          "Percentage": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Scrap_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_Scrap"
          }
        },
        "type": "object"
      },
      "fortnox_Sell": {
        "properties": {
          "Comment": {
            "type": "string"
          },
          "Date": {
            "type": "string"
          },
          "Percentage": {
            "format": "int32",
            "type": "integer"
          },
          "Price": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_Sell_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_Sell"
          }
        },
        "type": "object"
      },
      "fortnox_Supplier": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "BG": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "Bank": {
            "type": "string"
          },
          "BankAccountNumber": {
            "type": "string"
          },
          "BranchCode": {
            "type": "string"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "ClearingNumber": {
            "type": "string"
          },
          "Comments": {
            "maxLength": 1024,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "CountryCode": {
            "maxLength": 2,
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "type": "string"
          },
          "DisablePaymentFile": {
            "type": "boolean"
          },
          "Email": {
            "type": "string"
          },
          "Fax": {
            "type": "string"
          },
          "IBAN": {
            "type": "string"
          },
          "Name": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "OurCustomerNumber": {
            "type": "string"
          },
          "OurReference": {
            "type": "string"
          },
          "PG": {
            "type": "string"
          },
          "Phone1": {
            "maxLength": 1024,
            "type": "string"
          },
          "Phone2": {
            "maxLength": 1024,
            "type": "string"
          },
          "PreDefinedAccount": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SupplierNumber": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "VATNumber": {
            "type": "string"
          },
          "VATType": {
            "type": "string"
          },
          "VisitingAddress": {
            "type": "string"
          },
          "VisitingCity": {
            "type": "string"
          },
          "VisitingCountry": {
            "type": "string"
          },
          "VisitingCountryCode": {
            "type": "string"
          },
          "VisitingZipCode": {
            "type": "string"
          },
          "WWW": {
            "type": "string"
          },
          "WorkPlace": {
            "type": "string"
          },
          "YourReference": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "Name"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoice": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccountingMethod": {
            "enum": [
              "ACCRUAL",
              "CASH"
            ],
            "type": "string"
          },
          "AdministrationFee": {
            "type": "string"
          },
          "Balance": {
            "type": "string"
          },
          "Booked": {
            "type": "boolean"
          },
          "Cancelled": {
            "type": "boolean"
          },
          "Comments": {
            "maxLength": 1000,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "type": "boolean"
          },
          "CreditReference": {
            "format": "int32",
            "type": "integer"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "type": "string"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "DisablePaymentFile": {
            "type": "boolean"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "ExternalInvoiceNumber": {
            "type": "string"
          },
          "ExternalInvoiceSeries": {
            "type": "string"
          },
          "FinalPayDate": {
            "format": "date",
            "type": "string"
          },
          "Freight": {
            "type": "string"
          },
          "GivenNumber": {
            "type": "string"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceNumber": {
            "maxLength": 64,
            "type": "string"
          },
          "OCR": {
            "type": "string"
          },
          "OurReference": {
            "maxLength": 50,
            "type": "string"
          },
          "PaymentPending": {
            "type": "boolean"
          },
          "Project": {
            "type": "string"
          },
          "RoundOffValue": {
            "type": "string"
          },
          "SalesType": {
            "enum": [
              "STOCK",
              "SERVICE"
            ],
            "type": "string"
          },
          "SupplierInvoiceRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoice_SupplierInvoiceRow"
            },
            "type": "array"
          },
          "SupplierName": {
            "type": "string"
          },
          "SupplierNumber": {
            "type": "string"
          },
          "Total": {
            "type": "string"
          },
          "VAT": {
            "type": "string"
          },
          "VATType": {
            "enum": [
              "NORMAL",
              "EUINTERNAL",
              "REVERSE"
            ],
            "type": "string"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "Vouchers": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoice_Voucher"
            },
            "type": "array"
          },
          "YourReference": {
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "SupplierNumber"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoiceAccrual": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AccrualAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "CostAccount": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "type": "string"
          },
          "Period": {
            "enum": [
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "ANNUALLY",
              "1_MONTHS",
              "2_MONTHS",
              "3_MONTHS",
              "6_MONTHS",
              "12_MONTHS"
            ],
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "type": "string"
          },
          "SupplierInvoiceAccrualRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual_SupplierInvoiceAccrualRows"
            },
            "maxItems": 2147483647,
            "minItems": 2,
            "type": "array"
          },
          "SupplierInvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Times": {
            "format": "int32",
            "type": "integer"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "VATIncluded": {
            "type": "boolean"
          }
        },
        "required": [
          "AccrualAccount",
          "CostAccount",
          "EndDate",
          "Period",
          "StartDate",
          "SupplierInvoiceAccrualRows",
          "SupplierInvoiceNumber",
          "Times",
          "Total"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoiceAccrualListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Period": {
            "enum": [
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "ANNUALLY",
              "1_MONTHS",
              "2_MONTHS",
              "3_MONTHS",
              "6_MONTHS",
              "12_MONTHS"
            ],
            "type": "string"
          },
          "SupplierInvoiceNumber": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Period"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoiceAccrualListItem_List": {
        "properties": {
          "SupplierInvoiceAccruals": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrualListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceAccrual_SupplierInvoiceAccrualRows": {
        "properties": {
          "Account": {
            "format": "int32",
            "type": "integer"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "format": "double",
            "type": "number"
          },
          "Debit": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "TransactionInformation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceAccrual_Wrap": {
        "properties": {
          "SupplierInvoiceAccrual": {
            "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual"
          }
        },
        "required": [
          "SupplierInvoiceAccrual"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoiceExternalURLConnection": {
        "properties": {
          "ExternalURLConnection": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "SupplierInvoiceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceExternalURLConnectionUpdate": {
        "properties": {
          "ExternalURLConnection": {
            "type": "string"
          },
          "SupplierInvoiceNumber": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceExternalURLConnection_Single": {
        "properties": {
          "SupplierInvoiceExternalURLConnection": {
            "$ref": "#/components/schemas/fortnox_SupplierInvoiceExternalURLConnection"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceFileConnection": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "FileId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "SupplierInvoiceNumber": {
            "type": "string"
          },
          "SupplierName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceFileConnection_List": {
        "properties": {
          "SupplierInvoiceFileConnections": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoiceFileConnection"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceFileConnection_Wrap": {
        "properties": {
          "SupplierInvoiceFileConnection": {
            "$ref": "#/components/schemas/fortnox_SupplierInvoiceFileConnection"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "AuthorizerName": {
            "type": "string"
          },
          "Balance": {
            "type": "string"
          },
          "Booked": {
            "type": "boolean"
          },
          "Cancel": {
            "type": "boolean"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "type": "boolean"
          },
          "Currency": {
            "type": "string"
          },
          "CurrencyRate": {
            "type": "string"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "DueDate": {
            "format": "date",
            "type": "string"
          },
          "ExternalInvoiceNumber": {
            "type": "string"
          },
          "ExternalInvoiceSeries": {
            "type": "string"
          },
          "FinalPayDate": {
            "format": "date",
            "type": "string"
          },
          "GivenNumber": {
            "type": "string"
          },
          "InvoiceDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SupplierName": {
            "type": "string"
          },
          "SupplierNumber": {
            "type": "string"
          },
          "Total": {
            "type": "string"
          },
          "Vouchers": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoiceListItem_Voucher"
            },
            "type": "array"
          }
        },
        "required": [
          "SupplierNumber"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoiceListItem_Voucher": {
        "properties": {
          "Number": {
            "format": "int32",
            "type": "integer"
          },
          "ReferenceType": {
            "type": "string"
          },
          "Series": {
            "type": "string"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoiceListItem_Wrap": {
        "properties": {
          "SupplierInvoices": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoiceListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoicePayment": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "AmountCurrency": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "Information": {
            "type": "string"
          },
          "InvoiceDueDate": {
            "format": "date",
            "type": "string"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "InvoiceOCR": {
            "type": "string"
          },
          "InvoiceSupplierName": {
            "type": "string"
          },
          "InvoiceSupplierNumber": {
            "type": "string"
          },
          "InvoiceTotal": {
            "type": "string"
          },
          "ModeOfPayment": {
            "type": "string"
          },
          "Number": {
            "format": "int32",
            "type": "integer"
          },
          "PaymentDate": {
            "format": "date",
            "type": "string"
          },
          "Source": {
            "enum": [
              "manual",
              "direct"
            ],
            "type": "string"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "WriteOffs": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_WriteOff"
            },
            "type": "array"
          }
        },
        "required": [
          "InvoiceNumber"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoicePaymentListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "Booked": {
            "type": "boolean"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "CurrencyRate": {
            "format": "double",
            "type": "number"
          },
          "CurrencyUnit": {
            "format": "double",
            "type": "number"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "Number": {
            "format": "int32",
            "type": "integer"
          },
          "PaymentDate": {
            "format": "date",
            "type": "string"
          },
          "Source": {
            "enum": [
              "manual",
              "direct"
            ],
            "type": "string"
          },
          "WriteOffExist": {
            "type": "boolean"
          }
        },
        "required": [
          "InvoiceNumber"
        ],
        "type": "object"
      },
      "fortnox_SupplierInvoicePaymentListItem_List": {
        "properties": {
          "SupplierInvoicePayments": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierInvoicePaymentListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoicePayment_Wrap": {
        "properties": {
          "SupplierInvoicePayment": {
            "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoicePayment_WriteOff": {
        "properties": {
          "AccountNumber": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          },
          "CostCenter": {
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "TransactionInformation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoice_SupplierInvoiceRow": {
        "properties": {
          "Account": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "AccountDescription": {
            "type": "string"
          },
          "ArticleNumber": {
            "type": "string"
          },
          "Code": {
            "enum": [
              "TOT",
              "VAT",
              "FRT",
              "AFE",
              "ROV",
              "CND",
              "CNC",
              "PRD",
              "PRC",
              "SRD",
              "SRC",
              "PRE",
              "GWB",
              "ACC"
            ],
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "format": "double",
            "type": "number"
          },
          "CreditCurrency": {
            "format": "double",
            "type": "number"
          },
          "Debit": {
            "format": "double",
            "type": "number"
          },
          "DebitCurrency": {
            "format": "double",
            "type": "number"
          },
          "ItemDescription": {
            "type": "string"
          },
          "Price": {
            "format": "double",
            "type": "number"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "StockLocationCode": {
            "type": "string"
          },
          "StockPointCode": {
            "type": "string"
          },
          "Total": {
            "format": "double",
            "type": "number"
          },
          "TransactionInformation": {
            "maxLength": 100,
            "type": "string"
          },
          "Unit": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoice_Voucher": {
        "properties": {
          "Number": {
            "format": "int32",
            "type": "integer"
          },
          "ReferenceType": {
            "type": "string"
          },
          "Series": {
            "type": "string"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierInvoice_Wrap": {
        "properties": {
          "SupplierInvoice": {
            "$ref": "#/components/schemas/fortnox_SupplierInvoice"
          }
        },
        "type": "object"
      },
      "fortnox_SupplierListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "BG": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "BankAccountNumber": {
            "type": "string"
          },
          "City": {
            "maxLength": 1024,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "CountryCode": {
            "maxLength": 2,
            "type": "string"
          },
          "Currency": {
            "maxLength": 3,
            "type": "string"
          },
          "DisablePaymentFile": {
            "type": "boolean"
          },
          "Email": {
            "type": "string"
          },
          "IBAN": {
            "type": "string"
          },
          "Name": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "OrganisationNumber": {
            "type": "string"
          },
          "PG": {
            "type": "string"
          },
          "Phone": {
            "type": "string"
          },
          "PreDefinedAccount": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "SupplierNumber": {
            "type": "string"
          },
          "TermsOfPayment": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "required": [
          "Name"
        ],
        "type": "object"
      },
      "fortnox_SupplierListItem_List": {
        "properties": {
          "Suppliers": {
            "items": {
              "$ref": "#/components/schemas/fortnox_SupplierListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Supplier_Wrap": {
        "properties": {
          "Supplier": {
            "$ref": "#/components/schemas/fortnox_Supplier"
          }
        },
        "type": "object"
      },
      "fortnox_TaxReduction": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ApprovedAmount": {
            "format": "double",
            "type": "number"
          },
          "AskedAmount": {
            "format": "double",
            "minimum": 1,
            "type": "number"
          },
          "BilledAmount": {
            "format": "double",
            "type": "number"
          },
          "CustomerName": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "PropertyDesignation": {
            "type": "string"
          },
          "ReferenceDocumentType": {
            "enum": [
              "OFFER",
              "ORDER",
              "INVOICE"
            ],
            "type": "string"
          },
          "ReferenceNumber": {
            "type": "string"
          },
          "RequestSent": {
            "type": "boolean"
          },
          "ResidenceAssociationOrganisationNumber": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "maxLength": 13,
            "minLength": 10,
            "type": "string"
          },
          "TaxReductionAmounts": {
            "items": {
              "$ref": "#/components/schemas/fortnox_TaxReduction_TaxReductionAmount"
            },
            "type": "array"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "AskedAmount",
          "CustomerName",
          "ReferenceDocumentType",
          "ReferenceNumber",
          "SocialSecurityNumber"
        ],
        "type": "object"
      },
      "fortnox_TaxReductionListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ApprovedAmount": {
            "format": "double",
            "type": "number"
          },
          "CustomerName": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "ReferenceDocumentType": {
            "enum": [
              "OFFER",
              "ORDER",
              "INVOICE"
            ],
            "type": "string"
          },
          "ReferenceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "SocialSecurityNumber": {
            "maxLength": 13,
            "minLength": 10,
            "type": "string"
          }
        },
        "required": [
          "CustomerName",
          "ReferenceDocumentType",
          "ReferenceNumber",
          "SocialSecurityNumber"
        ],
        "type": "object"
      },
      "fortnox_TaxReductionListItem_List": {
        "properties": {
          "TaxReductions": {
            "items": {
              "$ref": "#/components/schemas/fortnox_TaxReductionListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_TaxReduction_TaxReductionAmount": {
        "properties": {
          "AskedAmount": {
            "format": "double",
            "minimum": 1,
            "type": "number"
          },
          "WorkType": {
            "enum": [
              "SOLARCELLS",
              "STORAGESELFPRODUCEDELECTRICITY",
              "CHARGINGSTATIONELECTRICVEHICLE"
            ],
            "type": "string"
          }
        },
        "required": [
          "AskedAmount",
          "WorkType"
        ],
        "type": "object"
      },
      "fortnox_TaxReduction_Wrap": {
        "properties": {
          "TaxReduction": {
            "$ref": "#/components/schemas/fortnox_TaxReduction"
          }
        },
        "required": [
          "TaxReduction"
        ],
        "type": "object"
      },
      "fortnox_TermsOfDelivery": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "type": "string"
          },
          "DescriptionEnglish": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "Code",
          "Description"
        ],
        "type": "object"
      },
      "fortnox_TermsOfDelivery_List": {
        "properties": {
          "TermsOfDeliveries": {
            "items": {
              "$ref": "#/components/schemas/fortnox_TermsOfDelivery"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_TermsOfDelivery_Wrap": {
        "properties": {
          "TermsOfDelivery": {
            "$ref": "#/components/schemas/fortnox_TermsOfDelivery"
          }
        },
        "required": [
          "TermsOfDelivery"
        ],
        "type": "object"
      },
      "fortnox_TermsOfPayment": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Code": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        },
        "required": [
          "Code",
          "Description"
        ],
        "type": "object"
      },
      "fortnox_TermsOfPayment_List": {
        "properties": {
          "TermsOfPayments": {
            "items": {
              "$ref": "#/components/schemas/fortnox_TermsOfPayment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_TermsOfPayment_Wrap": {
        "properties": {
          "TermsOfPayment": {
            "$ref": "#/components/schemas/fortnox_TermsOfPayment"
          }
        },
        "required": [
          "TermsOfPayment"
        ],
        "type": "object"
      },
      "fortnox_TrustedEmailSender": {
        "properties": {
          "RejectedSenders": {
            "items": {
              "$ref": "#/components/schemas/fortnox_TrustedEmailSender_RejectedSender"
            },
            "type": "array"
          },
          "TrustedSenders": {
            "items": {
              "$ref": "#/components/schemas/fortnox_TrustedEmailSender_TrustedSender"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_TrustedEmailSender_RejectedSender": {
        "properties": {
          "Email": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Email"
        ],
        "type": "object"
      },
      "fortnox_TrustedEmailSender_TrustedSender": {
        "properties": {
          "Email": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Email"
        ],
        "type": "object"
      },
      "fortnox_TrustedEmailSender_TrustedSender_Wrap": {
        "properties": {
          "TrustedSender": {
            "$ref": "#/components/schemas/fortnox_TrustedEmailSender_TrustedSender"
          }
        },
        "type": "object"
      },
      "fortnox_TrustedEmailSender_Wrap": {
        "properties": {
          "EmailSenders": {
            "$ref": "#/components/schemas/fortnox_TrustedEmailSender"
          }
        },
        "type": "object"
      },
      "fortnox_Unit": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "CodeEnglish": {
            "maxLength": 100,
            "type": "string"
          },
          "Description": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "Code",
          "Description"
        ],
        "type": "object"
      },
      "fortnox_Unit_List": {
        "properties": {
          "Units": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Unit"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_Unit_Wrap": {
        "properties": {
          "Unit": {
            "$ref": "#/components/schemas/fortnox_Unit"
          }
        },
        "required": [
          "Unit"
        ],
        "type": "object"
      },
      "fortnox_UpdateAsset": {
        "properties": {
          "Description": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_UpdateAsset_UpdateWrap": {
        "properties": {
          "AssetType": {
            "$ref": "#/components/schemas/fortnox_UpdateAsset"
          }
        },
        "type": "object"
      },
      "fortnox_UpdateAsset_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_UpdateAsset"
          }
        },
        "type": "object"
      },
      "fortnox_VacationDebtBasis": {
        "properties": {
          "Employees": {
            "items": {
              "$ref": "#/components/schemas/fortnox_VacationDebtBasis_Employee"
            },
            "type": "array"
          },
          "LastDay": {
            "format": "date",
            "type": "string"
          },
          "Month": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Month",
          "Year"
        ],
        "type": "object"
      },
      "fortnox_VacationDebtBasis_Employee": {
        "properties": {
          "DaysEarned": {
            "format": "double",
            "type": "number"
          },
          "DaysSaved": {
            "format": "double",
            "type": "number"
          },
          "DaysUnused": {
            "format": "double",
            "type": "number"
          },
          "DebtAdvance": {
            "format": "double",
            "type": "number"
          },
          "DebtEarned": {
            "format": "double",
            "type": "number"
          },
          "DebtSaved": {
            "format": "double",
            "type": "number"
          },
          "DebtUnused": {
            "format": "double",
            "type": "number"
          },
          "EmployeeId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "EmployeeName": {
            "type": "string"
          },
          "TotalDebtEmployee": {
            "format": "double",
            "type": "number"
          },
          "TotalDebtEmployerContribution": {
            "format": "double",
            "type": "number"
          },
          "VariableEarned": {
            "format": "double",
            "type": "number"
          },
          "VariableUnused": {
            "format": "double",
            "type": "number"
          },
          "WageEarned": {
            "format": "double",
            "type": "number"
          },
          "WageSaved": {
            "format": "double",
            "type": "number"
          },
          "WageUnused": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "EmployeeId"
        ],
        "type": "object"
      },
      "fortnox_VacationDebtBasis_Wrap": {
        "properties": {
          "VacationDebtBasis": {
            "$ref": "#/components/schemas/fortnox_VacationDebtBasis"
          }
        },
        "type": "object"
      },
      "fortnox_Voucher": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ApprovalState": {
            "format": "int32",
            "type": "integer"
          },
          "Comments": {
            "maxLength": 1000,
            "type": "string"
          },
          "CostCenter": {
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "ReferenceNumber": {
            "type": "string"
          },
          "ReferenceType": {
            "enum": [
              "INVOICE",
              "SUPPLIERINVOICE",
              "INVOICEPAYMENT",
              "SUPPLIERPAYMENT",
              "MANUAL",
              "CASHINVOICE",
              "ACCRUAL"
            ],
            "type": "string"
          },
          "TransactionDate": {
            "format": "date",
            "type": "string"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherRows": {
            "items": {
              "$ref": "#/components/schemas/fortnox_Voucher_VoucherRow"
            },
            "maxItems": 2147483647,
            "minItems": 2,
            "type": "array"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Description",
          "TransactionDate",
          "VoucherSeries",
          "Year"
        ],
        "type": "object"
      },
      "fortnox_VoucherFileConnection": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "FileId": {
            "type": "string"
          },
          "VoucherDescription": {
            "type": "string"
          },
          "VoucherNumber": {
            "type": "string"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "VoucherYear": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "FileId",
          "VoucherNumber",
          "VoucherSeries"
        ],
        "type": "object"
      },
      "fortnox_VoucherFileConnection_List": {
        "properties": {
          "VoucherFileConnections": {
            "items": {
              "$ref": "#/components/schemas/fortnox_VoucherFileConnection"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_VoucherFileConnection_Wrap": {
        "properties": {
          "VoucherFileConnection": {
            "$ref": "#/components/schemas/fortnox_VoucherFileConnection"
          }
        },
        "required": [
          "VoucherFileConnection"
        ],
        "type": "object"
      },
      "fortnox_VoucherListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "ApprovalState": {
            "format": "int32",
            "type": "integer"
          },
          "Comments": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ReferenceNumber": {
            "type": "string"
          },
          "ReferenceType": {
            "enum": [
              "INVOICE",
              "SUPPLIERINVOICE",
              "INVOICEPAYMENT",
              "SUPPLIERPAYMENT",
              "MANUAL",
              "CASHINVOICE",
              "ACCRUAL"
            ],
            "type": "string"
          },
          "TransactionDate": {
            "format": "date",
            "type": "string"
          },
          "VoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "VoucherSeries": {
            "type": "string"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "fortnox_VoucherListItem_List": {
        "properties": {
          "Vouchers": {
            "items": {
              "$ref": "#/components/schemas/fortnox_VoucherListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_VoucherSeries": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Approver": {
            "$ref": "#/components/schemas/fortnox_VoucherSeries_Approver"
          },
          "Code": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "type": "string"
          },
          "Manual": {
            "type": "boolean"
          },
          "NextVoucherNumber": {
            "format": "int32",
            "type": "integer"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Code"
        ],
        "type": "object"
      },
      "fortnox_VoucherSeriesListItem": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Approver": {
            "$ref": "#/components/schemas/fortnox_VoucherSeriesListItem_Approver"
          },
          "Code": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 200,
            "type": "string"
          },
          "Manual": {
            "type": "boolean"
          },
          "Year": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "Code"
        ],
        "type": "object"
      },
      "fortnox_VoucherSeriesListItem_Approver": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_VoucherSeriesListItem_List": {
        "properties": {
          "VoucherSeriesCollection": {
            "items": {
              "$ref": "#/components/schemas/fortnox_VoucherSeriesListItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_VoucherSeries_Approver": {
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_VoucherSeries_Wrap": {
        "properties": {
          "VoucherSeries": {
            "$ref": "#/components/schemas/fortnox_VoucherSeries"
          }
        },
        "required": [
          "VoucherSeries"
        ],
        "type": "object"
      },
      "fortnox_Voucher_VoucherRow": {
        "properties": {
          "Account": {
            "format": "int32",
            "maximum": 9999,
            "minimum": 1000,
            "type": "integer"
          },
          "CostCenter": {
            "type": "string"
          },
          "Credit": {
            "format": "double",
            "type": "number"
          },
          "Debit": {
            "format": "double",
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "Project": {
            "type": "string"
          },
          "Quantity": {
            "format": "double",
            "type": "number"
          },
          "Removed": {
            "type": "boolean"
          },
          "TransactionInformation": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "Account"
        ],
        "type": "object"
      },
      "fortnox_Voucher_Wrap": {
        "properties": {
          "Voucher": {
            "$ref": "#/components/schemas/fortnox_Voucher"
          }
        },
        "type": "object"
      },
      "fortnox_WayOfDelivery": {
        "properties": {
          "@url": {
            "type": "string"
          },
          "Code": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 100,
            "type": "string"
          },
          "DescriptionEnglish": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "Code"
        ],
        "type": "object"
      },
      "fortnox_WayOfDelivery_List": {
        "properties": {
          "WayOfDeliveries": {
            "items": {
              "$ref": "#/components/schemas/fortnox_WayOfDelivery"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "fortnox_WayOfDelivery_Wrap": {
        "properties": {
          "WayOfDelivery": {
            "$ref": "#/components/schemas/fortnox_WayOfDelivery"
          }
        },
        "type": "object"
      },
      "fortnox_WriteDown": {
        "properties": {
          "Amount": {
            "format": "int32",
            "type": "integer"
          },
          "Comment": {
            "type": "string"
          },
          "Date": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_WriteDown_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_WriteDown"
          }
        },
        "type": "object"
      },
      "fortnox_WriteUp": {
        "properties": {
          "Amount": {
            "format": "int32",
            "type": "integer"
          },
          "Comment": {
            "type": "string"
          },
          "Date": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "fortnox_WriteUp_Wrap": {
        "properties": {
          "Asset": {
            "$ref": "#/components/schemas/fortnox_WriteUp"
          }
        },
        "type": "object"
      },
      "go_fnox_se_fnx_financial-transactions_api_bankfeeds_v1.Reference": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/v1.ReferenceType"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "go_fnox_se_fnx_financial-transactions_api_bankfeeds_v1.Transaction": {
        "properties": {
          "accountID": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "amountCurrency": {
            "type": "number"
          },
          "balance": {
            "$ref": "#/components/schemas/v1.Balance"
          },
          "cardID": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "currencyRate": {
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/v1.Direction"
          },
          "iban": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "paymentDate": {
            "$ref": "#/components/schemas/json.Date"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/go_fnox_se_fnx_financial-transactions_api_bankfeeds_v1.Reference"
            },
            "type": "array"
          },
          "responseCode": {
            "type": "string"
          },
          "responseCodeDescription": {
            "type": "string"
          },
          "settlementDate": {
            "$ref": "#/components/schemas/v1.Date"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "integration-developer_IntegrationSalesResponse": {
        "properties": {
          "amount": {
            "format": "int32",
            "type": "integer"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "integration-developer_RatingDTO": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "companyEmployeeRange": {
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "integrationId": {
            "format": "int64",
            "type": "integer"
          },
          "isMyRating": {
            "type": "boolean"
          },
          "rating": {
            "format": "int32",
            "type": "integer"
          },
          "ratingId": {
            "format": "int32",
            "type": "integer"
          },
          "response": {
            "$ref": "#/components/schemas/integration-developer_RatingResponseDTO"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "integration-developer_RatingResponseDTO": {
        "properties": {
          "comment": {
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "integration-developer_TenantPartnerInformationDTO": {
        "properties": {
          "partner": {
            "type": "string"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "integration-developer_UserMappingDTO": {
        "properties": {
          "externalSourceId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "integration-developer_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "integration-partner_AppSalesPurchase": {
        "properties": {
          "amount": {
            "format": "int64",
            "type": "integer"
          },
          "identifier": {
            "type": "string"
          },
          "purchaseTime": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "integration-partner_AppSalesResponse": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "tenants": {
            "items": {
              "$ref": "#/components/schemas/integration-partner_AppSalesTenantData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "integration-partner_AppSalesTenantData": {
        "properties": {
          "purchases": {
            "items": {
              "$ref": "#/components/schemas/integration-partner_AppSalesPurchase"
            },
            "type": "array"
          },
          "tenantId": {
            "type": "string"
          },
          "terminations": {
            "items": {
              "$ref": "#/components/schemas/integration-partner_AppSalesTermination"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/integration-partner_AppSalesUserData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "integration-partner_AppSalesTermination": {
        "properties": {
          "amount": {
            "format": "int64",
            "type": "integer"
          },
          "identifier": {
            "type": "string"
          },
          "onCancellationTime": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "integration-partner_AppSalesUserData": {
        "properties": {
          "activationTime": {
            "type": "object"
          },
          "email": {
            "type": "string"
          },
          "externalSourceId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "integration-partner_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "json.Date": {
        "properties": {
          "time.Time": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "partner-api_AddedIntegration": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "authorizationCode": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "partner-api_CompanyInformation": {
        "properties": {
          "companyName": {
            "type": "string"
          },
          "contract": {
            "type": "string"
          },
          "organizationNumber": {
            "type": "string"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "partner-api_FetchedIntegration": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "partner-api_PartnerClientAuthorizationRequest": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientTenantId": {
            "format": "int64",
            "type": "integer"
          },
          "redirectUri": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "partner-api_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "time-reporting_ArticleRegistration": {
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "documentId": {
            "format": "int64",
            "type": "integer"
          },
          "documentType": {
            "enum": [
              "order",
              "invoice"
            ],
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "invoiceBasisId": {
            "format": "int64",
            "type": "integer"
          },
          "invoiceText": {
            "maxLength": 1000,
            "type": "string"
          },
          "item": {
            "$ref": "#/components/schemas/time-reporting_TRItem"
          },
          "nonInvoiceable": {
            "type": "boolean"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "orderIndex": {
            "format": "int32",
            "type": "integer"
          },
          "ownerId": {
            "type": "string"
          },
          "timeLocked": {
            "type": "boolean"
          },
          "totalQuantity": {
            "type": "number"
          },
          "unitCost": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "time-reporting_BaseArticleRegistration": {
        "properties": {
          "articleRegistrations": {
            "items": {
              "$ref": "#/components/schemas/time-reporting_ArticleRegistration"
            },
            "type": "array"
          },
          "costCenter": {
            "$ref": "#/components/schemas/time-reporting_TRCostCenter"
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/time-reporting_TRCustomer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "ownerId": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/time-reporting_TRProject"
          },
          "purchaseDate": {
            "format": "date",
            "type": "string"
          },
          "registeredArticle": {
            "$ref": "#/components/schemas/time-reporting_ArticleRegistration"
          },
          "registrationType": {
            "enum": [
              "WORK",
              "ABSENCE",
              "ARTICLE"
            ],
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "customer",
          "purchaseDate"
        ],
        "type": "object"
      },
      "time-reporting_DetailedRegistration": {
        "properties": {
          "chargeHours": {
            "format": "float",
            "type": "number"
          },
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "costCenter": {
            "$ref": "#/components/schemas/time-reporting_TRCostCenter"
          },
          "createdBy": {
            "type": "string"
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/time-reporting_TRCustomer"
          },
          "documentId": {
            "format": "int64",
            "type": "integer"
          },
          "documentType": {
            "enum": [
              "order",
              "invoice"
            ],
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "invoiceBasisId": {
            "format": "int64",
            "type": "integer"
          },
          "invoiceText": {
            "maxLength": 1000,
            "type": "string"
          },
          "nonInvoiceable": {
            "type": "boolean"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/time-reporting_TRProject"
          },
          "registrationCode": {
            "$ref": "#/components/schemas/time-reporting_RegistrationCode"
          },
          "service": {
            "$ref": "#/components/schemas/time-reporting_TRItem"
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "stopTime": {
            "format": "date-time",
            "type": "string"
          },
          "unitCost": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "updatedBy": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "workedDate": {
            "format": "date",
            "type": "string"
          },
          "workedHours": {
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "registrationCode",
          "workedDate"
        ],
        "type": "object"
      },
      "time-reporting_RegistrationCode": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "code": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "costMultiplier": {
            "format": "float",
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priceMultiplier": {
            "format": "float",
            "type": "number"
          },
          "type": {
            "enum": [
              "WORK",
              "ABSENCE"
            ],
            "type": "string"
          }
        },
        "required": [
          "code",
          "type"
        ],
        "type": "object"
      },
      "time-reporting_TRCostCenter": {
        "properties": {
          "active": {
            "type": "string"
          },
          "id": {
            "maxLength": 40,
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "type": "object"
      },
      "time-reporting_TRCustomer": {
        "properties": {
          "accountManager": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "defaultProjectId": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "maxLength": 40,
            "type": "string"
          },
          "invoiceCity": {
            "type": "string"
          },
          "invoiceZipCode": {
            "type": "string"
          },
          "isBusiness": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "number": {
            "maxLength": 1024,
            "type": "string"
          },
          "priceList": {
            "type": "string"
          },
          "propertyDesignation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "time-reporting_TRItem": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "description": {
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "maxLength": 40,
            "type": "string"
          },
          "isStock": {
            "type": "boolean"
          },
          "purchasePrice": {
            "type": "number"
          },
          "salesPrices": {
            "items": {
              "$ref": "#/components/schemas/time-reporting_TRItemPrice"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "SERVICE",
              "STOCK"
            ],
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "time-reporting_TRItemPrice": {
        "properties": {
          "list": {
            "type": "string"
          },
          "price": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "time-reporting_TRProject": {
        "properties": {
          "description": {
            "maxLength": 50,
            "type": "string"
          },
          "endDate": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "maxLength": 40,
            "type": "string"
          },
          "invoicedAmount": {
            "format": "double",
            "type": "number"
          },
          "orderAmount": {
            "format": "double",
            "type": "number"
          },
          "orderTime": {
            "format": "double",
            "type": "number"
          },
          "projectLeader": {
            "type": "string"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          },
          "status": {
            "format": "int32",
            "type": "integer"
          },
          "totalAmountInInvoices": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "time-reporting_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "todos_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.Balance": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.Date": {
        "properties": {
          "time.Time": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.Direction": {
        "enum": [
          "in",
          "out"
        ],
        "type": "string",
        "x-enum-varnames": [
          "DirectionIn",
          "DirectionOut"
        ]
      },
      "v1.ReferenceType": {
        "enum": [
          "end-to-end-id",
          "message",
          "ocr",
          "total",
          "amount",
          "balance",
          "demandFee",
          "taxReduction",
          "invoice-id",
          "credit-id",
          "creditor-account",
          "debitor-account",
          "iban",
          "bankgiro",
          "plusgiro",
          "bban",
          "customer-number",
          "invoice-number",
          "swish-number",
          "account",
          "name",
          "debitor-name",
          "creditor-name",
          "currency-diff",
          "your-order-number",
          "attachment",
          "date",
          "account-number",
          "city",
          "country",
          "mcc",
          "card-id"
        ],
        "type": "string",
        "x-enum-varnames": [
          "ReferenceTypeEndToEndID",
          "ReferenceTypeMessage",
          "ReferenceTypeOCR",
          "ReferenceTypeTotal",
          "ReferenceTypeAmount",
          "ReferenceTypeBalance",
          "ReferenceTypeDemandFee",
          "ReferenceTypeTaxReduction",
          "ReferenceTypeInvoiceID",
          "ReferenceTypeCreditID",
          "ReferenceTypeCreditorAccount",
          "ReferenceTypeDebitorAccount",
          "ReferenceTypeIBAN",
          "ReferenceTypeBankgiro",
          "ReferenceTypePlusgiro",
          "ReferenceTypeBBAN",
          "ReferenceTypeCustomerNumber",
          "ReferenceTypeInvoiceNumber",
          "ReferenceTypeSwishNumber",
          "ReferenceTypeAccount",
          "ReferenceTypeName",
          "ReferenceTypeDebitorName",
          "ReferenceTypeCreditorName",
          "ReferenceTypeCurrencyDiff",
          "ReferenceTypeYourOrderNumber",
          "ReferenceTypeAttachment",
          "ReferenceTypeDate",
          "ReferenceTypeAccountNumber",
          "ReferenceTypeCity",
          "ReferenceTypeCountry",
          "ReferenceTypeMerchantCategoryCode",
          "ReferenceTypeCardID"
        ]
      },
      "warehouse_AverageCost": {
        "properties": {
          "averageCostInSEK": {
            "type": "number"
          },
          "itemId": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_Currency": {
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "rate": {
            "minimum": 0.000001,
            "type": "number"
          },
          "unit": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "currency",
          "rate"
        ],
        "type": "object"
      },
      "warehouse_CustomDocumentType": {
        "properties": {
          "category": {
            "enum": [
              "INBOUND",
              "OUTBOUND"
            ],
            "type": "string"
          },
          "referenceType": {
            "maxLength": 25,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_-]+",
            "type": "string"
          }
        },
        "required": [
          "category",
          "referenceType"
        ],
        "type": "object"
      },
      "warehouse_CustomInboundDocument": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/warehouse_Currency"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "maxLength": 25,
            "minLength": 1,
            "pattern": "^[0-9]+",
            "type": "string"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_CustomInboundDocumentRow"
            },
            "type": "array"
          },
          "type": {
            "maxLength": 25,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_-]+",
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          },
          "warehouseReady": {
            "type": "boolean"
          }
        },
        "required": [
          "date",
          "rows"
        ],
        "type": "object"
      },
      "warehouse_CustomInboundDocumentRow": {
        "properties": {
          "batch": {
            "maxLength": 50,
            "type": "string"
          },
          "costCenterCode": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "directCost": {
            "type": "number"
          },
          "freightCost": {
            "type": "number"
          },
          "itemDescription": {
            "maxLength": 200,
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "maxLength": 50,
            "type": "string"
          },
          "otherCost": {
            "type": "number"
          },
          "projectId": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rowId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "stockLocationCode": {
            "type": "string"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "quantity"
        ],
        "type": "object"
      },
      "warehouse_CustomOutboundDocument": {
        "properties": {
          "averageCosts": {
            "items": {
              "$ref": "#/components/schemas/warehouse_AverageCost"
            },
            "type": "array"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "deliveryState": {
            "enum": [
              "registration",
              "reservation",
              "delivery"
            ],
            "type": "string"
          },
          "forcedDelivery": {
            "type": "boolean"
          },
          "id": {
            "maxLength": 25,
            "minLength": 1,
            "pattern": "^[0-9]+",
            "type": "string"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "referenceType": {
            "maxLength": 25,
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_-]+",
            "type": "string"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_CustomOutboundDocumentRow"
            },
            "type": "array"
          },
          "voided": {
            "type": "boolean"
          },
          "warehouseReady": {
            "type": "boolean"
          }
        },
        "required": [
          "date",
          "deliveryState",
          "rows"
        ],
        "type": "object"
      },
      "warehouse_CustomOutboundDocumentRow": {
        "properties": {
          "costCenterCode": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "deliveredQuantity": {
            "type": "number"
          },
          "forcedQuantity": {
            "type": "number"
          },
          "itemDescription": {
            "maxLength": 200,
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "maxLength": 50,
            "type": "string"
          },
          "projectId": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "reservedQuantity": {
            "type": "number"
          },
          "rowId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "quantity"
        ],
        "type": "object"
      },
      "warehouse_DocumentReference": {
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_IncomingGoods": {
        "properties": {
          "completed": {
            "type": "boolean"
          },
          "costCenterCode": {
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "deliveryNoteId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "hasDeliveryNote": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_IncomingGoodsRow"
            },
            "type": "array"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          },
          "supplierName": {
            "maxLength": 1024,
            "type": "string"
          },
          "supplierNumber": {
            "maxLength": 1024,
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          }
        },
        "required": [
          "deliveryNoteId"
        ],
        "type": "object"
      },
      "warehouse_IncomingGoodsListRow": {
        "properties": {
          "completed": {
            "type": "boolean"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "deliveryNoteId": {
            "type": "string"
          },
          "hasDeliveryNote": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "supplierName": {
            "type": "string"
          },
          "supplierNumber": {
            "type": "string"
          },
          "unmatchedValue": {
            "type": "number"
          },
          "voided": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "warehouse_IncomingGoodsRow": {
        "properties": {
          "backOrderQuantity": {
            "minimum": 0,
            "type": "number"
          },
          "batch": {
            "maxLength": 50,
            "type": "string"
          },
          "costCenterCode": {
            "type": "string"
          },
          "directCost": {
            "type": "number"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "invoicedQuantity": {
            "minimum": 0,
            "type": "number"
          },
          "isStockItem": {
            "type": "boolean"
          },
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "orderedQuantity": {
            "minimum": 0,
            "type": "number"
          },
          "projectId": {
            "type": "string"
          },
          "purchaseOrderId": {
            "format": "int64",
            "type": "integer"
          },
          "purchaseOrderRowId": {
            "format": "uuid",
            "type": "string"
          },
          "receivedQuantity": {
            "minimum": 0,
            "type": "number"
          },
          "remainingOrderedQuantity": {
            "type": "number"
          },
          "rowOrder": {
            "format": "int32",
            "type": "integer"
          },
          "stockLocationCode": {
            "type": "string"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockLocationName": {
            "type": "string"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          },
          "takenQuantity": {
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "backOrderQuantity",
          "invoicedQuantity",
          "itemId",
          "orderedQuantity",
          "receivedQuantity",
          "takenQuantity"
        ],
        "type": "object"
      },
      "warehouse_ManualDocument": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "deliveryId": {
            "format": "int64",
            "type": "integer"
          },
          "entityId": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "Inbound",
              "Outbound",
              "StockTransfer"
            ],
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "warehouse_ManualInboundDocument": {
        "properties": {
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "currencyRate": {
            "minimum": 0.000001,
            "type": "number"
          },
          "currencyUnit": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_ManualInboundDocumentRow"
            },
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          }
        },
        "required": [
          "currency",
          "currencyRate",
          "date",
          "rows"
        ],
        "type": "object"
      },
      "warehouse_ManualInboundDocumentPatch": {
        "properties": {
          "note": {
            "maxLength": 1000,
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_ManualInboundDocumentRow": {
        "properties": {
          "batch": {
            "maxLength": 50,
            "type": "string"
          },
          "costCenterCode": {
            "type": "string"
          },
          "directCost": {
            "minimum": 0,
            "type": "number"
          },
          "freightCost": {
            "minimum": 0,
            "type": "number"
          },
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "otherCost": {
            "minimum": 0,
            "type": "number"
          },
          "projectId": {
            "type": "string"
          },
          "quantity": {
            "minimum": 0.01,
            "type": "number"
          },
          "rowId": {
            "format": "int64",
            "type": "integer"
          },
          "stockLocationCode": {
            "type": "string"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockLocationName": {
            "type": "string"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "quantity"
        ],
        "type": "object"
      },
      "warehouse_ManualOutboundDocument": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_ManualOutboundDocumentRow"
            },
            "maxItems": 2147483647,
            "type": "array"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          }
        },
        "required": [
          "date",
          "rows"
        ],
        "type": "object"
      },
      "warehouse_ManualOutboundDocumentPatch": {
        "properties": {
          "note": {
            "maxLength": 1000,
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_ManualOutboundDocumentRow": {
        "properties": {
          "costCenterCode": {
            "type": "string"
          },
          "deliveredQuantity": {
            "type": "number"
          },
          "forcedQuantity": {
            "type": "number"
          },
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "quantity": {
            "minimum": 0.01,
            "type": "number"
          },
          "stockLocationCode": {
            "type": "string"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockLocationName": {
            "type": "string"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "quantity"
        ],
        "type": "object"
      },
      "warehouse_PackageItem": {
        "properties": {
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "quantityRequired": {
            "type": "number"
          },
          "quantityReserved": {
            "type": "number"
          },
          "totalQuantityRequired": {
            "type": "number"
          }
        },
        "required": [
          "itemId",
          "quantityRequired"
        ],
        "type": "object"
      },
      "warehouse_PartialPurchaseOrder": {
        "properties": {
          "deliveryDate": {
            "format": "date",
            "type": "string"
          },
          "internalReference": {
            "maxLength": 50,
            "type": "string"
          },
          "messageToSupplier": {
            "maxLength": 1000,
            "type": "string"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "supplierName": {
            "maxLength": 1024,
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_ProductionOrder": {
        "properties": {
          "batch": {
            "type": "string"
          },
          "costCenterCode": {
            "type": "string"
          },
          "documentState": {
            "enum": [
              "completed",
              "voided"
            ],
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "inboundStockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "inboundStockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "outboundStockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "packageItems": {
            "items": {
              "$ref": "#/components/schemas/warehouse_PackageItem"
            },
            "type": "array"
          },
          "productionDate": {
            "format": "date",
            "type": "string"
          },
          "productionState": {
            "enum": [
              "registered",
              "reserved",
              "ongoing"
            ],
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "quantity": {
            "minimum": 0.01,
            "type": "number"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "productionState",
          "quantity",
          "startDate"
        ],
        "type": "object"
      },
      "warehouse_ProductionOrderPatch": {
        "properties": {
          "note": {
            "maxLength": 1000,
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_PurchaseOrder": {
        "properties": {
          "confirmationEmail": {
            "maxLength": 100,
            "type": "string"
          },
          "costCenterCode": {
            "maxLength": 25,
            "type": "string"
          },
          "currencyCode": {
            "maxLength": 3,
            "type": "string"
          },
          "currencyRate": {
            "type": "number"
          },
          "currencyUnit": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "customerId": {
            "maxLength": 25,
            "type": "string"
          },
          "customerName": {
            "maxLength": 1024,
            "type": "string"
          },
          "customerNumber": {
            "maxLength": 1024,
            "type": "string"
          },
          "deliveryAddress": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "deliveryAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "deliveryCity": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "deliveryCountryCode": {
            "maxLength": 3,
            "type": "string"
          },
          "deliveryDate": {
            "format": "date",
            "type": "string"
          },
          "deliveryName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "deliveryZipCode": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "dropship": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "internalReference": {
            "maxLength": 50,
            "type": "string"
          },
          "languageCode": {
            "maxLength": 3,
            "type": "string"
          },
          "manuallyCompleted": {
            "type": "boolean"
          },
          "messageToSupplier": {
            "maxLength": 1000,
            "type": "string"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "orderDate": {
            "format": "date",
            "type": "string"
          },
          "orderValue": {
            "type": "number"
          },
          "orderValueInSEK": {
            "type": "number"
          },
          "ourReference": {
            "maxLength": 50,
            "type": "string"
          },
          "outboundDocumentReference": {
            "$ref": "#/components/schemas/warehouse_DocumentReference"
          },
          "paymentTermsCode": {
            "maxLength": 20,
            "type": "string"
          },
          "projectId": {
            "maxLength": 25,
            "type": "string"
          },
          "purchaseOrderState": {
            "enum": [
              "NOT_SENT",
              "SENT",
              "SENT_NOT_REJECTED",
              "DELAYED",
              "RECEIVED",
              "VOIDED",
              "CURRENT",
              "ALL"
            ],
            "type": "string"
          },
          "purchaseType": {
            "enum": [
              "WAREHOUSE",
              "DROPSHIP"
            ],
            "type": "string"
          },
          "responseState": {
            "enum": [
              "NOT_SENT",
              "SENT",
              "ACCEPTED_WITH_REQ_DLV_DATE",
              "ACCEPTED_WITH_CHANGED_DLV_DATE",
              "PARTLY_ACCEPTED_WITH_REQ_DLV_DATE",
              "PARTLY_ACCEPTED_WITH_CHANGED_DLV_DATE",
              "REJECTED"
            ],
            "type": "string"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_PurchaseOrderRow"
            },
            "type": "array"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "supplier": {
            "type": "string"
          },
          "supplierAddress": {
            "maxLength": 1024,
            "type": "string"
          },
          "supplierAddress2": {
            "maxLength": 1024,
            "type": "string"
          },
          "supplierCity": {
            "maxLength": 1024,
            "type": "string"
          },
          "supplierCountryCode": {
            "maxLength": 3,
            "type": "string"
          },
          "supplierEmail": {
            "maxLength": 100,
            "type": "string"
          },
          "supplierName": {
            "maxLength": 1024,
            "type": "string"
          },
          "supplierNumber": {
            "maxLength": 1024,
            "type": "string"
          },
          "supplierPostCode": {
            "maxLength": 1024,
            "type": "string"
          },
          "totalReceivedQuantity": {
            "type": "number"
          },
          "translatedResponseState": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          },
          "yourReference": {
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "currencyCode",
          "currencyRate",
          "deliveryAddress",
          "deliveryCity",
          "deliveryName",
          "deliveryZipCode",
          "orderDate",
          "paymentTermsCode",
          "supplierNumber"
        ],
        "type": "object"
      },
      "warehouse_PurchaseOrderMailSettings": {
        "properties": {
          "body": {
            "type": "string"
          },
          "bodyAsHtml": {
            "type": "string"
          },
          "receiver": {
            "type": "string"
          },
          "receiverCopy": {
            "type": "string"
          },
          "receiverSecretCopy": {
            "type": "string"
          },
          "replyTo": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "receiver",
          "replyTo",
          "subject"
        ],
        "type": "object"
      },
      "warehouse_PurchaseOrderRow": {
        "properties": {
          "backOrderQuantity": {
            "type": "number"
          },
          "costCenterCode": {
            "maxLength": 25,
            "type": "string"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isStockItem": {
            "type": "boolean"
          },
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "notes": {
            "items": {
              "$ref": "#/components/schemas/warehouse_PurchaseOrderRowNote"
            },
            "type": "array"
          },
          "orderedQuantity": {
            "minimum": 0,
            "type": "number"
          },
          "price": {
            "minimum": 0,
            "type": "number"
          },
          "projectId": {
            "maxLength": 25,
            "type": "string"
          },
          "purchaseOrderId": {
            "format": "int64",
            "type": "integer"
          },
          "receivedQuantity": {
            "type": "number"
          },
          "remainingOrderedQuantity": {
            "minimum": 0,
            "type": "number"
          },
          "rowNum": {
            "format": "int64",
            "type": "integer"
          },
          "stockLocationCode": {
            "type": "string"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockLocationName": {
            "type": "string"
          },
          "stockPointCode": {
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointName": {
            "type": "string"
          }
        },
        "required": [
          "currencyCode",
          "itemId",
          "orderedQuantity",
          "remainingOrderedQuantity"
        ],
        "type": "object"
      },
      "warehouse_PurchaseOrderRowNote": {
        "properties": {
          "note": {
            "type": "string"
          },
          "purchaseOrderId": {
            "format": "int64",
            "type": "integer"
          },
          "purchaseOrderRowId": {
            "format": "uuid",
            "type": "string"
          },
          "rowNum": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "warehouse_ReleaseParentOrder": {
        "properties": {
          "releasedParentOrder": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "warehouse_ResponseStateChange": {
        "properties": {
          "responseState": {
            "enum": [
              "NOT_SENT",
              "SENT",
              "ACCEPTED_WITH_REQ_DLV_DATE",
              "ACCEPTED_WITH_CHANGED_DLV_DATE",
              "PARTLY_ACCEPTED_WITH_REQ_DLV_DATE",
              "PARTLY_ACCEPTED_WITH_CHANGED_DLV_DATE",
              "REJECTED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_StockBalance": {
        "properties": {
          "availableStock": {
            "type": "number"
          },
          "inStock": {
            "type": "number"
          },
          "itemId": {
            "type": "string"
          },
          "stockPointCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_StockLocation": {
        "properties": {
          "code": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "maxLength": 25,
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "warehouse_StockPoint": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "code": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string"
          },
          "deliveryAddress": {
            "maxLength": 50,
            "type": "string"
          },
          "deliveryAddress2": {
            "maxLength": 50,
            "type": "string"
          },
          "deliveryCity": {
            "maxLength": 50,
            "type": "string"
          },
          "deliveryCountryCode": {
            "maxLength": 3,
            "type": "string"
          },
          "deliveryName": {
            "maxLength": 50,
            "type": "string"
          },
          "deliveryPhone": {
            "maxLength": 50,
            "type": "string"
          },
          "deliveryZipCode": {
            "maxLength": 10,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "stockLocations": {
            "items": {
              "$ref": "#/components/schemas/warehouse_StockLocation"
            },
            "type": "array"
          },
          "usingCompanyAddress": {
            "type": "boolean"
          }
        },
        "required": [
          "code",
          "name"
        ],
        "type": "object"
      },
      "warehouse_StockTaking": {
        "properties": {
          "costCenterCode": {
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "responsible": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_StockTakingRow"
            },
            "type": "array"
          },
          "sortParams": {
            "$ref": "#/components/schemas/warehouse_StockTakingSortParams"
          },
          "sortingId": {
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "pattern": "planning|started|completed|voided",
            "type": "string"
          },
          "usingStockPoints": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "responsible",
          "state"
        ],
        "type": "object"
      },
      "warehouse_StockTakingRow": {
        "properties": {
          "countedBy": {
            "maxLength": 100,
            "type": "string"
          },
          "currentRowNo": {
            "format": "int32",
            "type": "integer"
          },
          "hasPostReleaseStockChanges": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "type": "string"
          },
          "stockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "stockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "stockTakenQuantity": {
            "type": "number"
          },
          "stockTakingId": {
            "format": "int64",
            "type": "integer"
          },
          "stockTakingRowId": {
            "type": "string"
          },
          "totalQuantityInStock": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "warehouse_StockTakingSortParams": {
        "properties": {
          "primarySort": {
            "type": "string"
          },
          "primarySortOrder": {
            "type": "string"
          },
          "secondarySort": {
            "type": "string"
          },
          "secondarySortOrder": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "warehouse_StockTransferDocument": {
        "properties": {
          "id": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "note": {
            "maxLength": 1000,
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/warehouse_StockTransferRow"
            },
            "type": "array"
          },
          "transferDate": {
            "format": "date",
            "type": "string"
          },
          "version": {
            "format": "int64",
            "type": "integer"
          },
          "voided": {
            "type": "boolean"
          }
        },
        "required": [
          "rows"
        ],
        "type": "object"
      },
      "warehouse_StockTransferRow": {
        "properties": {
          "fromStockLocationCode": {
            "type": "string"
          },
          "fromStockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "fromStockLocationName": {
            "type": "string"
          },
          "fromStockPointCode": {
            "type": "string"
          },
          "fromStockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "fromStockPointName": {
            "type": "string"
          },
          "itemDescription": {
            "type": "string"
          },
          "itemId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "itemUnit": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "requestedQuantity": {
            "minimum": 0.01,
            "type": "number"
          },
          "rowNum": {
            "format": "int64",
            "type": "integer"
          },
          "toStockLocationCode": {
            "type": "string"
          },
          "toStockLocationId": {
            "format": "uuid",
            "type": "string"
          },
          "toStockLocationName": {
            "type": "string"
          },
          "toStockPointCode": {
            "type": "string"
          },
          "toStockPointId": {
            "format": "uuid",
            "type": "string"
          },
          "toStockPointName": {
            "type": "string"
          }
        },
        "required": [
          "fromStockPointId",
          "itemId",
          "requestedQuantity",
          "toStockPointId"
        ],
        "type": "object"
      },
      "warehouse_TenantInfo": {
        "properties": {
          "activated": {
            "type": "boolean"
          },
          "tenantId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "warehouse_WebException": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "description": "# Documentation \n\nThe Fortnox API is organized around REST. This means that we’ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.\n\nIt also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.\n\nWe use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.\n\nThe API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.\n\nWe encourage you to read all the articles in the [Guides & Good to Know section](https://www.fortnox.se/developer/guides-and-good-to-know/)</a> first, before going forward and learning about the different resources.\n\nThis to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.\n\n## Rate limits\n\nThe limit per access-token is 25 requests per 5 seconds. This equals to 300 requests per minute.\n\n[Read more about this here.](https://www.fortnox.se/developer/guides-and-good-to-know/rate-limits-for-fortnox-api/)\n\n## Query parameters\n\nUse query parameters with the ?-character and separate parameters with the &-character. \n\n**Example:**\n GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000\nRead more about our parameters [here](https://www.fortnox.se/developer/guides-and-good-to-know/parameters/)\n\n\nSearch the documentation using the search field in the top left corner.",
    "title": "Fortnox API",
    "version": ""
  },
  "openapi": "3.0.3",
  "paths": {
    "/3/absencetransactions": {
      "get": {
        "description": "Supports query-string parameters <strong>employeeid</strong> and <strong>date</strong> for filtering the result.",
        "operationId": "list",
        "parameters": [
          {
            "description": "filter by employee id",
            "in": "query",
            "name": "employeeid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by date",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AbsenceTransactionListItem_Wrap"
                }
              }
            },
            "description": "a list of absence transactions"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Lists all absence transactions",
        "tags": [
          "fortnox_AbsenceTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "1_create",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_AbsenceTransactionPayload_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AbsenceTransactionSingleItem_Wrap"
                }
              }
            },
            "description": "the created absence transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a new absence transaction",
        "tags": [
          "fortnox_AbsenceTransactions"
        ],
        "x-codegen-request-body-name": "absenceTransactionsPayload",
        "x-fn-is-public": "true"
      }
    },
    "/3/absencetransactions/{id}": {
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "description": "identifies the transaction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AbsenceTransactionSingleItem_Wrap"
                }
              }
            },
            "description": "empty"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete an absence transaction",
        "tags": [
          "fortnox_AbsenceTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "Retrieves a specific transaction",
        "operationId": "1_get",
        "parameters": [
          {
            "description": "identifies the transaction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AbsenceTransactionSingleItem_Wrap"
                }
              }
            },
            "description": "the absence transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific absence transaction",
        "tags": [
          "fortnox_AbsenceTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "1_update",
        "parameters": [
          {
            "description": "identifies the transaction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_AbsenceTransactionPayload_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AbsenceTransactionSingleItem_Wrap"
                }
              }
            },
            "description": "the updated absence transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a single absence transaction",
        "tags": [
          "fortnox_AbsenceTransactions"
        ],
        "x-codegen-request-body-name": "absenceTransactionsPayload",
        "x-fn-is-public": "true"
      }
    },
    "/3/absencetransactions/{id}/{Date}/{Code}": {
      "get": {
        "description": "Retrieves a list of absence transactions for an employee on a specific date and cause code.",
        "operationId": "get_1",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "of the absence transaction",
            "in": "path",
            "name": "Date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "status code of the absence transaction",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "enum": [
                "ASK",
                "FPE",
                "FRA",
                "HAV",
                "KOM",
                "MIL",
                "NAR",
                "OS1",
                "OS2",
                "OS3",
                "OS4",
                "OS5",
                "PAP",
                "PEM",
                "PER",
                "SEM",
                "SJK",
                "SMB",
                "SVE",
                "TJL",
                "UTB",
                "VAB"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AbsenceTransactionListItem_Wrap"
                }
              }
            },
            "description": "a list of absence transactions"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve absence transactions",
        "tags": [
          "fortnox_AbsenceTransactions"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/accountcharts": {
      "get": {
        "description": "Retrieves a list of all the available account charts.",
        "operationId": "list_1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AccountChart_Wrap"
                }
              }
            },
            "description": "a list of account charts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "List all account charts",
        "tags": [
          "fortnox_AccountCharts"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/accounts": {
      "get": {
        "description": "The accounts are returned sorted by account number with the lowest number appearing first.",
        "operationId": "list_2",
        "parameters": [
          {
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sru",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "field to sort returned list on",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "number"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AccountListItem_Wrap"
                }
              }
            },
            "description": "list of accounts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "List all accounts",
        "tags": [
          "fortnox_Accounts"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "The created account will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "create_1",
        "parameters": [
          {
            "description": "financial year to create account against",
            "in": "query",
            "name": "financialyear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_AccountPayload_Wrap"
              }
            }
          },
          "description": "account to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AccountSingleItem_Wrap"
                }
              }
            },
            "description": "the created account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an account",
        "tags": [
          "fortnox_Accounts"
        ],
        "x-codegen-request-body-name": "accountPayload",
        "x-fn-is-public": "true"
      }
    },
    "/3/accounts/{Number}": {
      "delete": {
        "description": "Deletes the specified account in the users current year",
        "operationId": "removeById",
        "parameters": [
          {
            "description": "account to delete",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Deletes an account",
        "tags": [
          "fortnox_Accounts"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "Retrieves the details of an account. You need to supply the unique account number that was returned when the account was created or retrieved from the list of accounts.",
        "operationId": "get_2",
        "parameters": [
          {
            "description": "identifies the account",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AccountSingleItem_Wrap"
                }
              }
            },
            "description": "the existing account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve an account",
        "tags": [
          "fortnox_Accounts"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Updates the specified account with the values provided in the properties. Any property not provided will be left unchanged.\n Note that even though the account number is writeable you can&acute;t change the number of an existing account.",
        "operationId": "1_update_1",
        "parameters": [
          {
            "description": "identifies the account",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "financial year to update account against",
            "in": "query",
            "name": "financialyear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_AccountPayload_Wrap"
              }
            }
          },
          "description": "account to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AccountSingleItem_Wrap"
                }
              }
            },
            "description": "the updated account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an account",
        "tags": [
          "fortnox_Accounts"
        ],
        "x-codegen-request-body-name": "accountPayload",
        "x-fn-is-public": "true"
      }
    },
    "/3/archive": {
      "delete": {
        "description": "Please note that removing a folder will also resulting in removal of all the contents within!",
        "operationId": "removeByPath",
        "parameters": [
          {
            "description": "identifies file/folder to remove",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove files",
        "tags": [
          "fortnox_Archive"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "If no path is provided the root will be returned.\n Providing fileId will return given file from fileattachments.",
        "operationId": "getFolder",
        "parameters": [
          {
            "description": "name of folder",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "fileId from fileattachments",
            "in": "query",
            "name": "fileid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Folder_Wrap"
                }
              }
            },
            "description": "a single folder"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve folder or file",
        "tags": [
          "fortnox_Archive"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "If not path or folderId is provided, the file will be uploaded to the root directory.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "name of folder",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of folder",
            "in": "query",
            "name": "folderid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "file to uplad",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Folder_FileRow_Wrap"
                }
              }
            },
            "description": "the uploaded file"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Upload a file to a specific subdirectory",
        "tags": [
          "fortnox_Archive"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/archive/{id}": {
      "delete": {
        "operationId": "removeById_1",
        "parameters": [
          {
            "description": "identifies file/folder to remove",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete a single file",
        "tags": [
          "fortnox_Archive"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "Providing fileId will return given file from fileattachments.",
        "operationId": "getFileById",
        "parameters": [
          {
            "description": "identifies the file",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "fileId from fileattachments",
            "in": "query",
            "name": "fileid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "a single file"
          },
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single file",
        "tags": [
          "fortnox_Archive"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/articlefileconnections": {
      "get": {
        "description": "The article file connections register can return a list of records or a single record. By specifying a FileId in the URL, a single record will be returned. Not specifying a FileId will return a list of records.",
        "operationId": "list_3",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleFileConnectionListItem_Wrap"
                }
              }
            },
            "description": "a list of article file connections."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of article file connections",
        "tags": [
          "fortnox_ArticleFileConnections"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "1_create_2",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ArticleFileConnection_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleFileConnection_Wrap"
                }
              }
            },
            "description": "the created article file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an article file connection",
        "tags": [
          "fortnox_ArticleFileConnections"
        ],
        "x-codegen-request-body-name": "articleFileConnection",
        "x-fn-is-public": "true"
      }
    },
    "/3/articlefileconnections/{FileId}": {
      "delete": {
        "operationId": "remove_1",
        "parameters": [
          {
            "description": "identifies the article file connection",
            "in": "path",
            "name": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove an article file connection",
        "tags": [
          "fortnox_ArticleFileConnections"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_3",
        "parameters": [
          {
            "description": "identifies the article file connection",
            "in": "path",
            "name": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleFileConnection_Wrap"
                }
              }
            },
            "description": "the existing article file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single article file connection",
        "tags": [
          "fortnox_ArticleFileConnections"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/articles": {
      "get": {
        "description": "Retrieves a list of articles. The articles are returned sorted by article number with the lowest number appearing first.",
        "operationId": "list_4",
        "parameters": [
          {
            "description": "possibility to filter supplier invoices",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "active",
                "inactive"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter by article number",
            "in": "query",
            "name": "articlenumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by description",
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by ean",
            "in": "query",
            "name": "ean",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by supplier number",
            "in": "query",
            "name": "suppliernumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by manufacturer",
            "in": "query",
            "name": "manufacturer",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by manufacturerarticlenumber",
            "in": "query",
            "name": "manufacturerarticlenumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by web shop",
            "in": "query",
            "name": "webshop",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by lastmodified",
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "field to sort returned list",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "articlenumber",
                "quantityinstock",
                "reservedquantity",
                "stockvalue"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleListItem_List"
                }
              }
            },
            "description": "list of articles"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of articles",
        "tags": [
          "fortnox_Articles"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "The created article will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "1_create_3",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Article_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Article_Wrap"
                }
              }
            },
            "description": "the created article"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an article",
        "tags": [
          "fortnox_Articles"
        ],
        "x-codegen-request-body-name": "article",
        "x-fn-is-public": "true"
      }
    },
    "/3/articles/{ArticleNumber}": {
      "delete": {
        "description": "<p>Deletes the article permanently.</p>\n <p>You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.</p>",
        "operationId": "remove_2",
        "parameters": [
          {
            "description": "identifies the article",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete an article",
        "tags": [
          "fortnox_Articles"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "Retrieves the details of an article. You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.",
        "operationId": "get_4",
        "parameters": [
          {
            "description": "identifies the article",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Article_Wrap"
                }
              }
            },
            "description": "the existing article"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve an article",
        "tags": [
          "fortnox_Articles"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Updates the specified article with the values provided in the properties. Any property not provided will be left unchanged.\n You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.\n Note that even though the article number is writeable you can not change the number of an existing article.",
        "operationId": "1_update_2",
        "parameters": [
          {
            "description": "identifies the article",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Article_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Article_Wrap"
                }
              }
            },
            "description": "the updated article"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an article",
        "tags": [
          "fortnox_Articles"
        ],
        "x-codegen-request-body-name": "article",
        "x-fn-is-public": "true"
      }
    },
    "/3/articleurlconnections": {
      "get": {
        "description": "The article url connections register can return a list of records or a single record. By specifying an id in the URL, a single record will be returned. Not specifying an id will return a list of records.",
        "operationId": "list_6",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleUrlConnectionListItem_List"
                }
              }
            },
            "description": "a list of article url connections"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of article url connections",
        "tags": [
          "fortnox_ArticleUrlConnections"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_5",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ArticleUrlConnection_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleUrlConnection_Wrap"
                }
              }
            },
            "description": "the created article url connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an article url connection",
        "tags": [
          "fortnox_ArticleUrlConnections"
        ],
        "x-codegen-request-body-name": "articleUrlConnection",
        "x-fn-is-public": "true"
      }
    },
    "/3/articleurlconnections/{id}": {
      "delete": {
        "operationId": "remove_4",
        "parameters": [
          {
            "description": "identifies the article url connection",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove an article url connection",
        "tags": [
          "fortnox_ArticleUrlConnections"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_6",
        "parameters": [
          {
            "description": "identifies the article url connection",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleUrlConnection_Wrap"
                }
              }
            },
            "description": "the existing article url connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single article url connection",
        "tags": [
          "fortnox_ArticleUrlConnections"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_4",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ArticleUrlConnection_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ArticleUrlConnection_Wrap"
                }
              }
            },
            "description": "the updated article url connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an article url connection",
        "tags": [
          "fortnox_ArticleUrlConnections"
        ],
        "x-codegen-request-body-name": "articleUrlConnection",
        "x-fn-is-public": "true"
      }
    },
    "/3/assetfileconnections": {
      "get": {
        "description": "The asset register can return a list of assets or a single asset. By specifying a FileId in the URL, a single asset will be returned. Not specifying a FileId will return a list of records.",
        "operationId": "getAll",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AssetFileConnectionResponse"
                }
              }
            },
            "description": "list of asset file connections"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of asset file connections",
        "tags": [
          "fortnox_AssetFileConnection"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_6",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CreateAssetFileConnection"
              }
            }
          },
          "description": "asset file connection"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AssetFileConnection"
                }
              }
            },
            "description": "asset file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an asset file connection",
        "tags": [
          "fortnox_AssetFileConnection"
        ],
        "x-codegen-request-body-name": "assetFileConnection",
        "x-fn-is-public": "true"
      }
    },
    "/3/assetfileconnections/{fileId}": {
      "delete": {
        "operationId": "1_delete",
        "parameters": [
          {
            "description": "fileId",
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove an asset file connection",
        "tags": [
          "fortnox_AssetFileConnection"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/assets": {
      "get": {
        "operationId": "list_7",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ListAsset_Wrap"
                }
              }
            },
            "description": "list of assets"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of assets",
        "tags": [
          "fortnox_Assets"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "The created asset will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "create_7",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CreateAsset_Wrap"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/changeob/{GivenNumber}": {
      "put": {
        "description": "The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "changeOb",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ManualObAsset"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Change manual OB value of an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/depreciate": {
      "post": {
        "description": "The created vouchers list will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "depreciate",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Depreciation_Wrap"
              }
            }
          },
          "description": "body"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_DepreciationResponse_Wrap"
                }
              }
            },
            "description": "response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Perform a Depreciation of an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "body",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/depreciations/{ToDate}": {
      "get": {
        "description": "Retrieves a list of assets to depreciate.",
        "operationId": "getDeprecationList",
        "parameters": [
          {
            "description": "toDate",
            "in": "path",
            "name": "ToDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ListAsset_Wrap"
                }
              }
            },
            "description": "list of assets"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Assets depreciation list",
        "tags": [
          "fortnox_Assets"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/scrap/{GivenNumber}": {
      "put": {
        "description": "The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "scrap",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Scrap_Wrap"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Scrap an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/sell/{GivenNumber}": {
      "put": {
        "description": "Partial sell or full sell of an asset.",
        "operationId": "sell",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Sell_Wrap"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Sell an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/types": {
      "get": {
        "operationId": "getAll_1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AssetType_WrapList"
                }
              }
            },
            "description": "asset types"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of asset types",
        "tags": [
          "fortnox_AssetTypes"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/types/{id}": {
      "delete": {
        "operationId": "delete_2",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete an asset type",
        "tags": [
          "fortnox_AssetTypes"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_8",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AssetType_WrapSingle"
                }
              }
            },
            "description": "asset type"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve an asset type",
        "tags": [
          "fortnox_AssetTypes"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "1_create_8",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CreateAsset_Wrap"
              }
            }
          },
          "description": "request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AssetType_WrapSingle"
                }
              }
            },
            "description": "response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an asset type",
        "tags": [
          "fortnox_AssetTypes"
        ],
        "x-codegen-request-body-name": "createAssetRequest",
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "1_update_6",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_UpdateAsset_UpdateWrap"
              }
            }
          },
          "description": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AssetType_WrapSingle"
                }
              }
            },
            "description": "response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an asset type",
        "tags": [
          "fortnox_AssetTypes"
        ],
        "x-codegen-request-body-name": "updateAssetRequest",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/writedown/{GivenNumber}": {
      "put": {
        "description": "The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "writeDown",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_WriteDown_Wrap"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Write down an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/writeup/{GivenNumber}": {
      "put": {
        "description": "The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "writeUp",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_WriteUp_Wrap"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Write up an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/assets/{GivenNumber}": {
      "delete": {
        "description": "By specifying a {GivenNumber} in the URL a single &quot;Not active&quot; asset or asset with a type &quot;Not depreciable&quot; can be deleted. By specifying a {GivenNumber} in the URL a single &quot;Active&quot; or &quot;Fully depreciated&quot; assets can be voided and in this case in request body voiddate should be provided, otherwise it will use todays date.",
        "operationId": "delete_1",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Delete_Wrap"
              }
            }
          },
          "description": "request"
        },
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete or Void an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "request",
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_7",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "The updated asset will be returned if everything succeeded, if there were any problems an error will be returned.",
        "operationId": "1_update_5",
        "parameters": [
          {
            "description": "Asset number",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_UpdateAsset_Wrap"
              }
            }
          },
          "description": "asset"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Asset_Single"
                }
              }
            },
            "description": "asset"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an Asset",
        "tags": [
          "fortnox_Assets"
        ],
        "x-codegen-request-body-name": "asset",
        "x-fn-is-public": "true"
      }
    },
    "/3/attendancetransactions": {
      "get": {
        "description": "Supports query-string parameters <strong>employeeid</strong> and <strong>date</strong> for filtering the result.",
        "operationId": "list_8",
        "parameters": [
          {
            "description": "filter by employee id",
            "in": "query",
            "name": "employeeid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by date",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AttendanceTransactionListItem_List"
                }
              }
            },
            "description": "a list of attendance transactions"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Lists all attendance transactions",
        "tags": [
          "fortnox_AttendanceTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "1_create_9",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_AttendanceTransaction_Wrap"
              }
            }
          },
          "description": "attendance transaction to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AttendanceTransaction_Wrap"
                }
              }
            },
            "description": "the created attendance transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a new attendance transaction",
        "tags": [
          "fortnox_AttendanceTransactions"
        ],
        "x-codegen-request-body-name": "attendanceTransaction",
        "x-fn-is-public": "true"
      }
    },
    "/3/attendancetransactions/{id}": {
      "delete": {
        "operationId": "remove_5",
        "parameters": [
          {
            "description": "identifies the transaction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AttendanceTransaction_Wrap"
                }
              }
            },
            "description": "empty"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete an attendance transaction",
        "tags": [
          "fortnox_AttendanceTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "Retrieves a specific transaction",
        "operationId": "get_9",
        "parameters": [
          {
            "description": "identifies the transaction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AttendanceTransaction_Wrap"
                }
              }
            },
            "description": "the attendance transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific attendance transaction",
        "tags": [
          "fortnox_AttendanceTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_7",
        "parameters": [
          {
            "description": "identifies the transaction",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_AttendanceTransaction_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AttendanceTransaction_Wrap"
                }
              }
            },
            "description": "the updated attendance transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a single attendance transaction",
        "tags": [
          "fortnox_AttendanceTransactions"
        ],
        "x-codegen-request-body-name": "attendanceTransaction",
        "x-fn-is-public": "true"
      }
    },
    "/3/attendancetransactions/{id}/{Date}/{Code}": {
      "get": {
        "description": "Retrieves a list of attendance transaction for an employee on a specific date and cause code.",
        "operationId": "get_10",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "date of the attendance",
            "in": "path",
            "name": "Date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "status code of the attendance transaction",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "enum": [
                "ARB",
                "BE2",
                "BER",
                "FLX",
                "HLG",
                "JO2",
                "JOR",
                "MER",
                "OB1",
                "OB2",
                "OB3",
                "OB4",
                "OB5",
                "OK0",
                "OK1",
                "OK2",
                "OK3",
                "OK4",
                "OK5",
                "OT1",
                "OT2",
                "OT3",
                "OT4",
                "OT5",
                "RES",
                "TID"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_AttendanceTransactionListItem_List"
                }
              }
            },
            "description": "a list of attendance transactions"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve attendance transactions",
        "tags": [
          "fortnox_AttendanceTransactions"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/companyinformation": {
      "get": {
        "operationId": "1_get_11",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CompanyInfo_Wrap"
                }
              }
            },
            "description": "company information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve the Company Information",
        "tags": [
          "fortnox_CompanyInformation"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/contractaccruals": {
      "get": {
        "description": "The contract accruals register can return a list of records or a single record. By specifying a DocumentNumber in the URL, a single record will be returned. Not specifying a DocumentNumber will return a list of records.",
        "operationId": "list_9",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractAccrualListItem_List"
                }
              }
            },
            "description": "list of contract accruals"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of contract accruals",
        "tags": [
          "fortnox_ContractAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_10",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ContractAccrual_Wrap"
              }
            }
          },
          "description": "contract accrual to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractAccrual_Wrap"
                }
              }
            },
            "description": "the created contract accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a contract accrual",
        "tags": [
          "fortnox_ContractAccruals"
        ],
        "x-codegen-request-body-name": "contractAccrual",
        "x-fn-is-public": "true"
      }
    },
    "/3/contractaccruals/{DocumentNumber}": {
      "delete": {
        "operationId": "remove_6",
        "parameters": [
          {
            "description": "identifies the contract accrual",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a contract accrual",
        "tags": [
          "fortnox_ContractAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_13",
        "parameters": [
          {
            "description": "identifies the contract accrual",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractAccrual_Wrap"
                }
              }
            },
            "description": "the existing contract accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single contract accrual",
        "tags": [
          "fortnox_ContractAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_8",
        "parameters": [
          {
            "description": "identifies the contract accrual",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ContractAccrual_Wrap"
              }
            }
          },
          "description": "contract accrual to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractAccrual_Wrap"
                }
              }
            },
            "description": "the updated contract accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a contract accrual",
        "tags": [
          "fortnox_ContractAccruals"
        ],
        "x-codegen-request-body-name": "contractAccrual",
        "x-fn-is-public": "true"
      }
    },
    "/3/contracts": {
      "get": {
        "operationId": "list_10",
        "parameters": [
          {
            "description": "possibility to filter contracts",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "active",
                "inactive",
                "finished"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractListItem_List"
                }
              }
            },
            "description": "list of contracts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of contracts",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "1_create_11",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Contract_Wrap"
              }
            }
          },
          "description": "contract to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Contract_Wrap"
                }
              }
            },
            "description": "the created contract"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a contract",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-codegen-request-body-name": "contract",
        "x-fn-is-public": "true"
      }
    },
    "/3/contracts/{DocumentNumber}": {
      "get": {
        "operationId": "get_14",
        "parameters": [
          {
            "description": "identifies the contract",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Contract_Wrap"
                }
              }
            },
            "description": "the existing contract"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single contract",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Note that there are two approaches for updating the rows on a contract.\n\n If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the contract needs to be provided.\n\n If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the contract then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time a contract is updated.\n\n When the InvoiceDiscount value is set on the rows and the Contract, the value set on the Contract takes precedence over the row-level InvoiceDiscount.",
        "operationId": "update_9",
        "parameters": [
          {
            "description": "identifies the contract",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Contract_Wrap"
              }
            }
          },
          "description": "contract to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Contract_Wrap"
                }
              }
            },
            "description": "the updated contract"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a contract",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-codegen-request-body-name": "contract",
        "x-fn-is-public": "true"
      }
    },
    "/3/contracts/{DocumentNumber}/createinvoice": {
      "put": {
        "operationId": "createinvoice",
        "parameters": [
          {
            "description": "identifies the contract",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "created invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create invoice from contract",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/contracts/{DocumentNumber}/finish": {
      "put": {
        "operationId": "finish",
        "parameters": [
          {
            "description": "identifies the contract",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Contract_Wrap"
                }
              }
            },
            "description": "the updated contract"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Set a contract as finished",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/contracts/{DocumentNumber}/increaseinvoicecount": {
      "put": {
        "operationId": "increaseinvoicecount",
        "parameters": [
          {
            "description": "identifies the contract",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Contract_Wrap"
                }
              }
            },
            "description": "the updated contract"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Increases the invoice count without creating an invoice",
        "tags": [
          "fortnox_Contracts"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/contracttemplates": {
      "get": {
        "description": "The contract template resource can return a list of records or a single record. By specifying a TemplateNumber in the URL, a single record will be returned. Not specifying a TemplateNumber will return a list of records.",
        "operationId": "list_11",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractTemplateListItem_List"
                }
              }
            },
            "description": "list of contract templates"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of contract templates",
        "tags": [
          "fortnox_ContractTemplates"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_12",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ContractTemplate_Wrap"
              }
            }
          },
          "description": "contract template to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractTemplate_Wrap"
                }
              }
            },
            "description": "the created contract template"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a contract template",
        "tags": [
          "fortnox_ContractTemplates"
        ],
        "x-codegen-request-body-name": "contractTemplate",
        "x-fn-is-public": "true"
      }
    },
    "/3/contracttemplates/{TemplateNumber}": {
      "get": {
        "operationId": "get_15",
        "parameters": [
          {
            "description": "identifies the contract template",
            "in": "path",
            "name": "TemplateNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractTemplate_Wrap"
                }
              }
            },
            "description": "the existing contract template"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single contract template",
        "tags": [
          "fortnox_ContractTemplates"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_10",
        "parameters": [
          {
            "description": "identifies the contract template",
            "in": "path",
            "name": "TemplateNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ContractTemplate_Wrap"
              }
            }
          },
          "description": "contract template to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ContractTemplate_Wrap"
                }
              }
            },
            "description": "the updated contract template"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a contract template",
        "tags": [
          "fortnox_ContractTemplates"
        ],
        "x-codegen-request-body-name": "contractTemplate",
        "x-fn-is-public": "true"
      }
    },
    "/3/costcenters": {
      "get": {
        "description": "The cost centers register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_12",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CostCenter_List"
                }
              }
            },
            "description": "a list of cost centers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of cost centers",
        "tags": [
          "fortnox_CostCenters"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_13",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CostCenter_Wrap"
              }
            }
          },
          "description": "cost center to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CostCenter_Wrap"
                }
              }
            },
            "description": "the created cost center"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a cost center",
        "tags": [
          "fortnox_CostCenters"
        ],
        "x-codegen-request-body-name": "costCenter",
        "x-fn-is-public": "true"
      }
    },
    "/3/costcenters/{Code}": {
      "delete": {
        "operationId": "remove_7",
        "parameters": [
          {
            "description": "identifies the cost center to remove",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a cost center",
        "tags": [
          "fortnox_CostCenters"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "1_get_16",
        "parameters": [
          {
            "description": "identifies the cost center",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CostCenter_Wrap"
                }
              }
            },
            "description": "the existing cost center"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single cost center",
        "tags": [
          "fortnox_CostCenters"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_11",
        "parameters": [
          {
            "description": "identifies the cost center",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CostCenter_Wrap"
              }
            }
          },
          "description": "cost center to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CostCenter_Wrap"
                }
              }
            },
            "description": "the updated cost center"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a cost center",
        "tags": [
          "fortnox_CostCenters"
        ],
        "x-codegen-request-body-name": "costCenter",
        "x-fn-is-public": "true"
      }
    },
    "/3/currencies": {
      "get": {
        "description": "The currency register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_13",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Currency_List"
                }
              }
            },
            "description": "a list of currencies"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of currencies",
        "tags": [
          "fortnox_Currencies"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_14",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Currency_Wrap"
              }
            }
          },
          "description": "currency to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Currency_Wrap"
                }
              }
            },
            "description": "the created currency"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a currency",
        "tags": [
          "fortnox_Currencies"
        ],
        "x-codegen-request-body-name": "currency",
        "x-fn-is-public": "true"
      }
    },
    "/3/currencies/{Code}": {
      "delete": {
        "operationId": "remove_8",
        "parameters": [
          {
            "description": "identifies the currency",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a currency",
        "tags": [
          "fortnox_Currencies"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_17",
        "parameters": [
          {
            "description": "identifies currency",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Currency_Wrap"
                }
              }
            },
            "description": "the existing currency"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single currency",
        "tags": [
          "fortnox_Currencies"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_12",
        "parameters": [
          {
            "description": "identifies the currency",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Currency_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Currency_Wrap"
                }
              }
            },
            "description": "the updated currency"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a currency",
        "tags": [
          "fortnox_Currencies"
        ],
        "x-codegen-request-body-name": "currency",
        "x-fn-is-public": "true"
      }
    },
    "/3/customerreferences": {
      "get": {
        "description": "</p>",
        "operationId": "list_14",
        "parameters": [
          {
            "description": "possibility to filter by customer number",
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CustomerReference_Wrap"
                }
              }
            },
            "description": "list of customers reference rows"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of customers reference rows",
        "tags": [
          "fortnox_CustomerReferences"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "</p>\n <p>The created customer reference row will be returned if everything succeeded, if there was any problems an error will be returned.</p>",
        "operationId": "create_15",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CustomerReference_CustomerReferenceRow_Wrap"
              }
            }
          },
          "description": "customer reference row to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CustomerReference_Wrap"
                }
              }
            },
            "description": "the created customer reference row"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a customer reference row",
        "tags": [
          "fortnox_CustomerReferences"
        ],
        "x-codegen-request-body-name": "customerReferenceRow",
        "x-fn-is-public": "true"
      }
    },
    "/3/customerreferences/{CustomerReferenceRowId}": {
      "delete": {
        "description": "</p>\n <p>Deletes the customer reference row permanently. If everything succeeded the response will be of the type 204, No content and the response body will be empty.</p>\n <p>If there was any problems an error will be returned.</p>\n <p>You need to supply the unique customer reference row id of the customer reference row that you want to delete.</p>",
        "operationId": "remove_9",
        "parameters": [
          {
            "description": "identifies the customer reference row",
            "in": "path",
            "name": "CustomerReferenceRowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete a customer reference row",
        "tags": [
          "fortnox_CustomerReferences"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "</p>\n <p>You need to supply the unique customer reference row id that was returned when the customer reference row was created or retrieved from the list of customer reference rows.</p>",
        "operationId": "get_18",
        "parameters": [
          {
            "description": "identifies the customer reference row",
            "in": "path",
            "name": "CustomerReferenceRowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CustomerReference_Wrap"
                }
              }
            },
            "description": "the existing customer reference row"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a customer reference row",
        "tags": [
          "fortnox_CustomerReferences"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "</p>\n <p>The updated customer reference row will be returned if everything succeeded, if there was any problems an error will be returned.</p>\n <p>You need to supply the unique customer reference row id of the customer reference row that you want to update.</p>\n <p>Only the properties provided in the request body will be updated, properties not provided will be left unchanged.</p>\n <p>CustomerNumber cannot be changed by this request.</p>",
        "operationId": "update_13",
        "parameters": [
          {
            "description": "identifies the customer reference row",
            "in": "path",
            "name": "CustomerReferenceRowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CustomerReference_CustomerReferenceRow_Wrap"
              }
            }
          },
          "description": "customer reference row to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Customer_Wrap"
                }
              }
            },
            "description": "the updated customer reference row"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a customer reference row",
        "tags": [
          "fortnox_CustomerReferences"
        ],
        "x-codegen-request-body-name": "customerReferenceRow",
        "x-fn-is-public": "true"
      }
    },
    "/3/customers": {
      "get": {
        "description": "The customers are returned sorted by customer number with the lowest number appearing first.",
        "operationId": "list_15",
        "parameters": [
          {
            "description": "possibility to filter customers",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "active",
                "inactive"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter by customer number",
            "in": "query",
            "name": "customernumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by zip code",
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by city",
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by email",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by phone",
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by organisation number",
            "in": "query",
            "name": "organisationnumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by gln",
            "in": "query",
            "name": "gln",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by gln delivery",
            "in": "query",
            "name": "glndelivery",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by last modified",
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "field to sort returned list",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "customernumber",
                "name"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CustomerListItem_List"
                }
              }
            },
            "description": "list of customers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of customers",
        "tags": [
          "fortnox_Customers"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "The created customer will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "create_16",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Customer_Wrap"
              }
            }
          },
          "description": "customer to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Customer_Wrap"
                }
              }
            },
            "description": "the created customer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a customer",
        "tags": [
          "fortnox_Customers"
        ],
        "x-codegen-request-body-name": "customer",
        "x-fn-is-public": "true"
      }
    },
    "/3/customers/{CustomerNumber}": {
      "delete": {
        "description": "Deletes the customer permanently. If everything succeeded the response will be of the type 204 \\u2013 No content and the response body will be empty. If there was any problems an error will be returned.\n You need to supply the unique customer number of the customer that you want to delete.",
        "operationId": "remove_10",
        "parameters": [
          {
            "description": "identifies the customer",
            "in": "path",
            "name": "CustomerNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete a customer",
        "tags": [
          "fortnox_Customers"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "You need to supply the unique customer number that was returned when the customer was created or retrieved from the list of customers.",
        "operationId": "get_19",
        "parameters": [
          {
            "description": "identifies the customer",
            "in": "path",
            "name": "CustomerNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Customer_Wrap"
                }
              }
            },
            "description": "the existing customer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a customer",
        "tags": [
          "fortnox_Customers"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "<p>The updated customer will be returned if everything succeeded, if there was any problems an error will be returned.</p>\n <p>You need to supply the unique customer number of the customer that you want to update.</p>\n <p>Only the properties provided in the request body will be updated, properties not provided will left unchanged.</p>",
        "operationId": "update_14",
        "parameters": [
          {
            "description": "identifies the customer",
            "in": "path",
            "name": "CustomerNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Customer_Wrap"
              }
            }
          },
          "description": "customer to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Customer_Wrap"
                }
              }
            },
            "description": "the updated customer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a customer",
        "tags": [
          "fortnox_Customers"
        ],
        "x-codegen-request-body-name": "customer",
        "x-fn-is-public": "true"
      }
    },
    "/3/emailsenders": {
      "get": {
        "operationId": "get_53",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TrustedEmailSender_Wrap"
                }
              }
            },
            "description": "all trusted and rejected email senders"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of all trusted and rejected senders",
        "tags": [
          "fortnox_TrustedEmailSenders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/emailsenders/trusted": {
      "post": {
        "operationId": "create_44",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TrustedEmailSender_TrustedSender_Wrap"
              }
            }
          },
          "description": "trusted email sender to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TrustedEmailSender_TrustedSender_Wrap"
                }
              }
            },
            "description": "the created trusted email sender"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Add a new email address as trusted",
        "tags": [
          "fortnox_TrustedEmailSenders"
        ],
        "x-codegen-request-body-name": "trustedEmailSender",
        "x-fn-is-public": "true"
      }
    },
    "/3/emailsenders/trusted/{Id}": {
      "delete": {
        "description": "Provide an id matching an email to delete.",
        "operationId": "remove_23",
        "parameters": [
          {
            "description": "identifies the trusted email sender to delete",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete an email address from the trusted senders list",
        "tags": [
          "fortnox_TrustedEmailSenders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/employees": {
      "get": {
        "description": "ScheduleId, MonthlySalary and HourlyPay reflect current values, all\n ScheduleIds are returned in DatedSchedules and all MonthlySalary and\n HourlyPay pairs are returned in DatedWages.",
        "operationId": "list_16",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_EmployeeListItem_Wrap"
                }
              }
            },
            "description": "list of employees"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of employees",
        "tags": [
          "fortnox_Employees"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "EmployeeId is optional. If not supplied the program will generate a unique id.\n \n VacationDaysSaved and all registered and pending vacationdays are read only.\n \n Only one of DatedSchedules and ScheduleId may be supplied. If DatedSchedules are supplied\n it must have one and only one record where FirstDay = '1970-01-01'.\n All FirstDay values must greater or equal to '1970-01-01' and unique.\n\n If DatedWages is supplied neither MonthlySalary nor HourlyPay may be supplied. If\n MonthlySalary or HourlyPay are supplied, DatedWages may not be supplied.\n If DatedWages are supplied it must have one and only one record where FirstDay = '1970-01-01'.\n All FirstDay values must greater or equal to '1970-01-01' and unique.",
        "operationId": "create_17",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Employee_Wrap"
              }
            }
          },
          "description": "employee to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Employee_Wrap"
                }
              }
            },
            "description": "the created employee"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a new employee",
        "tags": [
          "fortnox_Employees"
        ],
        "x-codegen-request-body-name": "employee",
        "x-fn-is-public": "true"
      }
    },
    "/3/employees/{EmployeeId}": {
      "get": {
        "description": "ScheduleId, MonthlySalary and HourlyPay reflect current values, all\n ScheduleIds are returned in DatedSchedules and all MonthlySalary and\n HourlyPay pairs are returned in DatedWages.",
        "operationId": "get_20",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "EmployeeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Employee_Wrap"
                }
              }
            },
            "description": "the existing employee"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific employee",
        "tags": [
          "fortnox_Employees"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Only one of DatedSchedules and ScheduleId may be supplied. If DatedSchedules are supplied\n it must have one and only one record where FirstDay = '1970-01-01'.\n All FirstDay values must greater or equal to '1970-01-01' and unique.\n \n VacationDaysSaved and all registered and pending vacationdays are read only.\n\n If DatedWages is supplied neither MonthlySalary nor HourlyPay may be supplied. If\n MonthlySalary or HourlyPay are supplied, DatedWages may not be supplied.\n If DatedWages are supplied it must have one and only one record where FirstDay = '1970-01-01'.\n All FirstDay values must greater or equal to '1970-01-01' and unique.",
        "operationId": "update_15",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "EmployeeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Employee_Wrap"
              }
            }
          },
          "description": "employee to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Employee_Wrap"
                }
              }
            },
            "description": "the updated employee"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update employee",
        "tags": [
          "fortnox_Employees"
        ],
        "x-codegen-request-body-name": "employee",
        "x-fn-is-public": "true"
      }
    },
    "/3/euvatlimitregulation": {
      "get": {
        "operationId": "get_21",
        "parameters": [
          {
            "description": "eu vat limit regulation for year, if not provided than this will be set to current year",
            "in": "query",
            "name": "year",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_EUVatLimitRegulation_Wrap"
                }
              }
            },
            "description": "eu vat limit regulation entry"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve details about eu vat limit",
        "tags": [
          "fortnox_EUVatLimitRegulation"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/expenses": {
      "get": {
        "description": "Retrieve expense codes.",
        "operationId": "list_17",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ExpenseListItem_Wrap"
                }
              }
            },
            "description": "expense"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve expenses",
        "tags": [
          "fortnox_Expenses"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_18",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Expense_Wrap"
              }
            }
          },
          "description": "expense to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Expense_Wrap"
                }
              }
            },
            "description": "expense"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an expense",
        "tags": [
          "fortnox_Expenses"
        ],
        "x-codegen-request-body-name": "expense",
        "x-fn-is-public": "true"
      }
    },
    "/3/expenses/{ExpenseCode}": {
      "get": {
        "description": "Retrieves expense information for specified expense.",
        "operationId": "get_22",
        "parameters": [
          {
            "description": "expenseCode",
            "in": "path",
            "name": "ExpenseCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Expense_Wrap"
                }
              }
            },
            "description": "list of expenses"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve an expense",
        "tags": [
          "fortnox_Expenses"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/financialyears": {
      "get": {
        "description": "Add the query param to filter on specific date.",
        "operationId": "getByDate",
        "parameters": [
          {
            "description": "date to filter on, for example 2020-06-30",
            "in": "query",
            "name": "Date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_FinancialYear_WrapList"
                }
              }
            },
            "description": "the existing financial year"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of financial years",
        "tags": [
          "fortnox_FinancialYears"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_20",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_FinancialYear_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_FinancialYear_Wrap"
                }
              }
            },
            "description": "the created year"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a financial year",
        "tags": [
          "fortnox_FinancialYears"
        ],
        "x-codegen-request-body-name": "financialYear",
        "x-fn-is-public": "true"
      }
    },
    "/3/financialyears/{Id}": {
      "get": {
        "operationId": "getById",
        "parameters": [
          {
            "description": "identifies the year",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_FinancialYear_Wrap"
                }
              }
            },
            "description": "the existing financial year"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve financial year by id",
        "tags": [
          "fortnox_FinancialYears"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/inbox": {
      "get": {
        "operationId": "get_24",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Folder_Wrap"
                }
              }
            },
            "description": "the root folder"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve the root folder containing files and folders",
        "tags": [
          "fortnox_Inbox"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "Upload a file to a specific subdirectory.",
        "operationId": "upload",
        "parameters": [
          {
            "description": "folder id",
            "in": "query",
            "name": "folderId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "path",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "file",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Folder_FileRow_Wrap"
                }
              }
            },
            "description": "file file"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Upload a file",
        "tags": [
          "fortnox_Inbox"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/inbox/{Id}": {
      "delete": {
        "operationId": "remove_11",
        "parameters": [
          {
            "description": "identifies the file to remove",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a file or folder",
        "tags": [
          "fortnox_Inbox"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "getFileById_1",
        "parameters": [
          {
            "description": "identifies the folder",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "a single file"
          },
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single file",
        "tags": [
          "fortnox_Inbox"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoiceaccruals": {
      "get": {
        "description": "The invoice accruals register can return a list of records or a single record. By specifying a InvoiceNumber in the URL, a single record will be returned. Not specifying a InvoiceNumber will return a list of records.",
        "operationId": "list_18",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceAccrualListItem_List"
                }
              }
            },
            "description": "list of invoice accruals"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of invoice accruals",
        "tags": [
          "fortnox_InvoiceAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_21",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoiceAccrual_Wrap"
              }
            }
          },
          "description": "invoice accrual to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceAccrual_Wrap"
                }
              }
            },
            "description": "the created invoice accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an invoice accrual",
        "tags": [
          "fortnox_InvoiceAccruals"
        ],
        "x-codegen-request-body-name": "invoiceAccrual",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoiceaccruals/{InvoiceNumber}": {
      "delete": {
        "operationId": "remove_12",
        "parameters": [
          {
            "description": "identifies the invoice accrual",
            "in": "path",
            "name": "InvoiceNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove an invoice accrual",
        "tags": [
          "fortnox_InvoiceAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_25",
        "parameters": [
          {
            "description": "identifies the invoice accrual",
            "in": "path",
            "name": "InvoiceNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceAccrual_Wrap"
                }
              }
            },
            "description": "the existing invoice accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single invoice accrual",
        "tags": [
          "fortnox_InvoiceAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_16",
        "parameters": [
          {
            "description": "identifies the invoice accrual",
            "in": "path",
            "name": "InvoiceNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoiceAccrual_Wrap"
              }
            }
          },
          "description": "invoice accrual to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceAccrual_Wrap"
                }
              }
            },
            "description": "the updated invoice accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an invoice accrual",
        "tags": [
          "fortnox_InvoiceAccruals"
        ],
        "x-codegen-request-body-name": "invoiceAccrual",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoicepayments": {
      "get": {
        "operationId": "list_19",
        "parameters": [
          {
            "description": "filter by invoice number",
            "in": "query",
            "name": "invoicenumber",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "filter by last modified",
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "field to sort returned list on",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "paymentdate"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoicePaymentListItem_List"
                }
              }
            },
            "description": "list of invoice payments"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of invoice payments",
        "tags": [
          "fortnox_InvoicePayments"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_22",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
              }
            }
          },
          "description": "invoice payment to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
                }
              }
            },
            "description": "the created invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an invoice payment",
        "tags": [
          "fortnox_InvoicePayments"
        ],
        "x-codegen-request-body-name": "invoicePayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoicepayments/{Number}": {
      "delete": {
        "operationId": "remove_13",
        "parameters": [
          {
            "description": "identifies the invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove an invoice payment",
        "tags": [
          "fortnox_InvoicePayments"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_26",
        "parameters": [
          {
            "description": "identifies the invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
                }
              }
            },
            "description": "the existing invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single invoice payment",
        "tags": [
          "fortnox_InvoicePayments"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_17",
        "parameters": [
          {
            "description": "identifies the invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
              }
            }
          },
          "description": "invoice payment to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
                }
              }
            },
            "description": "the updated invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an invoice payment",
        "tags": [
          "fortnox_InvoicePayments"
        ],
        "x-codegen-request-body-name": "invoicePayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoicepayments/{Number}/bookkeep": {
      "put": {
        "operationId": "bookkeep",
        "parameters": [
          {
            "description": "identifies the invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
              }
            }
          },
          "description": "invoice payment to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoicePayment_Wrap"
                }
              }
            },
            "description": "the updated invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Bookkeep an invoice payment",
        "tags": [
          "fortnox_InvoicePayments"
        ],
        "x-codegen-request-body-name": "invoicePayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices": {
      "get": {
        "operationId": "list_20",
        "parameters": [
          {
            "description": "possibility to filter invoices",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "cancelled",
                "fullypaid",
                "unpaid",
                "unpaidoverdue",
                "unbooked"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "costcenter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customername",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customernumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "documentnumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fromdate",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "todate",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fromfinalpaydate",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tofinalpaydate",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "notcompleted",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ocr",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ourreference",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "project",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sent",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "externalinvoicereference1",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "externalinvoicereference2",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "yourreference",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "invoicetype",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "articlenumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "articledescription",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountnumberfrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountnumberto",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "yourordernumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "credit",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "field to sort returned list on",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "customername",
                "customernumber",
                "documentnumber",
                "invoicedate",
                "ocr",
                "total"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceListItem_Wrap"
                }
              }
            },
            "description": "list of invoices"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of invoices",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "An endpoint for creating an invoice. While it is possible to create an invoice without rows, we encourage you to add them if you can.\n Omitted values in the payload will be supplied by Predefined values which can be edited in the Fortnox account settings.\n Note that Predefined values will always be overwritten by values provided through the API.\n\n Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.\n\n This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.\n <table>\n <caption>Errors that can be raised by this endpoint.</caption>\n \t\t<tr>\n \t\t\t<th>Error Code</th>\n \t\t\t<th>HTTP Code</th>\n \t\t\t<th>Description</th>\n \t\t\t<th>Solution</th>\n \t\t</tr>\n \t\t<tr>\n \t\t\t<td>2004167</td>\n \t\t\t<td>400</td>\n \t\t\t<td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>\n \t\t\t<td>Supply each row which has a custom VAT rate with an account.</td>\n \t\t</tr>\n </table>\n\n Note: The <b>EuQuarterlyReport</b> property will become obsolete at 2021-12-01.\n This property is currently used by the <b>Quarterly</b> report as one of the conditions that determine if an invoice\n should be included in the report or not.\n A new version of the <b>Quarterly</b> report is released at 2021-12-01. In the new report, this property will not be\n used when determining if an invoice should be included in the report or not, with one exception: if the invoice\n is created before 2021-12-01, and this property is false, the invoice will be excluded from the report.\n For invoices created 2021-12-01 and later, this property will have no effect.",
        "operationId": "create_23",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoicePayload_Wrap"
              }
            }
          },
          "description": "payload"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the created invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-codegen-request-body-name": "invoicePayload",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}": {
      "get": {
        "operationId": "get_27",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the existing invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Note that there are two approaches for updating the rows on an invoice.\n\n If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the invoice needs to be provided.\n\n If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the invoice then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an invoice is updated.\n\n Note: The <b>EuQuarterlyReport</b> property will become obsolete at 2021-12-01.\n This property is currently used by the <b>Quarterly</b> report as one of the conditions that determine if an invoice\n should be included in the report or not.\n A new version of the <b>Quarterly</b> report is released at 2021-12-01. In the new report, this property will not be\n used when determining if an invoice should be included in the report or not, with one exception: if the invoice\n is created before 2021-12-01, and this property is false, the invoice will be excluded from the report.\n For invoices created 2021-12-01 and later, this property will have no effect.",
        "operationId": "update_18",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_InvoicePayload_Wrap"
              }
            }
          },
          "description": "payload"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the updated invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-codegen-request-body-name": "invoicePayload",
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/bookkeep": {
      "put": {
        "operationId": "bookkeep_1",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the updated invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Bookkeep an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/cancel": {
      "put": {
        "operationId": "cancel",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the updated invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Cancel an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/credit": {
      "put": {
        "description": "The created credit invoice will be referenced in the property CreditInvoiceReference.",
        "operationId": "credit",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the updated invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Credit an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/einvoice": {
      "get": {
        "operationId": "eInvoice",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "sent invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Send an invoice as e-invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/email": {
      "get": {
        "description": "You can use the properties in the EmailInformation to customize the e-mail message on each invoice.",
        "operationId": "email",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "sent invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Send an invoice as email",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/eprint": {
      "get": {
        "operationId": "ePrint",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "sent invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Send an invoice as e-print",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/externalprint": {
      "put": {
        "description": "Use this endpoint to set invoice as sent, without generating an invoice.",
        "operationId": "externalPrint",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the updated invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Set an invoice as sent",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/preview": {
      "get": {
        "description": "The difference between this and the print-endpoint is that property Sent is not set to TRUE.",
        "operationId": "preview",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the invoice as PDF"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Preview an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/print": {
      "get": {
        "operationId": "print",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the invoice as PDF"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Print an invoice",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/printreminder": {
      "get": {
        "operationId": "printReminder",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the invoice as PDF"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Print an invoice as reminder",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/invoices/{DocumentNumber}/warehouseready": {
      "put": {
        "description": "Used for marking a document as ready in the warehouse module. DeliveryState needs to be set to &quot;delivery&quot;.",
        "operationId": "warehouseReady",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the updated invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Set an invoice as done",
        "tags": [
          "fortnox_Invoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/labels": {
      "get": {
        "operationId": "list_22",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Label_List"
                }
              }
            },
            "description": "list of labels"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of labels",
        "tags": [
          "fortnox_Labels"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "The created label will be returned if everything succeeded, if there was any problems an error will be returned.",
        "operationId": "create_25",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Label_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Label_Wrap"
                }
              }
            },
            "description": "the created label"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a label",
        "tags": [
          "fortnox_Labels"
        ],
        "x-codegen-request-body-name": "label",
        "x-fn-is-public": "true"
      }
    },
    "/3/labels/{Id}": {
      "delete": {
        "description": "Deletes the label and its connection to documents permanently.\n You need to supply the unique label id that was returned when the label was created or retrieved from the list of labels.",
        "operationId": "remove_14",
        "parameters": [
          {
            "description": "identifies the label",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete a label",
        "tags": [
          "fortnox_Labels"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Updates the specified label with the values provided in the properties. Any property not provided will be left unchanged.",
        "operationId": "update_20",
        "parameters": [
          {
            "description": "identifies the label",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Label_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Label_Wrap"
                }
              }
            },
            "description": "the updated label"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a label",
        "tags": [
          "fortnox_Labels"
        ],
        "x-codegen-request-body-name": "label",
        "x-fn-is-public": "true"
      }
    },
    "/3/me": {
      "get": {
        "operationId": "get_30",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Me_Wrap"
                }
              }
            },
            "description": "user information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve user information\n Use this endpoint to retrieve user information related to the used access token",
        "tags": [
          "fortnox_Me"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/modesofpayments": {
      "get": {
        "description": "The modes of payments register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_23",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ModeOfPayment_List"
                }
              }
            },
            "description": "a list of modes of payments."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of modes of payments",
        "tags": [
          "fortnox_ModesOfPayments"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_26",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ModeOfPayment_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ModeOfPayment_Wrap"
                }
              }
            },
            "description": "the created mode of payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a mode of payment",
        "tags": [
          "fortnox_ModesOfPayments"
        ],
        "x-codegen-request-body-name": "modeOfPayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/modesofpayments/{Code}": {
      "delete": {
        "operationId": "remove_15",
        "parameters": [
          {
            "description": "identifies the mode of payment",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a mode of payment",
        "tags": [
          "fortnox_ModesOfPayments"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_31",
        "parameters": [
          {
            "description": "identifies the mode of payment",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ModeOfPayment_Wrap"
                }
              }
            },
            "description": "the existing mode of payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single mode of payment",
        "tags": [
          "fortnox_ModesOfPayments"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_21",
        "parameters": [
          {
            "description": "identifies the mode of payment",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ModeOfPayment_Wrap"
              }
            }
          },
          "description": "mode of payment to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ModeOfPayment_Wrap"
                }
              }
            },
            "description": "the updated mode of payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a mode of payment",
        "tags": [
          "fortnox_ModesOfPayments"
        ],
        "x-codegen-request-body-name": "unit",
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices": {
      "post": {
        "description": "<p>\n When sending an invoice with Fortnox Finans you will get the invoice status returned if everything succeeded,\n if there were any problems, an error will be returned.\n <p>\n Please note that it can take 1 min to several hours before you will get back status, OCR number and link to\n PDF document, meanwhile the invoice will have status UNKNOWN or NOT_AUTHORIZED.\n <p>\n Fortnox Finans is currently only accepting invoices in SEK\n <p>\n <i>Parameters in the body:</i>\n <ul>\n     <li><b>InvoiceNumber</b>: the invoice number for the invoice which should be sent with Fortnox Finans</li>\n     <li><b>SendMethod</b>: how to send the invoice; EMAIL, LETTER, EINVOICE or NONE</li>\n     <li><b>Service</b>: which service to use; LEDGERBASE or REMINDER</li>\n </ul>\n <p>",
        "operationId": "create_19",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_CreatePayload_Wrap"
              }
            }
          },
          "description": "The payload for sending an invoice with  Fortnox Finans"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice\n <i>Response parameters:</i>\n <p>\n <ul>\n     <li>@url: the URL used to retrieve the invoice status</li>\n     <li>BalanceIncludeFees: the current balance of the invoice, fees included (in SEK)</li>\n     <li>BalanceIncludeFeesCurrency: the current balance of the invoice, fees included, in other currency (currently only SEK is available)</li>\n     <li>CurrentCapitalBalance: capital amount balance (in SEK)</li>\n     <li>CurrentCapitalBalanceCurrency: capital amount balance in other currency (currently only SEK is available)</li>\n     <li>InvoiceDocumentURL: URL to PDF document for invoice</li>\n     <li>InvoiceNumber: invoice number in Fortnox</li>\n     <li>NextEvent: the next event for the invoice</li>\n     <li>NextEventDate: the date when the next event for the invoice will occur</li>\n     <li>OCRNumber: the OCR number of the invoice</li>\n     <li>Service: the service used for the invoice (LEDGERBASE or REMINDER)</li>\n     <li>ServiceName: the detailed service name used for the invoice (SERVICE_FULL, SERVICE_LIGHT or REMINDER_SERVICE, this field is omitted if the invoice is sent with the old Noxbox service)</li>\n     <li>Status: the current status of the invoice</li>\n </ul>\n <i>status</i> can be one of the following:\n <ul>\n     <li>UNKNOWN: Not yet confirmed by Fortnox Finans</li>\n     <li>NOT_AUTHORIZED: Factoring invoice waiting approval</li>\n     <li>OPEN: invoice is open, and not fully paid yet</li>\n     <li>PAUSED: invoice is paused</li>\n     <li>CLOSED: invoice is closed (fully paid, credited or cancelled)</li>\n </ul>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Send an invoice with Fortnox Finans",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-codegen-request-body-name": "payload",
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices/{Number}": {
      "get": {
        "description": "<p>\n Retrieves the status and balance of an invoice sent to Fortnox Finans.\n You need to supply the invoice number in Fortox to retrieve the invoice.\n <p>\n <b>Note that</b> invoices sent with the old &quot;Noxbox&quot; platform will not have the &quot;ServiceName&quot;\n property in the response. This new property is added to the response if the invoice is\n sent with the new finance service.\n <p>\n Response explanation for <b>Service</b> and <b>ServiceName</b>\n <p>\n <b>Service:</b>\n <ul>\n     <li><b>LEDGERBASE</b>: if the invoice is sent by using the old &quot;Noxbox&quot; platform, or the new finance service with the subtypes &quot;Service Full&quot; or &quot;Service Light&quot;. These services are explained above in the &quot;Fortnox Finans services&quot; section</li>\n     <li><b>REMINDER</b>: If the invoice is sent by the new finance service, with the service Reminder Service</li>\n </ul>\n <p>\n <b>ServiceName</b> (only provided for <u>new finance service</u> invoices):\n <ul>\n     <li><b>SERVICE_FULL</b>: Ledgerbase service <u>with</u> automatic reminders is used</li>\n     <li><b>SERVICE_LIGHT</b>: Ledgerbase service <u>without</u> automatic reminders is used.</li>\n     <li><b>REMINDER_SERVICE</b>: Reminder service is used</li>\n </ul>",
        "operationId": "get_23",
        "parameters": [
          {
            "description": "The Fortnox invoice number",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice\n <i>Response parameters:</i>\n <p>\n <ul>\n     <li>@url: the URL used to retrieve the invoice status</li>\n     <li>BalanceIncludeFees: the current balance of the invoice, fees included (in SEK)</li>\n     <li>BalanceIncludeFeesCurrency: the current balance of the invoice, fees included, in other currency (currently only SEK is available)</li>\n     <li>CurrentCapitalBalance: capital amount balance (in SEK)</li>\n     <li>CurrentCapitalBalanceCurrency: capital amount balance in other currency (currently only SEK is available)</li>\n     <li>InvoiceDocumentURL: URL to PDF document for invoice</li>\n     <li>InvoiceNumber: invoice number in Fortnox</li>\n     <li>NextEvent: the next event for the invoice</li>\n     <li>NextEventDate: the date when the next event for the invoice will occur</li>\n     <li>OCRNumber: the OCR number of the invoice</li>\n     <li>Service: the service used for the invoice (LEDGERBASE or REMINDER)</li>\n     <li>ServiceName: the detailed service name used for the invoice (SERVICE_FULL, SERVICE_LIGHT or REMINDER_SERVICE, this field is omitted if the invoice is sent with the old Noxbox service)</li>\n     <li>Status: the current status of the invoice</li>\n </ul>\n <i>status</i> can be one of the following:\n <ul>\n     <li>UNKNOWN: Not yet confirmed by Fortnox Finans</li>\n     <li>NOT_AUTHORIZED: Factoring invoice waiting approval</li>\n     <li>OPEN: invoice is open, and not fully paid yet</li>\n     <li>PAUSED: invoice is paused</li>\n     <li>CLOSED: invoice is closed (fully paid, credited or cancelled)</li>\n </ul>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single invoice payment",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices/{Number}/pause": {
      "put": {
        "description": "<p>\n Pauses an invoice for up to 60 days. Pause means that Fortnox Finans reminder process will stop for the invoice. All invoices which have the status OPEN can be paused.\n <p>\n <b>Note:</b> this action is <b>not</b> available for invoices sent by the old Noxbox platform\n <p>\n <i>Parameters in the body:</i>\n <ul>\n     <li><b>PausedUntilDate</b>: the invoice will be paused to and including this date.</li>\n </ul>\n <p>",
        "operationId": "pause",
        "parameters": [
          {
            "description": "The Fortnox invoice number",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_PausePayload_Wrap"
              }
            }
          },
          "description": "The payload for sending an invoice with  Fortnox Finans"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice\n <i>Response parameters:</i>\n <p>\n <ul>\n     <li>@url: the URL used to retrieve the invoice status</li>\n     <li>BalanceIncludeFees: the current balance of the invoice, fees included (in SEK)</li>\n     <li>BalanceIncludeFeesCurrency: the current balance of the invoice, fees included, in other currency (currently only SEK is available)</li>\n     <li>CurrentCapitalBalance: capital amount balance (in SEK)</li>\n     <li>CurrentCapitalBalanceCurrency: capital amount balance in other currency (currently only SEK is available)</li>\n     <li>InvoiceDocumentURL: URL to PDF document for invoice</li>\n     <li>InvoiceNumber: invoice number in Fortnox</li>\n     <li>NextEvent: the next event for the invoice</li>\n     <li>NextEventDate: the date when the next event for the invoice will occur</li>\n     <li>OCRNumber: the OCR number of the invoice</li>\n     <li>Service: the service used for the invoice (LEDGERBASE or REMINDER)</li>\n     <li>ServiceName: the detailed service name used for the invoice (SERVICE_FULL, SERVICE_LIGHT or REMINDER_SERVICE, this field is omitted if the invoice is sent with the old Noxbox service)</li>\n     <li>Status: the current status of the invoice</li>\n </ul>\n <i>status</i> can be one of the following:\n <ul>\n     <li>UNKNOWN: Not yet confirmed by Fortnox Finans</li>\n     <li>NOT_AUTHORIZED: Factoring invoice waiting approval</li>\n     <li>OPEN: invoice is open, and not fully paid yet</li>\n     <li>PAUSED: invoice is paused</li>\n     <li>CLOSED: invoice is closed (fully paid, credited or cancelled)</li>\n </ul>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Action Pause",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-codegen-request-body-name": "payload",
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices/{Number}/report-payment": {
      "put": {
        "description": "<p>\n If a customer has paid some or all of the capital on an invoice directly to the client, this can be reported\n for bookkeeping purposes and reported to Fortnox Finans to actually deduct the paid amount from the invoice.\n <p>\n <b>Note:</b> this action is <b>not</b> available for invoices sent by the old Noxbox platform\n <p>\n <i>Parameters in the body:</i>\n <ul>\n     <li><b>ClientTakesFees</b>: a boolean indicating if the client should take the customer fees or not.</li>\n     <li><b>BookkeepPaymentInFortnox</b>: a boolean indicating if the payment should be bookkept in Fortnox or not. Usually the payment should be bookkept.</li>\n     <li><b>ReportToFinance</b>: a boolean indicating if the payment should be reported to Fortnox Finans or not. Usually the payment should be reported.</li>\n     <li><b>PaymentAmount</b>: a decimal field with the amount to report.</li>\n     <li><b>PaymentMethodCode</b>: a string with the method code (e.g. BG, PG or other). Could be omitted if BookkeepPaymentInFortnox is false.</li>\n     <li><b>PaymentMethodAccount</b>: an integer with the account number to bookkeep the payment on (e.g. 1920 or other). Could be omitted if BookkeepPaymentInFortnox is false.</li>\n </ul>\n <p>",
        "operationId": "reportPayment",
        "parameters": [
          {
            "description": "The Fortnox invoice number",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ReportPaymentPayload"
              }
            }
          },
          "description": "The payload for sending an invoice with  Fortnox Finans"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice\n <i>Response parameters:</i>\n <p>\n <ul>\n     <li>@url: the URL used to retrieve the invoice status</li>\n     <li>BalanceIncludeFees: the current balance of the invoice, fees included (in SEK)</li>\n     <li>BalanceIncludeFeesCurrency: the current balance of the invoice, fees included, in other currency (currently only SEK is available)</li>\n     <li>CurrentCapitalBalance: capital amount balance (in SEK)</li>\n     <li>CurrentCapitalBalanceCurrency: capital amount balance in other currency (currently only SEK is available)</li>\n     <li>InvoiceDocumentURL: URL to PDF document for invoice</li>\n     <li>InvoiceNumber: invoice number in Fortnox</li>\n     <li>NextEvent: the next event for the invoice</li>\n     <li>NextEventDate: the date when the next event for the invoice will occur</li>\n     <li>OCRNumber: the OCR number of the invoice</li>\n     <li>Service: the service used for the invoice (LEDGERBASE or REMINDER)</li>\n     <li>ServiceName: the detailed service name used for the invoice (SERVICE_FULL, SERVICE_LIGHT or REMINDER_SERVICE, this field is omitted if the invoice is sent with the old Noxbox service)</li>\n     <li>Status: the current status of the invoice</li>\n </ul>\n <i>status</i> can be one of the following:\n <ul>\n     <li>UNKNOWN: Not yet confirmed by Fortnox Finans</li>\n     <li>NOT_AUTHORIZED: Factoring invoice waiting approval</li>\n     <li>OPEN: invoice is open, and not fully paid yet</li>\n     <li>PAUSED: invoice is paused</li>\n     <li>CLOSED: invoice is closed (fully paid, credited or cancelled)</li>\n </ul>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Action Report Payment",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-codegen-request-body-name": "payload",
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices/{Number}/stop": {
      "put": {
        "description": "<p>\n Removes the invoice from Fortnox Finans process. The invoice can still be handled manually, but no further automatic process will be applied\n <p>\n <b>Note:</b> this action is <b>not</b> available for invoices sent by the old Noxbox platform",
        "operationId": "stop",
        "parameters": [
          {
            "description": "The Fortnox invoice number",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Action Stop",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices/{Number}/take-fees": {
      "put": {
        "description": "<p>\n If fees have been added to an invoice, e.g. reminder fees, the client can choose to pay those fees instead of letting the customer pay.\n <p>\n <b>Note:</b> this action is <b>not</b> available for invoices sent by the old Noxbox platform",
        "operationId": "takeFees",
        "parameters": [
          {
            "description": "The Fortnox invoice number",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice\n <i>Response parameters:</i>\n <p>\n <ul>\n     <li>@url: the URL used to retrieve the invoice status</li>\n     <li>BalanceIncludeFees: the current balance of the invoice, fees included (in SEK)</li>\n     <li>BalanceIncludeFeesCurrency: the current balance of the invoice, fees included, in other currency (currently only SEK is available)</li>\n     <li>CurrentCapitalBalance: capital amount balance (in SEK)</li>\n     <li>CurrentCapitalBalanceCurrency: capital amount balance in other currency (currently only SEK is available)</li>\n     <li>InvoiceDocumentURL: URL to PDF document for invoice</li>\n     <li>InvoiceNumber: invoice number in Fortnox</li>\n     <li>NextEvent: the next event for the invoice</li>\n     <li>NextEventDate: the date when the next event for the invoice will occur</li>\n     <li>OCRNumber: the OCR number of the invoice</li>\n     <li>Service: the service used for the invoice (LEDGERBASE or REMINDER)</li>\n     <li>ServiceName: the detailed service name used for the invoice (SERVICE_FULL, SERVICE_LIGHT or REMINDER_SERVICE, this field is omitted if the invoice is sent with the old Noxbox service)</li>\n     <li>Status: the current status of the invoice</li>\n </ul>\n <i>status</i> can be one of the following:\n <ul>\n     <li>UNKNOWN: Not yet confirmed by Fortnox Finans</li>\n     <li>NOT_AUTHORIZED: Factoring invoice waiting approval</li>\n     <li>OPEN: invoice is open, and not fully paid yet</li>\n     <li>PAUSED: invoice is paused</li>\n     <li>CLOSED: invoice is closed (fully paid, credited or cancelled)</li>\n </ul>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Action Take Fees",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/noxfinansinvoices/{Number}/unpause": {
      "put": {
        "description": "<p>\n Unpauses a paused invoice. If the invoice is manually paused, then this action will remove the pause status immediately. Invoices which are paused by the system cannot be unpaused.\n <p>\n <b>Note:</b> this action is <b>not</b> available for invoices sent by the old Noxbox platform",
        "operationId": "unpause",
        "parameters": [
          {
            "description": "The Fortnox invoice number",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_InvoiceResponse_Wrap"
                }
              }
            },
            "description": "The current status of the invoice\n <i>Response parameters:</i>\n <p>\n <ul>\n     <li>@url: the URL used to retrieve the invoice status</li>\n     <li>BalanceIncludeFees: the current balance of the invoice, fees included (in SEK)</li>\n     <li>BalanceIncludeFeesCurrency: the current balance of the invoice, fees included, in other currency (currently only SEK is available)</li>\n     <li>CurrentCapitalBalance: capital amount balance (in SEK)</li>\n     <li>CurrentCapitalBalanceCurrency: capital amount balance in other currency (currently only SEK is available)</li>\n     <li>InvoiceDocumentURL: URL to PDF document for invoice</li>\n     <li>InvoiceNumber: invoice number in Fortnox</li>\n     <li>NextEvent: the next event for the invoice</li>\n     <li>NextEventDate: the date when the next event for the invoice will occur</li>\n     <li>OCRNumber: the OCR number of the invoice</li>\n     <li>Service: the service used for the invoice (LEDGERBASE or REMINDER)</li>\n     <li>ServiceName: the detailed service name used for the invoice (SERVICE_FULL, SERVICE_LIGHT or REMINDER_SERVICE, this field is omitted if the invoice is sent with the old Noxbox service)</li>\n     <li>Status: the current status of the invoice</li>\n </ul>\n <i>status</i> can be one of the following:\n <ul>\n     <li>UNKNOWN: Not yet confirmed by Fortnox Finans</li>\n     <li>NOT_AUTHORIZED: Factoring invoice waiting approval</li>\n     <li>OPEN: invoice is open, and not fully paid yet</li>\n     <li>PAUSED: invoice is paused</li>\n     <li>CLOSED: invoice is closed (fully paid, credited or cancelled)</li>\n </ul>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Action Unpause",
        "tags": [
          "fortnox_FinanceInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers": {
      "get": {
        "operationId": "list_24",
        "parameters": [
          {
            "description": "possibility to filter offers",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "cancelled",
                "expired",
                "completed",
                "notcompleted",
                "ordercreated",
                "ordernotcreated"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter by customer name",
            "in": "query",
            "name": "customername",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by customer number",
            "in": "query",
            "name": "customernumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by document number",
            "in": "query",
            "name": "documentnumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by cost center",
            "in": "query",
            "name": "costcenter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by label",
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by from date",
            "in": "query",
            "name": "fromdate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by to date",
            "in": "query",
            "name": "todate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by project",
            "in": "query",
            "name": "project",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by sent",
            "in": "query",
            "name": "sent",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter by not completed",
            "in": "query",
            "name": "notcompleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter by our reference",
            "in": "query",
            "name": "ourreference",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by your reference",
            "in": "query",
            "name": "yourreference",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by last modified",
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "sort returned list of offers",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "customerName",
                "id",
                "transactionDate",
                "total"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_OfferListItem_List"
                }
              }
            },
            "description": "list of offers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of offers",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "An endpoint for creating an offer.\n\n Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.\n\n This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.\n <table>\n <caption>Errors that can be raised by this endpoint.</caption>\n \t\t<tr>\n \t\t\t<th>Error Code</th>\n \t\t\t<th>HTTP Code</th>\n \t\t\t<th>Description</th>\n \t\t\t<th>Solution</th>\n \t\t</tr>\n \t\t<tr>\n \t\t\t<td>2004167</td>\n \t\t\t<td>400</td>\n \t\t\t<td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>\n \t\t\t<td>Supply each row which has a custom VAT rate with an account.</td>\n \t\t</tr>\n </table>",
        "operationId": "create_27",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Offer_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Offer_Wrap"
                }
              }
            },
            "description": "the created offer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-codegen-request-body-name": "offer",
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}": {
      "get": {
        "operationId": "get_32",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Offer_Wrap"
                }
              }
            },
            "description": "the existing offer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Note that there are two approaches for updating the rows on an offer.\n\n If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the offer needs to be provided.\n\n If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the offer then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an offer is updated.",
        "operationId": "update_22",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Offer_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Offer_Wrap"
                }
              }
            },
            "description": "the updated offer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-codegen-request-body-name": "offer",
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/cancel": {
      "put": {
        "operationId": "cancel_2",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Offer_Wrap"
                }
              }
            },
            "description": "the updated offer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Cancels given offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/createinvoice": {
      "put": {
        "operationId": "createinvoice_1",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the created invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create invoice out of given offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/createorder": {
      "put": {
        "operationId": "createorder",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the created order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create order out of given offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/email": {
      "get": {
        "description": "You can use the properties in the EmailInformation to customize the e-mail message on each offer.",
        "operationId": "email_2",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Offer_Wrap"
                }
              }
            },
            "description": "the existing offer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Send given offer as email",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/externalprint": {
      "put": {
        "description": "Use this endpoint to set offer as sent, without generating an offer.",
        "operationId": "externalprint",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Offer_Wrap"
                }
              }
            },
            "description": "the updated offer"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Set given offer as sent",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/preview": {
      "get": {
        "description": "The difference between this and the print-endpoint is that property Sent is not set to TRUE.",
        "operationId": "preview_2",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the existing offer"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Preview given offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/offers/{DocumentNumber}/print": {
      "get": {
        "operationId": "print_2",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the existing offer"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Print given offer",
        "tags": [
          "fortnox_Offers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/orders": {
      "get": {
        "operationId": "list_26",
        "parameters": [
          {
            "description": "possibility to filter orders",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "cancelled",
                "expired",
                "invoicecreated",
                "invoicenotcreated"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter by customer name",
            "in": "query",
            "name": "customername",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by customer number",
            "in": "query",
            "name": "customernumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by label",
            "in": "query",
            "name": "label",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by document number",
            "in": "query",
            "name": "documentnumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by external invoice reference 1",
            "in": "query",
            "name": "externalinvoicereference1",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by external invoice reference 2",
            "in": "query",
            "name": "externalinvoicereference2",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by from date",
            "in": "query",
            "name": "fromdate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by to date",
            "in": "query",
            "name": "todate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by cost center",
            "in": "query",
            "name": "costcenter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by project",
            "in": "query",
            "name": "project",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by sent",
            "in": "query",
            "name": "sent",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter by not completed",
            "in": "query",
            "name": "notcompleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter by ourreference",
            "in": "query",
            "name": "ourreference",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by your reference",
            "in": "query",
            "name": "yourreference",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by lastmodified",
            "in": "query",
            "name": "lastmodified",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by order type",
            "in": "query",
            "name": "ordertype",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "field to sort returned list",
            "in": "query",
            "name": "sortby",
            "schema": {
              "enum": [
                "customername",
                "customernumber",
                "orderdate",
                "documentnumber",
                "total"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_OrderListItem_List"
                }
              }
            },
            "description": "list of orders"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of orders",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "An endpoint for creating an order.\n\n Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.\n\n This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.\n <table>\n <caption>Errors that can be raised by this endpoint.</caption>\n \t\t<tr>\n \t\t\t<th>Error Code</th>\n \t\t\t<th>HTTP Code</th>\n \t\t\t<th>Description</th>\n \t\t\t<th>Solution</th>\n \t\t</tr>\n \t\t<tr>\n \t\t\t<td>2004167</td>\n \t\t\t<td>400</td>\n \t\t\t<td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>\n \t\t\t<td>Supply each row which has a custom VAT rate with an account.</td>\n \t\t</tr>\n </table>",
        "operationId": "create_29",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Order_Wrap"
              }
            }
          },
          "description": "order to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the created order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a new order",
        "tags": [
          "fortnox_Orders"
        ],
        "x-codegen-request-body-name": "order",
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}": {
      "get": {
        "operationId": "get_34",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the existing order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single order",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "Note that there are two approaches for updating the rows on an order.\n\n If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the order needs to be provided.\n\n If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the order then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an order is updated.",
        "operationId": "update_24",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Order_Wrap"
              }
            }
          },
          "description": "order to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the updated order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update an order",
        "tags": [
          "fortnox_Orders"
        ],
        "x-codegen-request-body-name": "order",
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}/cancel": {
      "put": {
        "operationId": "cancel_4",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the updated order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Cancels given order",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}/createinvoice": {
      "put": {
        "operationId": "createinvoice_3",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Invoice_Wrap"
                }
              }
            },
            "description": "the created invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create invoice out of given order",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}/email": {
      "get": {
        "description": "You can use the properties in the EmailInformation to customize the e-mail message on each order.",
        "operationId": "email_4",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the existing order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Send given order as email",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}/externalprint": {
      "put": {
        "description": "Use this endpoint to set order as sent, without generating an order.",
        "operationId": "externalprint_2",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Order_Wrap"
                }
              }
            },
            "description": "the updated order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Set given order as sent",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}/preview": {
      "get": {
        "description": "The difference between this and the print-endpoint is that property Sent is not set to TRUE.",
        "operationId": "preview_4",
        "parameters": [
          {
            "description": "identifies the offer",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the given order as PDF"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Preview given offer",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/orders/{DocumentNumber}/print": {
      "get": {
        "operationId": "print_4",
        "parameters": [
          {
            "description": "identifies the order",
            "in": "path",
            "name": "DocumentNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "the given order as PDF"
          },
          "default": {
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Print given order",
        "tags": [
          "fortnox_Orders"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/predefinedaccounts": {
      "get": {
        "operationId": "list_28",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PredefinedAccount_List"
                }
              }
            },
            "description": "list of predefined accounts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of all predefined accounts",
        "tags": [
          "fortnox_PredefinedAccounts"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/predefinedaccounts/{name}": {
      "get": {
        "operationId": "get_36",
        "parameters": [
          {
            "description": "identifies the predefined account",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PredefinedAccount_Wrap"
                }
              }
            },
            "description": "the existing predefined account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve information for a specific account type",
        "tags": [
          "fortnox_PredefinedAccounts"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "An endpoint for updating a Predefined Account. Predefined Accounts are identified by their <em>name</em>-field, and as such must be unique.\n Some Predefined Accounts distinguish between Goods and Services.\n In this case, the former retains the original name whereas the latter ends with a 2. Such as <em>SALES</em> and <em>SALES2</em>.\n Accounts are chosen from the Account Registry, and if you have EasyVat enabled then the new EasyVat Predefined Accounts (<em>SALES_25_SE</em>, etc.) have certain restrictions on the accounts that can be selected.\n Refer to the table below.\n\n <table>\n     <caption>Account restrictions when EasyVat has been enabled.</caption>\n     <tr>\n         <th>Name</th>\n         <th>VAT Code</th>\n         <th>Restrictions</th>\n     </tr>\n     <tr>\n         <td>SALES_25_SE</td>\n         <td>MP1</td>\n         <td>Must have a compatible VAT Code.</td>\n     </tr>\n     <tr>\n         <td>SALES_12_SE</td>\n         <td>MP2</td>\n         <td>Must have a compatible VAT Code.</td>\n     </tr>\n     <tr>\n         <td>SALES_6_SE</td>\n         <td>MP3</td>\n         <td>Must have a compatible VAT Code.</td>\n     </tr>\n     <tr>\n         <td>SALES_0_SE</td>\n         <td>MF</td>\n         <td>Must have a compatible VAT Code.</td>\n     </tr>\n </table>\n\n This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.\n <table>\n     <caption>Errors that can be raised by this endpoint.</caption>\n     <tr>\n         <th>Error Code</th>\n         <th>HTTP Code</th>\n         <th>Description</th>\n         <th>Solution</th>\n     </tr>\n     <tr>\n         <td>2001265</td>\n         <td>400</td>\n         <td>The provided account is invalid. It either has not been provided, does not exist, or is inactive.</td>\n         <td>Verify that an account has been provided and that it exists and is active.</td>\n     </tr>\n     <tr>\n         <td>2002462</td>\n         <td>400</td>\n         <td>The account is not in a valid format.</td>\n         <td>Verify that the format of the account is correct. It has to consist of 4 digits.</td>\n     </tr>\n     <tr>\n         <td>2000729</td>\n         <td>400</td>\n         <td>A Predefined Account has not been provided.</td>\n         <td>Verify that a valid Predefined Account has been provided as a PATH-parameter.</td>\n     </tr>\n     <tr>\n         <td>2004052</td>\n         <td>400</td>\n         <td>The provided account has an incompatible VAT Code. Only applies if EasyVat has been enabled.</td>\n         <td>Verify that the provided account has a VAT Code that is compatible with the selected Predefined Account. Refer to the table above for more information about compatibility.</td>\n     </tr>\n </table>\n\n If you have activated EasyVat, you can read more about how to use the new Predefined Accounts with your documents in their respective api documentation.",
        "operationId": "update_26",
        "parameters": [
          {
            "description": "identifies the predefined account",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_PredefinedAccount_Wrap"
              }
            }
          },
          "description": "predefined account to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PredefinedAccount_Wrap"
                }
              }
            },
            "description": "the updated predefined account"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a Predefined Account",
        "tags": [
          "fortnox_PredefinedAccounts"
        ],
        "x-codegen-request-body-name": "predefinedAccount",
        "x-fn-is-public": "true"
      }
    },
    "/3/predefinedvoucherseries": {
      "get": {
        "operationId": "list_29",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PredefinedVoucherSeries_List"
                }
              }
            },
            "description": "a list of predefined voucher series"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of predefined voucher series",
        "tags": [
          "fortnox_PredefinedVoucherSeries"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/predefinedvoucherseries/{Name}": {
      "get": {
        "operationId": "get_37",
        "parameters": [
          {
            "description": "identifies the predefined voucher series",
            "in": "path",
            "name": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PredefinedVoucherSeries_Wrap"
                }
              }
            },
            "description": "a list of predefined voucher series"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific predefined voucher series",
        "tags": [
          "fortnox_PredefinedVoucherSeries"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_27",
        "parameters": [
          {
            "description": "identifies the predefined voucher series",
            "in": "path",
            "name": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_PredefinedVoucherSeries_Wrap"
              }
            }
          },
          "description": "predefined voucher series to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PredefinedVoucherSeries_Wrap"
                }
              }
            },
            "description": "the updated predefined voucher series"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a predefined voucher series",
        "tags": [
          "fortnox_PredefinedVoucherSeries"
        ],
        "x-codegen-request-body-name": "predefinedVoucherSeries",
        "x-fn-is-public": "true"
      }
    },
    "/3/pricelists": {
      "get": {
        "description": "The price lists register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_30",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PriceList_List"
                }
              }
            },
            "description": "all price lists"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of price lists",
        "tags": [
          "fortnox_PriceLists"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_31",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_PriceList_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PriceList_Wrap"
                }
              }
            },
            "description": "the created price list"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a price list",
        "tags": [
          "fortnox_PriceLists"
        ],
        "x-codegen-request-body-name": "priceList",
        "x-fn-is-public": "true"
      }
    },
    "/3/pricelists/{Code}": {
      "get": {
        "operationId": "get_38",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PriceList_Wrap"
                }
              }
            },
            "description": "the existing price list"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single price list",
        "tags": [
          "fortnox_PriceLists"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_28",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_PriceList_Wrap"
              }
            }
          },
          "description": "price list to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PriceList_Wrap"
                }
              }
            },
            "description": "the updated price list"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a price list",
        "tags": [
          "fortnox_PriceLists"
        ],
        "x-codegen-request-body-name": "priceList",
        "x-fn-is-public": "true"
      }
    },
    "/3/prices": {
      "get": {
        "operationId": "list_31",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Price_Wrap"
                }
              }
            },
            "description": "a list of prices."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of prices",
        "tags": [
          "fortnox_Prices"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_32",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Price_Wrap"
              }
            }
          },
          "description": "price to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Price_Wrap"
                }
              }
            },
            "description": "the created price"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a price",
        "tags": [
          "fortnox_Prices"
        ],
        "x-codegen-request-body-name": "price",
        "x-fn-is-public": "true"
      }
    },
    "/3/prices/sublist/{PriceList}/{ArticleNumber}": {
      "get": {
        "description": "The list contains a slimmer version of the prices. To get a full entity, use the GET with a price list, article number and from quantity.",
        "operationId": "list_32",
        "parameters": [
          {
            "description": "identifies the price list of the prices",
            "in": "path",
            "name": "PriceList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the article number of the prices",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PriceListItem_List"
                }
              }
            },
            "description": "list of prices"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of articles with all their prices in the specified price list",
        "tags": [
          "fortnox_Prices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/prices/{PriceList}/{ArticleNumber}": {
      "get": {
        "operationId": "getFirstPrice",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "PriceList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the article",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Price_Wrap"
                }
              }
            },
            "description": "the first price for the specified article"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve the first price for the specified article",
        "tags": [
          "fortnox_Prices"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_30",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "PriceList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the article number",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Price_Wrap"
              }
            }
          },
          "description": "price to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Price_Wrap"
                }
              }
            },
            "description": "the updated price"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update the first price in the specified article",
        "tags": [
          "fortnox_Prices"
        ],
        "x-codegen-request-body-name": "price",
        "x-fn-is-public": "true"
      }
    },
    "/3/prices/{PriceList}/{ArticleNumber}/{FromQuantity}": {
      "delete": {
        "operationId": "remove_16",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "PriceList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the article number",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the from quantity",
            "in": "path",
            "name": "FromQuantity",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete a single price",
        "tags": [
          "fortnox_Prices"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_39",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "PriceList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the article",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies from quantity",
            "in": "path",
            "name": "FromQuantity",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Price_Wrap"
                }
              }
            },
            "description": "the price for a specified article"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a price for a specified article",
        "tags": [
          "fortnox_Prices"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_29",
        "parameters": [
          {
            "description": "identifies the price list",
            "in": "path",
            "name": "PriceList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the article number",
            "in": "path",
            "name": "ArticleNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the from quantity",
            "in": "path",
            "name": "FromQuantity",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Price_Wrap"
              }
            }
          },
          "description": "price to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Price_Wrap"
                }
              }
            },
            "description": "the updated price"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a price",
        "tags": [
          "fortnox_Prices"
        ],
        "x-codegen-request-body-name": "price",
        "x-fn-is-public": "true"
      }
    },
    "/3/printtemplates": {
      "get": {
        "operationId": "list_33",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_PrintTemplate_List"
                }
              }
            },
            "description": "a list of print templates."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of print templates",
        "tags": [
          "fortnox_PrintTemplates"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/projects": {
      "get": {
        "description": "The project register can return a list of records or a single record. By specifying a ProjectNumber in the URL, a single record will be returned. If no ProjectNumber is provided, a list of records will be returned.",
        "operationId": "list_34",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ProjectListItem_List"
                }
              }
            },
            "description": "list of projects"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of projects",
        "tags": [
          "fortnox_Projects"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_33",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Project_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Project_Wrap"
                }
              }
            },
            "description": "the created project"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a project",
        "tags": [
          "fortnox_Projects"
        ],
        "x-codegen-request-body-name": "project",
        "x-fn-is-public": "true"
      }
    },
    "/3/projects/{ProjectNumber}": {
      "delete": {
        "operationId": "remove_17",
        "parameters": [
          {
            "description": "identifies the project",
            "in": "path",
            "name": "ProjectNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a project",
        "tags": [
          "fortnox_Projects"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_40",
        "parameters": [
          {
            "description": "identifies the project",
            "in": "path",
            "name": "ProjectNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Project_Wrap"
                }
              }
            },
            "description": "the existing project"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single project",
        "tags": [
          "fortnox_Projects"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_31",
        "parameters": [
          {
            "description": "identifies the project",
            "in": "path",
            "name": "ProjectNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Project_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Project_Wrap"
                }
              }
            },
            "description": "the updated project"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a project",
        "tags": [
          "fortnox_Projects"
        ],
        "x-codegen-request-body-name": "project",
        "x-fn-is-public": "true"
      }
    },
    "/3/salarytransactions": {
      "get": {
        "description": "Supports query-string parameters <b>employeeid</b> and <b>date</b> for filtering the result.",
        "operationId": "list_35",
        "parameters": [
          {
            "description": "filter on employeeId",
            "in": "query",
            "name": "employeeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter on date",
            "in": "query",
            "name": "date",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SalaryTransactionListItem_List"
                }
              }
            },
            "description": "list of salary transactions"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "List all salary transactions for all employees",
        "tags": [
          "fortnox_SalaryTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_34",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SalaryTransaction_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SalaryTransaction_Wrap"
                }
              }
            },
            "description": "the created salary transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a new salary transaction for an employee",
        "tags": [
          "fortnox_SalaryTransactions"
        ],
        "x-codegen-request-body-name": "salaryTransaction",
        "x-fn-is-public": "true"
      }
    },
    "/3/salarytransactions/{SalaryRow}": {
      "delete": {
        "operationId": "delete_3",
        "parameters": [
          {
            "description": "identifies the salary transaction",
            "in": "path",
            "name": "SalaryRow",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SalaryTransaction_Wrap"
                }
              }
            },
            "description": "the existing salary transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Delete a single salary transaction",
        "tags": [
          "fortnox_SalaryTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_41",
        "parameters": [
          {
            "description": "identifies the salary transaction",
            "in": "path",
            "name": "SalaryRow",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SalaryTransaction_Wrap"
                }
              }
            },
            "description": "the existing salary transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single salary transaction",
        "tags": [
          "fortnox_SalaryTransactions"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_32",
        "parameters": [
          {
            "description": "identifies the salary transaction",
            "in": "path",
            "name": "SalaryRow",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SalaryTransaction_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SalaryTransaction_Wrap"
                }
              }
            },
            "description": "the updated salary transaction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a salary transaction",
        "tags": [
          "fortnox_SalaryTransactions"
        ],
        "x-codegen-request-body-name": "salaryTransaction",
        "x-fn-is-public": "true"
      }
    },
    "/3/scheduletimes/{EmployeeId}/{Date}": {
      "get": {
        "operationId": "get_42",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "EmployeeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the date",
            "in": "path",
            "name": "Date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ScheduleTime_Wrap"
                }
              }
            },
            "description": "the existing schedule time"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific schedule time",
        "tags": [
          "fortnox_ScheduleTimes"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_33",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "EmployeeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the date",
            "in": "path",
            "name": "Date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_ScheduleTime_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ScheduleTime_Wrap"
                }
              }
            },
            "description": "the updated schedule time"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a schedule time",
        "tags": [
          "fortnox_ScheduleTimes"
        ],
        "x-codegen-request-body-name": "scheduleTime",
        "x-fn-is-public": "true"
      }
    },
    "/3/scheduletimes/{EmployeeId}/{Date}/resetday": {
      "put": {
        "operationId": "reset",
        "parameters": [
          {
            "description": "identifies the employee",
            "in": "path",
            "name": "EmployeeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the date",
            "in": "path",
            "name": "Date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ScheduleTime_Wrap"
                }
              }
            },
            "description": "the reset schedule time"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Reset schedule time",
        "tags": [
          "fortnox_ScheduleTimes"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/settings/company": {
      "get": {
        "operationId": "1_get_12",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_CompanySettings_Wrap"
                }
              }
            },
            "description": "company settings"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve the company settings",
        "tags": [
          "fortnox_CompanySettings"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/settings/lockedperiod": {
      "get": {
        "description": "If no date is returned, no period is locked.",
        "operationId": "get_29",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_LockedPeriod_Wrap"
                }
              }
            },
            "description": "the locked period"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve the locked period",
        "tags": [
          "fortnox_LockedPeriod"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/sie/{Type}": {
      "get": {
        "description": "Retrieves a SIE file as streamed content",
        "operationId": "get_43",
        "parameters": [
          {
            "description": "type",
            "in": "path",
            "name": "Type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "financialYear",
            "in": "query",
            "name": "financialYear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful but returned no content."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a SIE file",
        "tags": [
          "fortnox_Sie"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoiceaccruals": {
      "get": {
        "description": "The supplier invoice accruals register can return a list of records or a single record. By specifying a SupplierInvoiceNumber in the URL, a single record will be returned. Not specifying a SupplierInvoiceNumber will return a list of records.",
        "operationId": "list_36",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrualListItem_List"
                }
              }
            },
            "description": "list of supplier invoice accruals"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of supplier invoice accruals",
        "tags": [
          "fortnox_SupplierInvoiceAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_35",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual_Wrap"
                }
              }
            },
            "description": "the created supplier invoice accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a supplier invoice accrual",
        "tags": [
          "fortnox_SupplierInvoiceAccruals"
        ],
        "x-codegen-request-body-name": "supplierInvoiceAccrual",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoiceaccruals/{SupplierInvoiceNumber}": {
      "delete": {
        "operationId": "remove_18",
        "parameters": [
          {
            "description": "identifies the supplier invoice accrual",
            "in": "path",
            "name": "SupplierInvoiceNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a supplier invoice accrual",
        "tags": [
          "fortnox_SupplierInvoiceAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_44",
        "parameters": [
          {
            "description": "identifies the supplier invoice accrual",
            "in": "path",
            "name": "SupplierInvoiceNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual_Wrap"
                }
              }
            },
            "description": "the existing supplier invoice accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single supplier invoice accrual",
        "tags": [
          "fortnox_SupplierInvoiceAccruals"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_34",
        "parameters": [
          {
            "description": "identifies the supplier invoice accrual",
            "in": "path",
            "name": "SupplierInvoiceNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceAccrual_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice accrual"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a supplier invoice accrual",
        "tags": [
          "fortnox_SupplierInvoiceAccruals"
        ],
        "x-codegen-request-body-name": "supplierInvoiceAccrual",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoiceexternalurlconnections": {
      "post": {
        "operationId": "create_36",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoiceExternalURLConnectionUpdate"
              }
            }
          },
          "description": "request"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceExternalURLConnection_Single"
                }
              }
            },
            "description": "supplier invoice external url connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a supplier invoice external URL connection",
        "tags": [
          "fortnox_SupplierInvoiceExternalUrlConnections"
        ],
        "x-codegen-request-body-name": "request",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoiceexternalurlconnections/{Id}": {
      "delete": {
        "operationId": "delete_4",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a supplier invoice external URL connection",
        "tags": [
          "fortnox_SupplierInvoiceExternalUrlConnections"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_45",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceExternalURLConnection_Single"
                }
              }
            },
            "description": "supplier invoice external url connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single supplier invoice external URL connection",
        "tags": [
          "fortnox_SupplierInvoiceExternalUrlConnections"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_35",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoiceExternalURLConnectionUpdate"
              }
            }
          },
          "description": "request"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceExternalURLConnection_Single"
                }
              }
            },
            "description": "supplier invoice external url connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a supplier invoice external URL connection",
        "tags": [
          "fortnox_SupplierInvoiceExternalUrlConnections"
        ],
        "x-codegen-request-body-name": "request",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoicefileconnections": {
      "get": {
        "description": "The supplier invoice file connections register can return a list of records or a single record. By specifying a FileId in the URL, a single record will be returned. Not specifying a FileId will return a list of records.",
        "operationId": "list_37",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceFileConnection_List"
                }
              }
            },
            "description": "list of file connections"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of supplier invoice file connections",
        "tags": [
          "fortnox_SupplierInvoiceFileConnections"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_37",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoiceFileConnection_Wrap"
              }
            }
          },
          "description": "supplier invoice file connection to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceFileConnection_Wrap"
                }
              }
            },
            "description": "the created supplier invoice file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create an supplier invoice file connection",
        "tags": [
          "fortnox_SupplierInvoiceFileConnections"
        ],
        "x-codegen-request-body-name": "fileConnection",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoicefileconnections/{FileId}": {
      "delete": {
        "operationId": "remove_19",
        "parameters": [
          {
            "description": "identifies the supplier invoice file connection",
            "in": "path",
            "name": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove an supplier invoice file connection",
        "tags": [
          "fortnox_SupplierInvoiceFileConnections"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_46",
        "parameters": [
          {
            "description": "identifies the file connection",
            "in": "path",
            "name": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceFileConnection_Wrap"
                }
              }
            },
            "description": "the existing file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single supplier invoice file connection",
        "tags": [
          "fortnox_SupplierInvoiceFileConnections"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoicepayments": {
      "get": {
        "operationId": "list_38",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoicePaymentListItem_List"
                }
              }
            },
            "description": "list of supplier invoice payments"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of supplier invoice payments",
        "tags": [
          "fortnox_SupplierInvoicePayments"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_38",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_Wrap"
                }
              }
            },
            "description": "the created supplier invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a supplier invoice payment",
        "tags": [
          "fortnox_SupplierInvoicePayments"
        ],
        "x-codegen-request-body-name": "supplierInvoicePayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoicepayments/{Number}": {
      "delete": {
        "operationId": "remove_20",
        "parameters": [
          {
            "description": "identifies the supplier invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a supplier invoice payment",
        "tags": [
          "fortnox_SupplierInvoicePayments"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_47",
        "parameters": [
          {
            "description": "identifies the supplier invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_Wrap"
                }
              }
            },
            "description": "the existing supplier invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single supplier invoice payment",
        "tags": [
          "fortnox_SupplierInvoicePayments"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_36",
        "parameters": [
          {
            "description": "identifies the supplier invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a supplier invoice payment",
        "tags": [
          "fortnox_SupplierInvoicePayments"
        ],
        "x-codegen-request-body-name": "supplierInvoicePayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoicepayments/{Number}/bookkeep": {
      "put": {
        "operationId": "bookkeep_3",
        "parameters": [
          {
            "description": "identifies the supplier invoice payment",
            "in": "path",
            "name": "Number",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoicePayment_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Bookkeep a supplier invoice payment",
        "tags": [
          "fortnox_SupplierInvoicePayments"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices": {
      "get": {
        "operationId": "list_39",
        "parameters": [
          {
            "description": "possibility to filter supplier invoices",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "cancelled",
                "fullypaid",
                "unpaid",
                "unpaidoverdue",
                "unbooked",
                "pendingpayment",
                "authorizepending"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoiceListItem_Wrap"
                }
              }
            },
            "description": "list of supplier invoices"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of supplier invoices",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_39",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
              }
            }
          },
          "description": "supplier invoice to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the created supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-codegen-request-body-name": "supplierInvoice",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices/{GivenNumber}": {
      "get": {
        "operationId": "get_48",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the existing supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_37",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
              }
            }
          },
          "description": "supplier invoice to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-codegen-request-body-name": "supplierInvoice",
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices/{GivenNumber}/approvalbookkeep": {
      "put": {
        "operationId": "approvalbookkeep",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Approval of bookkeep of given supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices/{GivenNumber}/approvalpayment": {
      "put": {
        "operationId": "approvalpayment",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Approval of payment of given supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices/{GivenNumber}/bookkeep": {
      "put": {
        "operationId": "bookkeep_4",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Bookkeep given supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices/{GivenNumber}/cancel": {
      "put": {
        "operationId": "cancel_6",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Cancels given supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/supplierinvoices/{GivenNumber}/credit": {
      "put": {
        "description": "The created credit invoice will be referenced in the property CreditReference.",
        "operationId": "credit_2",
        "parameters": [
          {
            "description": "identifies the invoice",
            "in": "path",
            "name": "GivenNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierInvoice_Wrap"
                }
              }
            },
            "description": "the updated supplier invoice"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Credit given supplier invoice",
        "tags": [
          "fortnox_SupplierInvoices"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/suppliers": {
      "get": {
        "description": "The supplier register can return a list of records or a single record. By specifying a SupplierNumber in the URL, a single record will be returned. Not specifying a SupplierNumber will return a list of records.",
        "operationId": "list_40",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_SupplierListItem_List"
                }
              }
            },
            "description": "list of suppliers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of suppliers",
        "tags": [
          "fortnox_Suppliers"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_40",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Supplier_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Supplier_Wrap"
                }
              }
            },
            "description": "the created supplier"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a supplier",
        "tags": [
          "fortnox_Suppliers"
        ],
        "x-codegen-request-body-name": "supplier",
        "x-fn-is-public": "true"
      }
    },
    "/3/suppliers/{SupplierNumber}": {
      "get": {
        "operationId": "get_49",
        "parameters": [
          {
            "description": "identifies the supplier",
            "in": "path",
            "name": "SupplierNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Supplier_Wrap"
                }
              }
            },
            "description": "the existing supplier"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single supplier",
        "tags": [
          "fortnox_Suppliers"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_38",
        "parameters": [
          {
            "description": "identifies the supplier",
            "in": "path",
            "name": "SupplierNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Supplier_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Supplier_Wrap"
                }
              }
            },
            "description": "the updated supplier"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a supplier",
        "tags": [
          "fortnox_Suppliers"
        ],
        "x-codegen-request-body-name": "supplier",
        "x-fn-is-public": "true"
      }
    },
    "/3/taxreductions": {
      "get": {
        "operationId": "list_41",
        "parameters": [
          {
            "description": "possibility to filter tax reductions",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "invoices",
                "orders",
                "offers"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TaxReductionListItem_List"
                }
              }
            },
            "description": "a list of tax reductions."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of tax reductions",
        "tags": [
          "fortnox_TaxReductions"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "Note that different types of tax reduction, i.e. ROT, RUT, or Green Technology, applications work differently.\n When creating an application for Green Technology, the field <em>TaxReductionAmounts</em> becomes mandatory as\n it is used to determine how much of the asked amount is intended for which type of work. Similarly, the <em>AskedAmount</em>\n field of the <em>TaxReduction</em> becomes optional, as it will always be considered to be equal to the sum of the <em>TaxReductionAmounts</em>.\n\n For the other types, ROT and RUT, this field is not required and should be omitted.\n\n Unlike earlier iterations of this endpoint, specifying the type of reduction for the provided <em>TaxReduction</em> (e.g. ROT, RUT, or Green)\n is not necessary as this value will always be equal to the type set on the provided document instead.\n\n This endpoint can raise a variety of validation errors, some of which are only relevant for Green Technology applications.\n Those errors will always return an HTTP Code of 400 and include, but are not limited to, those shown below:\n\n <table>\n     <caption>Errors that can be raised by this endpoint.</caption>\n     <tr>\n         <th>Error Code</th>\n         <th>Types</th>\n         <th>Description</th>\n         <th>Solution</th>\n     </tr>\n     <tr>\n         <td>2000600</td>\n         <td>ROT, RUT, GREEN</td>\n         <td>The provided Social Security Number is already in use for this document.</td>\n         <td>Verify that the Social Security Number is different from any other applicants already added.</td>\n     </tr>\n     <tr>\n         <td>2004217, 2004218</td>\n         <td>ROT, RUT, GREEN</td>\n         <td>The total asked amount of the application is either in an invalid format or is negative.</td>\n         <td>Verify that the <em>AskedAmount</em>-field is a positive number (0 is valid for Green Technology) and that it is an integer.</td>\n     </tr>\n     <tr>\n         <td>2004209</td>\n         <td>GREEN</td>\n         <td>The <em>WorkType</em>-field contains a work type that is not valid for the given type of reduction.</td>\n         <td>Ensure that the <em>WorkType</em> contains a valid type of work for Green Technology.</td>\n     </tr>\n     <tr>\n         <td>2004263</td>\n         <td>GREEN</td>\n         <td>The <em>TaxReductionAmounts</em>-field is missing for a Green Technology application.</td>\n         <td>Ensure that the field is included, that it is an array, and that each contained object denotes a specific type's asked amount.</td>\n     </tr>\n     <tr>\n         <td>2004262</td>\n         <td>GREEN</td>\n         <td>There are more than one object denoting the asked amount for the same type in the <em>TaxReductionAmounts</em>-field.</td>\n         <td>Ensure that there is only one object denoting the asked amount per type contained in the array.</td>\n     </tr>\n </table>",
        "operationId": "create_41",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TaxReduction_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TaxReduction_Wrap"
                }
              }
            },
            "description": "the created tax reduction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a Tax Reduction",
        "tags": [
          "fortnox_TaxReductions"
        ],
        "x-codegen-request-body-name": "taxReduction",
        "x-fn-is-public": "true"
      }
    },
    "/3/taxreductions/{Id}": {
      "delete": {
        "operationId": "remove_21",
        "parameters": [
          {
            "description": "identifies the tax reduction",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a tax reduction",
        "tags": [
          "fortnox_TaxReductions"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_50",
        "parameters": [
          {
            "description": "identifies the tax reduction",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TaxReduction_Wrap"
                }
              }
            },
            "description": "the existing tax reduction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single tax reduction",
        "tags": [
          "fortnox_TaxReductions"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_39",
        "parameters": [
          {
            "description": "identifies the tax reduction",
            "in": "path",
            "name": "Id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TaxReduction_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TaxReduction_Wrap"
                }
              }
            },
            "description": "the updated tax reduction"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a tax reduction",
        "tags": [
          "fortnox_TaxReductions"
        ],
        "x-codegen-request-body-name": "taxReduction",
        "x-fn-is-public": "true"
      }
    },
    "/3/termsofdeliveries": {
      "get": {
        "description": "The terms of deliveries register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_42",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfDelivery_List"
                }
              }
            },
            "description": "a list of terms of deliveries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of terms of deliveries",
        "tags": [
          "fortnox_TermsOfDeliveries"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_42",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TermsOfDelivery_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfDelivery_Wrap"
                }
              }
            },
            "description": "the created term of delivery"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a terms of delivery",
        "tags": [
          "fortnox_TermsOfDeliveries"
        ],
        "x-codegen-request-body-name": "termOfDelivery",
        "x-fn-is-public": "true"
      }
    },
    "/3/termsofdeliveries/{Code}": {
      "get": {
        "operationId": "get_51",
        "parameters": [
          {
            "description": "identifies the terms of delivery",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfDelivery_Wrap"
                }
              }
            },
            "description": "the existing terms of delivery"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single terms of delivery",
        "tags": [
          "fortnox_TermsOfDeliveries"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_40",
        "parameters": [
          {
            "description": "identifies the terms of delivery",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TermsOfDelivery_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfDelivery_Wrap"
                }
              }
            },
            "description": "the updated terms of delivery"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a terms of delivery",
        "tags": [
          "fortnox_TermsOfDeliveries"
        ],
        "x-codegen-request-body-name": "termsOfDelivery",
        "x-fn-is-public": "true"
      }
    },
    "/3/termsofpayments": {
      "get": {
        "operationId": "list_43",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfPayment_List"
                }
              }
            },
            "description": "a list of terms of payments"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of all terms of payments",
        "tags": [
          "fortnox_TermsOfPayments"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_43",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TermsOfPayment_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfPayment_Wrap"
                }
              }
            },
            "description": "the created terms of payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a term of payment",
        "tags": [
          "fortnox_TermsOfPayments"
        ],
        "x-codegen-request-body-name": "termsOfPayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/termsofpayments/{Code}": {
      "delete": {
        "operationId": "remove_22",
        "parameters": [
          {
            "description": "identifies the terms of payment",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a term of payment",
        "tags": [
          "fortnox_TermsOfPayments"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_52",
        "parameters": [
          {
            "description": "identifies the terms of payment",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfPayment_Wrap"
                }
              }
            },
            "description": "the existing terms of payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single terms of payment",
        "tags": [
          "fortnox_TermsOfPayments"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_41",
        "parameters": [
          {
            "description": "identifies the term of payment",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_TermsOfPayment_Wrap"
              }
            }
          },
          "description": "term of payment to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_TermsOfPayment_Wrap"
                }
              }
            },
            "description": "the updated term of payment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a term of payment",
        "tags": [
          "fortnox_TermsOfPayments"
        ],
        "x-codegen-request-body-name": "termOfPayment",
        "x-fn-is-public": "true"
      }
    },
    "/3/units": {
      "get": {
        "description": "The units register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_44",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Unit_List"
                }
              }
            },
            "description": "a list of units."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of units",
        "tags": [
          "fortnox_Units"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_45",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Unit_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Unit_Wrap"
                }
              }
            },
            "description": "the created unit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a unit",
        "tags": [
          "fortnox_Units"
        ],
        "x-codegen-request-body-name": "unit",
        "x-fn-is-public": "true"
      }
    },
    "/3/units/{Code}": {
      "delete": {
        "operationId": "remove_24",
        "parameters": [
          {
            "description": "identifies the unit",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a unit",
        "tags": [
          "fortnox_Units"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_54",
        "parameters": [
          {
            "description": "identifies the unit",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Unit_Wrap"
                }
              }
            },
            "description": "the existing unit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single unit",
        "tags": [
          "fortnox_Units"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_42",
        "parameters": [
          {
            "description": "identifies the unit",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Unit_Wrap"
              }
            }
          },
          "description": "unit to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Unit_Wrap"
                }
              }
            },
            "description": "the updated unit"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a unit",
        "tags": [
          "fortnox_Units"
        ],
        "x-codegen-request-body-name": "unit",
        "x-fn-is-public": "true"
      }
    },
    "/3/vacationdebtbasis/{Year}/{Month}": {
      "get": {
        "operationId": "get_55",
        "parameters": [
          {
            "in": "path",
            "name": "Year",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "Month",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VacationDebtBasis_Wrap"
                }
              }
            },
            "description": "a created and posted vacation debt basis up until last day of month in year"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific vacation debt basis for a posted voucher",
        "tags": [
          "fortnox_VacationDebtBasis"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/voucherfileconnections": {
      "get": {
        "description": "The voucher file connections register can return a list of records or a single record. By specifying a FileId in the URL, a single record will be returned. Not specifying a FileId will return a list of records.",
        "operationId": "list_45",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherFileConnection_List"
                }
              }
            },
            "description": "a list of voucher file connections."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of voucher file connections",
        "tags": [
          "fortnox_VoucherFileConnections"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_46",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_VoucherFileConnection_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherFileConnection_Wrap"
                }
              }
            },
            "description": "the created voucher file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a voucher file connection",
        "tags": [
          "fortnox_VoucherFileConnections"
        ],
        "x-codegen-request-body-name": "voucherFileConnection",
        "x-fn-is-public": "true"
      }
    },
    "/3/voucherfileconnections/{FileId}": {
      "delete": {
        "operationId": "remove_25",
        "parameters": [
          {
            "description": "identifies the voucher file connection",
            "in": "path",
            "name": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a voucher file connection",
        "tags": [
          "fortnox_VoucherFileConnections"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_56",
        "parameters": [
          {
            "description": "identifies the voucher file connection",
            "in": "path",
            "name": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherFileConnection_Wrap"
                }
              }
            },
            "description": "the existing voucher file connection"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single voucher file connection",
        "tags": [
          "fortnox_VoucherFileConnections"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/vouchers": {
      "get": {
        "description": "Note that vouchers have two keys, one for voucher series and one for voucher number. The financial year is also specified for each voucher, this is due to the same voucher series and number is used each year.\n To get a unique voucher you need the voucher series, the voucher number and the financial year. These properties will always be returned where ever vouchers is used.",
        "operationId": "list_46",
        "parameters": [
          {
            "description": "filter on financial year",
            "in": "query",
            "name": "financialyear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherListItem_List"
                }
              }
            },
            "description": "list of vouchers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve all vouchers",
        "tags": [
          "fortnox_Vouchers"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "The created voucher will be returned if everything succeeded, if there was any problems an error will be returned.\n If no query param is used the voucher will be created in the preselected financial year. Go to the financialyears endpoint to read on how to retreive the Financial year id.",
        "operationId": "create_47",
        "parameters": [
          {
            "description": "Financial year id, used to determine which financial year the voucher is created in",
            "in": "query",
            "name": "financialyear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_Voucher_Wrap"
              }
            }
          },
          "description": "voucher to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Voucher_Wrap"
                }
              }
            },
            "description": "the created voucher"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a voucher",
        "tags": [
          "fortnox_Vouchers"
        ],
        "x-codegen-request-body-name": "voucher",
        "x-fn-is-public": "true"
      }
    },
    "/3/vouchers/sublist": {
      "get": {
        "operationId": "listVouchers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherListItem_List"
                }
              }
            },
            "description": "list of vouchers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve all vouchers for the current financial year",
        "tags": [
          "fortnox_Vouchers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/vouchers/sublist/{VoucherSeries}": {
      "get": {
        "operationId": "listSeries",
        "parameters": [
          {
            "description": "identifies the voucher series",
            "in": "path",
            "name": "VoucherSeries",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter on financial year",
            "in": "query",
            "name": "financialyear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherListItem_List"
                }
              }
            },
            "description": "list of vouchers"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of vouchers for a specific series",
        "tags": [
          "fortnox_Vouchers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/vouchers/{VoucherSeries}/{VoucherNumber}": {
      "get": {
        "operationId": "get_57",
        "parameters": [
          {
            "description": "identifies the voucher series",
            "in": "path",
            "name": "VoucherSeries",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "identifies the voucher number",
            "in": "path",
            "name": "VoucherNumber",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "filter on financial year",
            "in": "query",
            "name": "financialyear",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_Voucher_Wrap"
                }
              }
            },
            "description": "a single voucher"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a specific voucher",
        "tags": [
          "fortnox_Vouchers"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/3/voucherseries": {
      "get": {
        "description": "The voucher series register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_47",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherSeriesListItem_List"
                }
              }
            },
            "description": "a list of voucher series."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of voucher series",
        "tags": [
          "fortnox_VoucherSeries"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_48",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_VoucherSeries_Wrap"
              }
            }
          },
          "description": "to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherSeries_Wrap"
                }
              }
            },
            "description": "the created voucher series"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a voucher series",
        "tags": [
          "fortnox_VoucherSeries"
        ],
        "x-codegen-request-body-name": "voucherSeries",
        "x-fn-is-public": "true"
      }
    },
    "/3/voucherseries/{Code}": {
      "get": {
        "operationId": "get_58",
        "parameters": [
          {
            "description": "identifies the voucher series",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherSeries_Wrap"
                }
              }
            },
            "description": "the existing voucher series"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single voucher series",
        "tags": [
          "fortnox_VoucherSeries"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_43",
        "parameters": [
          {
            "description": "identifies the voucher series",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_VoucherSeries_Wrap"
              }
            }
          },
          "description": "to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_VoucherSeries_Wrap"
                }
              }
            },
            "description": "the updated voucher series"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a voucher series",
        "tags": [
          "fortnox_VoucherSeries"
        ],
        "x-codegen-request-body-name": "voucherSeries",
        "x-fn-is-public": "true"
      }
    },
    "/3/wayofdeliveries": {
      "get": {
        "description": "The way of delivery register can return a list of records or a single record. By specifying a Code in the URL, a single record will be returned. Not specifying a Code will return a list of records.",
        "operationId": "list_48",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_WayOfDelivery_List"
                }
              }
            },
            "description": "a list of way of deliveries"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a list of way of deliveries",
        "tags": [
          "fortnox_WayOfDeliveries"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_49",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_WayOfDelivery_Wrap"
              }
            }
          },
          "description": "way of delivery to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_WayOfDelivery_Wrap"
                }
              }
            },
            "description": "the created way of delivery"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Create a way of delivery",
        "tags": [
          "fortnox_WayOfDeliveries"
        ],
        "x-codegen-request-body-name": "wayOfDelivery",
        "x-fn-is-public": "true"
      }
    },
    "/3/wayofdeliveries/{Code}": {
      "delete": {
        "operationId": "remove_26",
        "parameters": [
          {
            "description": "identifies the way of delivery",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Remove a way of delivery",
        "tags": [
          "fortnox_WayOfDeliveries"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "get_59",
        "parameters": [
          {
            "description": "identifies the way of delivery",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_WayOfDelivery_Wrap"
                }
              }
            },
            "description": "the existing way of delivery"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Retrieve a single way of delivery",
        "tags": [
          "fortnox_WayOfDeliveries"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_44",
        "parameters": [
          {
            "description": "identifies the way of delivery",
            "in": "path",
            "name": "Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fortnox_WayOfDelivery_Wrap"
              }
            }
          },
          "description": "way of delivery to update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_WayOfDelivery_Wrap"
                }
              }
            },
            "description": "the updated way of delivery"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fortnox_ErrorInformationWrap"
                }
              }
            },
            "description": "Error information if the request did not succeed"
          }
        },
        "summary": "Update a way of delivery",
        "tags": [
          "fortnox_WayOfDeliveries"
        ],
        "x-codegen-request-body-name": "wayOfDelivery",
        "x-fn-is-public": "true"
      }
    },
    "/api/fileattachments/attachments-v1": {
      "get": {
        "operationId": "getAttachments",
        "parameters": [
          {
            "description": "ids of the entities whose attachments should be fetched",
            "explode": true,
            "in": "query",
            "name": "entityid",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "type of the entities whose attachments should be fetched",
            "in": "query",
            "name": "entitytype",
            "required": true,
            "schema": {
              "enum": [
                "OF",
                "O",
                "F",
                "C",
                "LGR_IO",
                "LGR_IG"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_Attachment"
                }
              }
            },
            "description": "A list of attachments"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get attached files on an entity",
        "tags": [
          "fileattachments_Attachment"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "attach",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/fileattachments_Attachment"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of attachments"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_Attachment"
                }
              }
            },
            "description": "A list of attachments"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Attach files to one or more entities",
        "tags": [
          "fileattachments_Attachment"
        ],
        "x-codegen-request-body-name": "attachments",
        "x-fn-is-public": "true"
      }
    },
    "/api/fileattachments/attachments-v1/numberofattachments": {
      "get": {
        "operationId": "getNumberOfAttachmentsForEntity",
        "parameters": [
          {
            "description": "ids of the entities to look for number of attachments on",
            "explode": true,
            "in": "query",
            "name": "entityids",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "type of the entities  to look for number of attachments on",
            "in": "query",
            "name": "entitytype",
            "required": true,
            "schema": {
              "enum": [
                "OF",
                "O",
                "F",
                "C",
                "LGR_IO",
                "LGR_IG"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_NumberOfAttachments"
                }
              }
            },
            "description": "A list of the number of attachments on each entity"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List number of attachments",
        "tags": [
          "fileattachments_Attachment"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/fileattachments/attachments-v1/validateincludedonsend": {
      "post": {
        "operationId": "validateIncludedOnSend",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/fileattachments_Attachment"
                },
                "type": "array"
              }
            }
          },
          "description": "a list of Attachments"
        },
        "responses": {
          "204": {
            "description": "Successfully created a new resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Validates a list of attachments that will be included on send",
        "tags": [
          "fileattachments_Attachment"
        ],
        "x-codegen-request-body-name": "attachments",
        "x-fn-is-public": "true"
      }
    },
    "/api/fileattachments/attachments-v1/{attachmentId}": {
      "delete": {
        "operationId": "detach",
        "parameters": [
          {
            "description": "id of the attachment to be detached",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Detach file",
        "tags": [
          "fileattachments_Attachment"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "updateAttachment",
        "parameters": [
          {
            "description": "id of the attachment to be updated",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/fileattachments_Attachment"
              }
            }
          },
          "description": "an attachment"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_Attachment"
                }
              }
            },
            "description": "The updated attachment"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fileattachments_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update attachment",
        "tags": [
          "fileattachments_Attachment"
        ],
        "x-codegen-request-body-name": "attachment",
        "x-fn-is-public": "true"
      }
    },
    "/api/integration-developer/ratings-v1": {
      "get": {
        "operationId": "listRatings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/integration-developer_RatingDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "list of ratings"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-developer_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List rating and reviews for integrations that you own",
        "tags": [
          "integration-developer_Integration Ratings"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/integration-developer/sales-v1/{integrationId}": {
      "get": {
        "description": "<p>\n Prerequisites\n The partner has an active developer account and a published integration that is purchased through Fortnox.",
        "operationId": "getSalesForSingleIntegration",
        "parameters": [
          {
            "description": "of the integration to look up sales information for",
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/integration-developer_IntegrationSalesResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-developer_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Resolves sales information of an integration",
        "tags": [
          "integration-developer_IntegrationSales"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/integration-partner/apps/sales-v1/{appId}": {
      "get": {
        "description": "<h3>Prerequisites</h3>\n The partner has an active developer account and a published integration that is purchased through Fortnox.",
        "operationId": "getAppSalesForSingleApp",
        "parameters": [
          {
            "description": "clientId of the integration to look up sales information for",
            "in": "path",
            "name": "appId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-partner_AppSalesResponse"
                }
              }
            },
            "description": "a <code>AppSalesResponse</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-partner_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Resolves sales information and active users of an integration",
        "tags": [
          "integration-partner_Integration Sales"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/integration-partner/apps/sales-v1/{appId}/{tenantId}": {
      "get": {
        "description": "<h3>Prerequisites</h3>\n The partner has an active developer account and a published integration that is purchased through Fortnox.",
        "operationId": "getAppSalesForSingleAppAndTenant",
        "parameters": [
          {
            "description": "clientId of the integration to look up sales information for",
            "in": "path",
            "name": "appId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tenantId of the tenant to look up sales information for",
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-partner_AppSalesResponse"
                }
              }
            },
            "description": "a <code>AppSalesResponse</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-partner_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Resolves sales information and active users of an integration",
        "tags": [
          "integration-partner_Integration Sales"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/time/articles-v1": {
      "get": {
        "description": "<p>\n <b>Response property descriptions:</b><br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>id</i></b> - The unique id of a basic common combination of article registrations. (The basic common combination means \"user/purchase date/customer/project/cost center\", which leads to a dialog with several article registrations.)<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>purchaseDate</i></b> - The date on which the article is purchased or registered for charging.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>ownerId</i></b> - The user ID who creates the basic common combination.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>version</i></b> - The version of the basic common combination (article dialog) being updated, which is used for handling the concurrency issue.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>registrationType</i></b> - It is always \"ARTICLE\" for article list endpoint.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b>Sub-Class - ArticleRegistration:</b><br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>id</i></b> - The unique id of an article registration.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>registrationId</i></b> - The id of the basic common combination.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>orderIndex</i></b> - the order index for the article registration in regard of the common combination.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>ownerId</i></b> - The user ID who owns the article registration.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>totalQuantity</i></b> - The quantity of the article.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>unitPrice</i></b> - The unit price connected to the article registration, which might be locked on an invoice/order basis or for non-invoiceable.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>unitCost</i></b> - The unit cost connected to the article registration, which might be locked on an invoice/order basis.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>invoiceBasisId</i></b> - The ID of invoice/order basis which is used for creating an invoice/order.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>nonInvoiceable</i></b> - If the article registration would be ignored for charging or not.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>note</i></b> - The note on the article registration.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>documentId</i></b> - The document ID which includes the article registration and is created in Invoicing application.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        <b><i>documentType</i></b> - The document type which could be \"invoice\" or \"order\".\n </p>",
        "operationId": "1_list_8",
        "parameters": [
          {
            "description": "The start date of the search span, the max of which should be 1 year to the end date (\"toDate\").\n Example: 2022-11-01",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "The end date of the search span, the max of which should be 1 year back to the start date (\"fromDate\").\n Example: 2022-11-30",
            "in": "query",
            "name": "toDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "An array of customer IDs which are being used in database and in one-to-one relation with customer numbers.\n Example: 100,101,102",
            "explode": true,
            "in": "query",
            "name": "customerIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of project IDs.\n Example: p1,p2,p3",
            "explode": true,
            "in": "query",
            "name": "projectIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "If the article registration without project is included, or not.",
            "in": "query",
            "name": "includeRegistrationsWithoutProject",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "An array of article IDs.\n Example: s1,s2,s3",
            "explode": true,
            "in": "query",
            "name": "itemIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of cost center IDs.\n Example: cc1,cc2,cc3",
            "explode": true,
            "in": "query",
            "name": "costCenterIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of user ids who own the article registrations.\n Example: 1,2,3",
            "explode": true,
            "in": "query",
            "name": "ownerIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "If a document is created with the article registration, or not.",
            "in": "query",
            "name": "invoiced",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the article registration is locked on an invoice basis, or not.",
            "in": "query",
            "name": "inInvoiceBasis",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the article registration is internal, which is registered on an internal customer, or not.",
            "in": "query",
            "name": "internalArticles",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the article registration has been moved to non-invoiceable, or not.",
            "in": "query",
            "name": "nonInvoiceable",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the price of the non-invoiceable article registration is included, or not.",
            "in": "query",
            "name": "includeNonInvoiceablePrice",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/time-reporting_BaseArticleRegistration"
                  },
                  "type": "array"
                }
              }
            },
            "description": "list of article registrations  <code>BaseArticleRegistration</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/time-reporting_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get full article registrations that match filter",
        "tags": [
          "time-reporting_Articles"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/time/registrations-v2": {
      "get": {
        "description": "<p>\n <b>Response property descriptions:</b><br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>id</i></b> - The unique id of the registration.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>userId</i></b> - The user ID who owns the registration.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>workedDate</i></b> - The date for which the registration is created.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>workedHours</i></b> - The time spent, or the time of absence.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>startTime</i></b> - The start of clock time.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>stopTime</i></b> - The end of clock time.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>invoiceText</i></b> - The text to be included in the invoice/order basis which would be used to create an invoice/order.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>note</i></b> - The note on the registration.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>chargeHours</i></b> - The time to be invoiced, or 0 for the absence, or locked for non-invoiceable.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>childId</i></b> - The child ID related to the absence registration of parental leave (FPE), which comes from Payroll application.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>nonInvoiceable</i></b> - If the registration would be ignored for charging or not.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>invoiceBasisId</i></b> - The ID of invoice/order basis which is used for creating an invoice/order.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>documentId</i></b> - The document ID which includes the registration and is created in Invoicing application.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>documentType</i></b> - The document type which could be \"invoice\" or \"order\".<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>unitCost</i></b> - The unit cost from the registration owner who takes the work.<br/>\n &nbsp;&nbsp;&nbsp;&nbsp;    <b><i>unitPrice</i></b> - The unit price for the service on the registration, which comes in priority from \"invoice/order basis\", \"price group\" or \"service\".\n <p>",
        "operationId": "1_list_2",
        "parameters": [
          {
            "description": "The start date of the search span, the max of which should be 1 year to the end date (\"toDate\").\n Example: 2022-11-01",
            "in": "query",
            "name": "fromDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "The end date of the search span, the max of which should be 1 year back to the start date (\"fromDate\").\n Example: 2022-11-30",
            "in": "query",
            "name": "toDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "An array of customer IDs which are being used in database and in one-to-one relation with customer numbers.\n Example: 100,101,102",
            "explode": true,
            "in": "query",
            "name": "customerIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of project IDs.\n Example: p1,p2,p3",
            "explode": true,
            "in": "query",
            "name": "projectIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of service IDs.\n Example: s1,s2,s3",
            "explode": true,
            "in": "query",
            "name": "serviceIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of cost center IDs.\n Example: cc1,cc2,cc3",
            "explode": true,
            "in": "query",
            "name": "costCenterIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of registration codes.\n Example: TID,SEM,FPE",
            "explode": true,
            "in": "query",
            "name": "regCodes",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "An array of user IDs that time/absence registrations belong to.\n Example: 1,2,3",
            "explode": true,
            "in": "query",
            "name": "userIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "If the time/absence registration without project is included, or not.",
            "in": "query",
            "name": "includeRegistrationsWithoutProject",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If a document is created with the time/absence registration, or not.",
            "in": "query",
            "name": "invoiced",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the time/absence registration is locked on an invoice basis, or not.",
            "in": "query",
            "name": "inInvoiceBasis",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the time/absence registration is internal, which is registered on an internal customer, or not.",
            "in": "query",
            "name": "internalTime",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the time/absence registration has been moved to non-invoiceable, or not.",
            "in": "query",
            "name": "nonInvoiceable",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If the price of the non-invoiceable time/absence registration is included, or not.",
            "in": "query",
            "name": "includeNonInvoiceableChargeHours",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/time-reporting_DetailedRegistration"
                  },
                  "type": "array"
                }
              }
            },
            "description": "list of registrations <code>DetailedRegistration</code>\n <b>Note</b>: used by mobile client and in detailed chargeable units"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/time-reporting_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get time/absence registrations that match filter",
        "tags": [
          "time-reporting_Registrations"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1": {
      "get": {
        "operationId": "1_getAll",
        "parameters": [
          {
            "description": "Include only documents with given state.",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "all",
                "unreleased",
                "released",
                "voided"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only documents with given type.",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "all",
                "inbound",
                "outbound",
                "stocktransfer"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only documents containing the given item.",
            "in": "query",
            "name": "itemId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualDocument"
                }
              }
            },
            "description": "A list of manual documents."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List manual documents",
        "tags": [
          "warehouse_ManualDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/inbounddeliveries": {
      "post": {
        "description": "<p>\n The <code>id</code> is set automatically.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ManualInboundDocument"
              }
            }
          },
          "description": "manual inbound document"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualInboundDocument"
                }
              }
            },
            "description": "the <code>ManualInboundDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create manual inbound document",
        "tags": [
          "warehouse_ManualInboundDocument"
        ],
        "x-codegen-request-body-name": "manualInboundDocument",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/inbounddeliveries/{id}": {
      "get": {
        "operationId": "get",
        "parameters": [
          {
            "description": "Manual Inbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualInboundDocument"
                }
              }
            },
            "description": "the <code>ManualInboundDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get manual inbound document",
        "tags": [
          "warehouse_ManualInboundDocument"
        ],
        "x-fn-is-public": "true"
      },
      "patch": {
        "description": "<p>\n When a Manual Inbound has been released, it is locked.\n The <code>note</code> field can still be updated using this endpoint.",
        "operationId": "updateNote",
        "parameters": [
          {
            "description": "Manual Inbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ManualInboundDocumentPatch"
              }
            }
          },
          "description": "Note."
        },
        "responses": {
          "204": {
            "description": "Successfully applied partial modifications to the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update note on manual inbound document",
        "tags": [
          "warehouse_ManualInboundDocument"
        ],
        "x-codegen-request-body-name": "manualInboundDocumentPatch",
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update",
        "parameters": [
          {
            "description": "Manual Inbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ManualInboundDocument"
              }
            }
          },
          "description": "Manual Inbound document"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualInboundDocument"
                }
              }
            },
            "description": "the <code>ManualInboundDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update manual inbound document",
        "tags": [
          "warehouse_ManualInboundDocument"
        ],
        "x-codegen-request-body-name": "manualInboundDocument",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/inbounddeliveries/{id}/release": {
      "put": {
        "description": "<p>\n The document will be locked and bookkept.\n <p>\n The following error codes might be thrown:\n  <dl>\n  <dt>cannot_release_later_than_current_date</dt>\n    <dd>Document date cannot be in the future.</dd>\n  <dt>document_is_voided</dt>\n    <dd>Document is voided.</dd>\n  <dt>period_locked</dt>\n    <dd>Document date is within a locked bookkeeping period.</dd>\n  </dl>",
        "operationId": "release",
        "parameters": [
          {
            "description": "Manual Inbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release manual inbound document",
        "tags": [
          "warehouse_ManualInboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/inbounddeliveries/{id}/void": {
      "put": {
        "description": "<p>\n A released manual inbound document might have connected outbounds, and can only be force voided.\n Note that a force void operation might cause a negative stock.\n <p>\n The following error codes might be thrown:\n  <dl>\n  <dt>void_linked_outbound</dt>\n    <dd>If this document has any outbounds transactions connected to it.</dd>\n  </dl>",
        "operationId": "voidDocument",
        "parameters": [
          {
            "description": "Manual Inbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "true if we should force void, defaults to false",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "date the void operation should be bookkeept on",
            "in": "query",
            "name": "customVoidDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void manual inbound document",
        "tags": [
          "warehouse_ManualInboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/outbounddeliveries": {
      "post": {
        "description": "<p>\n The <code>id</code> is set automatically.",
        "operationId": "1_create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ManualOutboundDocument"
              }
            }
          },
          "description": "manual outbound document"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualOutboundDocument"
                }
              }
            },
            "description": "the <code>ManualOutboundDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create manual outbound document",
        "tags": [
          "warehouse_ManualOutboundDocument"
        ],
        "x-codegen-request-body-name": "manualOutboundDocument",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/outbounddeliveries/{id}": {
      "get": {
        "operationId": "1_get_1",
        "parameters": [
          {
            "description": "Manual Outbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualOutboundDocument"
                }
              }
            },
            "description": "the <code>ManualOutboundDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get manual outbound document",
        "tags": [
          "warehouse_ManualOutboundDocument"
        ],
        "x-fn-is-public": "true"
      },
      "patch": {
        "description": "<p>\n When a Manual Outbound has been released, it is locked.\n The <code>note</code> field can still be updated using this endpoint.",
        "operationId": "updateNote_1",
        "parameters": [
          {
            "description": "Manual Outbound document id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ManualOutboundDocumentPatch"
              }
            }
          },
          "description": "Note."
        },
        "responses": {
          "204": {
            "description": "Successfully applied partial modifications to the resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update note on manual outbound document",
        "tags": [
          "warehouse_ManualOutboundDocument"
        ],
        "x-codegen-request-body-name": "manualOutboundDocumentPatch",
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "<p>\n HTTP code 400 cannot_modify_released_document\n HTTP code 400 document_is_voided Document is voided.\n HTTP code 404 not found",
        "operationId": "update_1",
        "parameters": [
          {
            "description": "Manual Outbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ManualOutboundDocument"
              }
            }
          },
          "description": "Manual Outbound document."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ManualOutboundDocument"
                }
              }
            },
            "description": "the <code>ManualOutboundDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update manual outbound document",
        "tags": [
          "warehouse_ManualOutboundDocument"
        ],
        "x-codegen-request-body-name": "manualOutboundDocument",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/outbounddeliveries/{id}/release": {
      "put": {
        "description": "<p>\n The document will be locked and bookkept.\n <p>\n The following error codes might be thrown:\n  <dl>\n  <dt>cannot_release_later_than_current_date</dt>\n    <dd>Document date cannot be in the future.</dd>\n  <dt>document_is_voided</dt>\n    <dd>Document is voided.</dd>\n  <dt>period_locked</dt>\n    <dd>Document date is within a locked bookkeeping period.</dd>\n  </dl>",
        "operationId": "release_1",
        "parameters": [
          {
            "description": "Manual Outbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release manual outbound document",
        "tags": [
          "warehouse_ManualOutboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/deliveries-v1/outbounddeliveries/{id}/void": {
      "put": {
        "operationId": "voidDocument_1",
        "parameters": [
          {
            "description": "Manual Outbound document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "if provided this date will be used as the voided date instead of the document date",
            "in": "query",
            "name": "customVoidDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void manual outbound document",
        "tags": [
          "warehouse_ManualOutboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/documenttypes-v1": {
      "get": {
        "operationId": "getAll_6",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_CustomDocumentType"
                }
              }
            },
            "description": "A list of <code>CustomDocumentTypes</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List custom document types",
        "tags": [
          "warehouse_CustomDocumentType"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "Create type, if it doesn't already exists. Note that new custom document types are\n created automatically when you create custom documents, so normally\n you do not need to call this method.\n\n Throws HTTP 400 <code>referenceTypeNotAllowed</code> if the name of the type is not allowed.",
        "operationId": "create_8",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_CustomDocumentType"
              }
            }
          },
          "description": "The <code>CustomDocumentType</code>."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": "`1` if created, else `0` if type already exists."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create custom document type",
        "tags": [
          "warehouse_CustomDocumentType"
        ],
        "x-codegen-request-body-name": "customDocumentType",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/documenttypes-v1/{type}": {
      "get": {
        "operationId": "get_11",
        "parameters": [
          {
            "description": "the name of the reference type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_CustomDocumentType"
                }
              }
            },
            "description": "A <code>CustomDocumentType</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get custom document type",
        "tags": [
          "warehouse_CustomDocumentType"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}": {
      "get": {
        "operationId": "get_12",
        "parameters": [
          {
            "description": "Document type.",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_CustomInboundDocument"
                }
              }
            },
            "description": "The <code>CustomInboundDocument</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get custom inbound document",
        "tags": [
          "warehouse_CustomInboundDocument"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "save",
        "parameters": [
          {
            "description": "min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive\n <blockquote><pre>\n      Type is a custom name/reference of the document that will be used to reference the document type <br>\n      * If type is not known, it will be registered as belonging to the INBOUND category. <br>\n      * If type is an existing custom document type of category OUTBOUND an error is thrown. <br>\n      * If type is invalid an error is thrown. <br>\n </pre></blockquote>",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "min 1 character, max 25 characters, may only contain digits 0-9",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_CustomInboundDocument"
              }
            }
          },
          "description": "the <code>CustomInboundDocument</code> to create"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_CustomInboundDocument"
                }
              }
            },
            "description": "the stored <code>CustomInboundDocument</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Save custom inbound document",
        "tags": [
          "warehouse_CustomInboundDocument"
        ],
        "x-codegen-request-body-name": "document",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}/release": {
      "put": {
        "description": "The document will be locked and bookkept.\n The inbound deliveries will affect available stock.",
        "operationId": "release_4",
        "parameters": [
          {
            "description": "document type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "document id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release custom inbound document",
        "tags": [
          "warehouse_CustomInboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/inbound-v1/{type}/{id}/void": {
      "put": {
        "description": "Voiding a document will undo the possible stock changes that the document had made,\n note that the document and the transactions created are not deleted. Some limitations apply, see below.",
        "operationId": "voidDocument_2",
        "parameters": [
          {
            "description": "document type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "document id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "true if the document should be voided even if the document has connected outbounds, defaults to false.",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void custom inbound document",
        "tags": [
          "warehouse_CustomInboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/outbound-v1/{type}/{id}": {
      "get": {
        "operationId": "1_get_13",
        "parameters": [
          {
            "description": "document type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "document id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_CustomOutboundDocument"
                }
              }
            },
            "description": "the fetched <code>CustomOutboundDocument</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get custom outbound document",
        "tags": [
          "warehouse_CustomOutboundDocument"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "<br>\n If type is not known, it will be registered as belonging to the OUTBOUND category.<br>\n If type is an existing custom document type of category INBOUND an error is thrown.<br>\n If type is invalid an error is thrown.<br>",
        "operationId": "save_1",
        "parameters": [
          {
            "description": "the type of the custom outbound document, min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-). Always stored as upper case.",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the id of the custom outbound document, min 1 character, max 25 characters, may only contain digits 0-9",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_CustomOutboundDocument"
              }
            }
          },
          "description": "the <code>CustomOutboundDocument</code> to create"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_CustomOutboundDocument"
                }
              }
            },
            "description": "the stored <code>CustomOutboundDocument</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Save a custom outbound document",
        "tags": [
          "warehouse_CustomOutboundDocument"
        ],
        "x-codegen-request-body-name": "document",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/outbound-v1/{type}/{id}/release": {
      "put": {
        "operationId": "release_5",
        "parameters": [
          {
            "description": "document type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "document id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release custom outbound document",
        "tags": [
          "warehouse_CustomOutboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/documentdeliveries/custom/outbound-v1/{type}/{id}/void": {
      "put": {
        "operationId": "voidDocument_3",
        "parameters": [
          {
            "description": "document type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "document id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "true if the document should be voided even if the document has connected outbounds, defaults to false.",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void custom outbound document",
        "tags": [
          "warehouse_CustomOutboundDocument"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/incominggoods-v1": {
      "get": {
        "description": "<p>\n     List incoming goods documents matching the given parameters.\n </p>\n <p>\n     Sortable fields:\n     <code>id</code>,\n     <code>has_delivery_note</code>,\n     <code>delivery_note_id</code>,\n     <code>supplier_number</code>,\n     <code>date</code>\n </p>",
        "operationId": "getAll_7",
        "parameters": [
          {
            "description": "`true` to include only released documents.\n `false` to include only non-released documents.",
            "in": "query",
            "name": "released",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "`true` to include only completed documents.\n `false` to include only non-completed documents.",
            "in": "query",
            "name": "completed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "`true` to include only voided documents.\n `false` to include only non-voided documents.",
            "in": "query",
            "name": "voided",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include only documents with the given `supplierNumber`.",
            "in": "query",
            "name": "supplierNumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `itemId`.",
            "in": "query",
            "name": "itemId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `note`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "note",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `deliveryNote`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "deliveryNote",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `id` or `deliveryNote`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/warehouse_IncomingGoodsListRow"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of <code>IncomingGoods</code> documents."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List Incoming Goods Documents",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_9",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_IncomingGoods"
              }
            }
          },
          "description": "The <code>IncomingGoods</code> document."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_IncomingGoods"
                }
              }
            },
            "description": "The created <code>IncomingGoods</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-codegen-request-body-name": "incomingGoods",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/incominggoods-v1/{id}": {
      "get": {
        "operationId": "1_get_15",
        "parameters": [
          {
            "description": "Incoming goods document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "This Supplier Invoice id will be excluded when calculating the takenQuantity.",
            "in": "query",
            "name": "ignoreSupplierInvoiceId",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_IncomingGoods"
                }
              }
            },
            "description": "The <code>IncomingGoods</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-fn-is-public": "true"
      },
      "patch": {
        "description": "Perform a partial update of an <code>IncomingGoods</code> document. The partial update will update\n <code>note</code>, <code>deliveryNoteId</code>, <code>supplierName</code> and <code>hasDeliveryNote</code>\n It is possible to perform a partial update of a released/completed (TODO: ?) document.",
        "operationId": "patch",
        "parameters": [
          {
            "description": "Incoming goods document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_IncomingGoods"
              }
            }
          },
          "description": "the incoming goods document to update. The partial update updates\n                      <code>note</code>, <code>deliveryNoteId</code>, <code>supplierName</code> and <code>hasDeliveryNote</code>"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_IncomingGoods"
                }
              }
            },
            "description": "The updated <code>IncomingGoods</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Partial update Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-codegen-request-body-name": "incomingGoods",
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "save_2",
        "parameters": [
          {
            "description": "Incoming goods document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_IncomingGoods"
              }
            }
          },
          "description": "The <code>IncomingGoods</code> document."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_IncomingGoods"
                }
              }
            },
            "description": "The updated <code>IncomingGoods</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-codegen-request-body-name": "incomingGoods",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/incominggoods-v1/{id}/completed": {
      "put": {
        "description": "Mark a released Incoming Goods document as Completed.\n Bookkeeping will be finalized.\n A Completed Incoming Goods document cannot be matched against\n any more Supplier Invoices.",
        "operationId": "completed",
        "parameters": [
          {
            "description": "Incoming goods document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Date for bookkeeping in format `\"YYYY-MM-DD\"`. Must be between document's release date (inclusive) and today's date (inclusive)."
        },
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Complete Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-codegen-request-body-name": "bookingDate",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/incominggoods-v1/{id}/release": {
      "put": {
        "description": "The document will be locked and bookkept.\n The inbound deliveries will affect available stock.",
        "operationId": "release_6",
        "parameters": [
          {
            "description": "Incoming goods document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/incominggoods-v1/{id}/void": {
      "put": {
        "description": "Void a document.\n If an Incoming Goods document has been Completed, or matched against\n Supplier Invoice, it cannot be voided.",
        "operationId": "voidDocument_4",
        "parameters": [
          {
            "description": "Incoming goods document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void Incoming Goods document",
        "tags": [
          "warehouse_IncomingGoods"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/productionorders-v1": {
      "get": {
        "operationId": "getAll_8",
        "parameters": [
          {
            "description": "Include only production orders with the given state.\n              Allowed states: all, incomplete, delayed, completed, voided.\n              (Default is incomplete)",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "all",
                "incomplete",
                "delayed",
                "completed",
                "voided"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only production orders with the given production item.",
            "in": "query",
            "name": "itemId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ProductionOrder"
                }
              }
            },
            "description": "A list of <code>ProductionOrders</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List production orders",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "<p>\n Set <code>itemId</code> to the item to be produced.\n <p>\n Set <code>quantity</code> to number of units to produce.\n <p>\n Set <code>startDate</code> to production start state.\n <p>\n ProductionState is set to <code>reserved</code> by default.\n It can also be <code>registered</code>. Then no reservations\n will be made (no quantities will be assigned to the <code>packageItems</code> yet).\n <p>\n Setting <code>outboundStockPointId</code> (where the <code>packageItems</code>\n will be taken from), and <code>inboundStockPointId</code> (where the\n produced item will be put) is mandatory multiple stockpoints has been activated\n in the warehouse settings.\n <p>\n Before the document is released, the <code>productionDate</code> must be set.\n <p>\n The <code>packageItems</code> to include is easiest to get by calling\n the method <code>getRequiredProductionParts</code>.",
        "operationId": "1_create_10",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ProductionOrder"
              }
            }
          },
          "description": "the production order to create <code>ProductionOrder</code>"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ProductionOrder"
                }
              }
            },
            "description": "the <code>ProductionOrder</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create a new production order",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-codegen-request-body-name": "productionOrder",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/productionorders-v1/billofmaterials/{itemId}": {
      "get": {
        "description": "<p>\n If no parameters are supplied, the <code>totalQuantityRequired</code> for producing 1 unit is returned.\n <p>\n Query parameter <code>quantity</code> can optionally be supplied, which will\n calculate <code>totalQuantityRequired</code>.\n <p>\n If query parameter <code>id</code> is supplied, it will get the quantity from that\n Production Order (the <code>quantity</code> query parameter is ignored if <code>id</code>\n is included).",
        "operationId": "getRequiredProductionParts",
        "parameters": [
          {
            "description": "Production Article id",
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the id of the production order (optional)",
            "in": "query",
            "name": "id",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "the quantity of the production order (assumed 1 if left empty)",
            "in": "query",
            "name": "quantity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PackageItem"
                }
              }
            },
            "description": "A list of <code>PackageItems</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get the package items (Bill Of Materials, BOMs) for a production article",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/productionorders-v1/release/{id}": {
      "put": {
        "description": "<p>\n The document will be locked and bookkept.\n <p>\n The following error codes might be thrown:\n  <dl>\n  <dt>PRODUCTION_DATE_IS_EMPTY</dt>\n    <dd>Production date cannot be empty.</dd>\n  <dt>CANNOT_RELEASE_AFTER_CURRENT_DATE</dt>\n    <dd>Document date cannot be in the future.</dd>\n  <dt>DOCUMENT_IS_VOIDED</dt>\n    <dd> The document has been voided and can no longer be modified.</dd>\n  <dt>DOCUMENT_IS_RELEASED</dt>\n    <dd>The document has already been released and can no longer be modified.</dd>\n  <dt>DOCUMENT_NOT_FULLY_RESERVED</dt>\n    <dd>The documents package items (BOMs, Bill Of Materials) has not been fully reserved\n    (reserved quantity is not equal to total required quantity for one or more package item).</dd>\n  </dl>",
        "operationId": "release_7",
        "parameters": [
          {
            "description": "Production Order document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ProductionOrder"
                }
              }
            },
            "description": "the <code>ProductionOrder</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release a production order document",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/productionorders-v1/void/{id}": {
      "put": {
        "description": "<p>\n A released production order might have connected outbounds, and can only be force voided.\n Note that a force void operation might cause a negative stock.",
        "operationId": "voidProductionOrder",
        "parameters": [
          {
            "description": "Production Order document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "true to force void a released document, default false",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void a production order",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/productionorders-v1/{id}": {
      "get": {
        "operationId": "get_16",
        "parameters": [
          {
            "description": "Production Order document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ProductionOrder"
                }
              }
            },
            "description": "the <code>ProductionOrder</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get Production Order document",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-fn-is-public": "true"
      },
      "patch": {
        "description": "<p>\n When a Production Order has been released it is locked.\n However, the <code>note</code> field can still be updated using this endpoint.",
        "operationId": "updateNote_2",
        "parameters": [
          {
            "description": "Production Order document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ProductionOrderPatch"
              }
            }
          },
          "description": "contains data to be patched onto the production order"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ProductionOrder"
                }
              }
            },
            "description": "the <code>ProductionOrder</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update the note of a production order",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-codegen-request-body-name": "productionOrderPatch",
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "<p>\n Note that you must submit the full Production Order document\n when updating.",
        "operationId": "update_5",
        "parameters": [
          {
            "description": "Production Order document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ProductionOrder"
              }
            }
          },
          "description": "the production order data see <code>ProductionOrder</code>"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ProductionOrder"
                }
              }
            },
            "description": "the <code>ProductionOrder</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update a production order",
        "tags": [
          "warehouse_ProductionOrder"
        ],
        "x-codegen-request-body-name": "productionOrder",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1": {
      "get": {
        "description": "<p>\n List purchase orders matching the given parameters.\n </p>\n <p>\n Sortable fields:\n <code>id</code>,\n <code>supplier_number</code>,\n <code>order_date</code>,\n <code>internal_reference</code>,\n <code>response_state</code>,\n <code>delivery_date</code>\n </p>",
        "operationId": "getAll_9",
        "parameters": [
          {
            "description": "Include only documents where `id` or `internalReference`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `supplierNumber`.",
            "in": "query",
            "name": "supplierNumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `purchaseOrderState`.",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "NOT_SENT",
                "SENT",
                "SENT_NOT_REJECTED",
                "DELAYED",
                "RECEIVED",
                "VOIDED",
                "CURRENT",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `itemId`.",
            "in": "query",
            "name": "itemId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `purchaseType`",
            "in": "query",
            "name": "purchaseType",
            "schema": {
              "enum": [
                "WAREHOUSE",
                "DROPSHIP"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `internalReference' contains the given text (case-insensitive).",
            "in": "query",
            "name": "internalReference",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `note`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "note",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrder"
                }
              }
            },
            "description": "A list of <code>PurchaseOrders</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List Purchase Orders",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "operationId": "create_11",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_PurchaseOrder"
              }
            }
          },
          "description": "<code>PurchaseOrder</code> document."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrder"
                }
              }
            },
            "description": "The created <code>PurchaseOrder</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create Purchase Order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "purchaseOrder",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/csv": {
      "get": {
        "operationId": "getCsvReport",
        "parameters": [
          {
            "description": "Include only documents where `id` or `internalReference`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `supplierNumber`.",
            "in": "query",
            "name": "supplierNumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `purchaseOrderState`.",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "NOT_SENT",
                "SENT",
                "SENT_NOT_REJECTED",
                "DELAYED",
                "RECEIVED",
                "VOIDED",
                "CURRENT",
                "ALL"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `itemId`.",
            "in": "query",
            "name": "itemId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents with the given `purchaseType`",
            "in": "query",
            "name": "purchaseType",
            "schema": {
              "enum": [
                "WAREHOUSE",
                "DROPSHIP"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `internalReference' contains the given text (case-insensitive).",
            "in": "query",
            "name": "internalReference",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only documents where `note`-field contains the given text (case-insensitive).",
            "in": "query",
            "name": "note",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "True to include the purchase type column, default is false.",
            "in": "query",
            "name": "showPurchaseTypeColumn",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "A list of <code>PurchaseOrders</code>."
          },
          "default": {
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get CSV list of Purchase Orders",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/response": {
      "put": {
        "operationId": "batchUpdateResponseState",
        "parameters": [
          {
            "description": "List of purchase order ids.",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ResponseStateChange"
              }
            }
          },
          "description": "The new response state."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrder"
                }
              }
            },
            "description": "a list of the updated <code>PurchaseOrders</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update response states",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "responseStateChange",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/sendpurchaseorders": {
      "post": {
        "operationId": "sendPurchaseOrders",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              }
            }
          },
          "description": "List of Purchase order ids."
        },
        "responses": {
          "204": {
            "description": "Successfully created a new resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Sends multiple purchase orders via email",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "purchaseOrderIds",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}": {
      "get": {
        "operationId": "1_get_17",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "used for calculating the remaining ordered quantity. null will take the received quantity from all incoming goods",
            "in": "query",
            "name": "ignoreIncomingGoodsId",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrder"
                }
              }
            },
            "description": "The <code>PurchaseOrder</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get Purchase Order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "update_6",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_PurchaseOrder"
              }
            }
          },
          "description": "The <code>PurchaseOrder</code> document."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrder"
                }
              }
            },
            "description": "The updated <code>PurchaseOrder</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update Purchase Order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "purchaseOrder",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/complete": {
      "put": {
        "description": "<p>\n The purchase order will be treated as fully received.\n Any remaining quantity will be ignored.",
        "operationId": "setManuallyCompleted",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Manually complete Purchase Order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/dropshipcomplete": {
      "put": {
        "description": "<p>\n The dropship order will be treated as fully received.\n Any remaining quantity will be ignored.",
        "operationId": "setDropshipManuallyCompleted",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_ReleaseParentOrder"
                }
              }
            },
            "description": "<code>ReleaseParentOrder</code> status for release of parent order"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Manually complete dropship order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/matches": {
      "get": {
        "description": "<p>\n Get a list of <code>DocumentReference</code> of linked/connected purchase orders to incoming goods and/or invoice document.",
        "operationId": "getMatchedDocuments_1",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_DocumentReference"
                }
              }
            },
            "description": "list of document references"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List matched documents",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/notes": {
      "get": {
        "description": "<p>\n Get notes for a purchase order.",
        "operationId": "getAttachedNotes",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrderRowNote"
                }
              }
            },
            "description": "A list of <code>PurchaseOrderRowNotes</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get notes",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/partial": {
      "patch": {
        "description": "<p>\n Perform a partial update of a purchase order, see <code>PartialPurchaseOrder</code> for possible\n fields that are updateable.",
        "operationId": "updatePartial",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_PartialPurchaseOrder"
              }
            }
          },
          "description": "the changes for the purchase order, see <code>PartialPurchaseOrder</code>"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PartialPurchaseOrder"
                }
              }
            },
            "description": "the updated <code>PartialPurchaseOrder</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Partial update Purchase Order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "changes",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/response": {
      "put": {
        "operationId": "updateResponseState",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_ResponseStateChange"
              }
            }
          },
          "description": "The new response state."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_PurchaseOrder"
                }
              }
            },
            "description": "The updated <code>PurchaseOrder</code>"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update response state",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "responseStateChange",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/send": {
      "post": {
        "description": "<p>\n Sends the purchase order with the specified <code>id</code> to the recipient and sets the purchase order state to SENT",
        "operationId": "sendPurchaseOrder",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_PurchaseOrderMailSettings"
              }
            }
          },
          "description": "see <code>PurchaseOrderMailSettings</code>"
        },
        "responses": {
          "204": {
            "description": "Successfully created a new resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Send purchase order via email",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-codegen-request-body-name": "settings",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/purchaseorders-v1/{id}/void": {
      "put": {
        "operationId": "voidDocument_5",
        "parameters": [
          {
            "description": "Purchase order id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void Purchase Order",
        "tags": [
          "warehouse_PurchaseOrder"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/status-v1/stockbalance": {
      "get": {
        "description": "<p>\n Get stock balance for each stockpoint.\n <p>\n Returns a list of <code>itemId</code>, <code>stockPointCode</code>,\n <code>availableStock</code>, <code>inStock</code>.\n <p>\n (The difference between <code>availableStock</code> and <code>inStock</code>\n is the reserved amount.)",
        "operationId": "getStockBalance",
        "parameters": [
          {
            "description": "Optional filter on itemIds (comma-separated)",
            "explode": true,
            "in": "query",
            "name": "itemIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Optional filter on stock point codes (comma-separated).",
            "explode": true,
            "in": "query",
            "name": "stockPointCodes",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockBalance"
                }
              }
            },
            "description": "A list of <code>StockBalances</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get stock balance",
        "tags": [
          "warehouse_StockStatus"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stockpoints-v1": {
      "get": {
        "description": "<p>\n List stock points, optionally include a query parameter `q` to filter on stock point code or name.\n <p>\n Use query param `state` to filter on ACTIVE, INACTIVE or ALL (default is to include only ACTIVE stock points).\n <p>\n Stock locations are NOT included in the response.",
        "operationId": "getAll_2",
        "parameters": [
          {
            "description": "filters on stock point code or name.",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter on stock point state",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "ALL",
                "ACTIVE",
                "INACTIVE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockPoint"
                }
              }
            },
            "description": "A list of <code>StockPoints</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List stock points",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "<p>\n Both <code>code</code> and <code>name</code> are mandatory.\n <p>\n If you want to set a custom delivery address for this stock point,\n you must remember to set <code>usingCompanyAddress</code> to <code>false</code>.\n <p>\n Returns 400 <code>alreadyexists</code> if a stock point with same code already exists.\n <p>\n Returns 400 <code>duplicatestocklocations</code> if two or more stock locations have the same code.",
        "operationId": "create_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_StockPoint"
              }
            }
          },
          "description": "stock point"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockPoint"
                }
              }
            },
            "description": "The created <code>StockPoint</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create stock point",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-codegen-request-body-name": "stockPoint",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stockpoints-v1/multi": {
      "get": {
        "description": "<p>\n Get stock points by IDs.\n <p>\n Use query param `state` to filter on ACTIVE, INACTIVE or ALL (default is to include ALL stock points).\n <p>\n Stock locations are NOT included in the response.",
        "operationId": "getMany_3",
        "parameters": [
          {
            "description": "stock point ids (comma separated list of UUIDs)",
            "explode": true,
            "in": "query",
            "name": "ids",
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "filter on <code>StockPointState</code>, default is to include ALL stock points.",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "ALL",
                "ACTIVE",
                "INACTIVE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockPoint"
                }
              }
            },
            "description": "A list of <code>StockPoints</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get stock points",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stockpoints-v1/{id}": {
      "delete": {
        "description": "<p>\n Note that it is not allowed to delete a stock point that is in use.",
        "operationId": "delete",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockPoint"
                }
              }
            },
            "description": "The deleted <code>StockPoint</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Delete stock point",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "description": "<p>\n Get stock point by id or code.",
        "operationId": "getByAmbiguousId",
        "parameters": [
          {
            "description": "stock point code, or stock point id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockPoint"
                }
              }
            },
            "description": "stock point"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get stock point",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "<p>\n Add new stock locations to specific <code>StockPoint</code>.\n <p>\n If you include an already existing stock location code, it will be ignored.",
        "operationId": "appendStockLocations",
        "parameters": [
          {
            "description": "stock point id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/warehouse_StockLocation"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of <code>StockLocations</code> to append."
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockLocation"
                }
              }
            },
            "description": "A list of appended <code>StockLocations</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Append stock locations",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-codegen-request-body-name": "stockLocations",
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "<p>\n Remember to supply the complete representation of stock point including stock locations.",
        "operationId": "update_3",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_StockPoint"
              }
            }
          },
          "description": "complete representation of stock point including stock locations."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockPoint"
                }
              }
            },
            "description": "The updated <code>StockPoint</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update stock point",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-codegen-request-body-name": "stockPoint",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stockpoints-v1/{id}/stocklocations": {
      "get": {
        "description": "<p>\n List stock locations for a specific stock point.\n <p>\n Optionally include a query parameter `q` to filter on stock location code or name.",
        "operationId": "getStockLocationsByAmbiguousId",
        "parameters": [
          {
            "description": "stock point id or code",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filters on stock location code or name.",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockLocation"
                }
              }
            },
            "description": "A list of<code>StockLocations</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get stock locations",
        "tags": [
          "warehouse_StockPoint"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1": {
      "get": {
        "description": "<p>\n Sortable fields:\n <code>id</code>,\n <code>name</code>,\n <code>date</code>,\n <code>responsible</code>,\n <code>state</code>\n </p>",
        "operationId": "1_getAll_1",
        "parameters": [
          {
            "description": "Include only stock takings with the given state.",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": [
                "all",
                "planning",
                "started",
                "completed",
                "voided"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only stock takings with the given item.",
            "in": "query",
            "name": "itemId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTaking"
                }
              }
            },
            "description": "A list of <code>StockTakings</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "List stock takings",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "<p>\n Create a new Stock Taking document.\n The only mandatory fields are <code>name</code> and <code>responsible</code>.\n <code>state</code> will be set to <code>planning</code> for a newly created document.\n <p>\n The <code>date</code>-field is not mandatory for documents in state <code>planning</code>.\n However, when you update the state to <code>started</code> you have to provide a date.\n\n <code>name</code> is a descriptive name of the stock taking.\n\n <code>responsible</code> is the name of the responsible for the stock taking.\n\n <code>rows</code> are added after creation by using the addRows-method.\n\n <code>projectId</code> and <code>costCenterCode</code> are used for book-keeping, when the\n Stock Taking document is released.\n <p>\n The field <code>usingStockPoints</code> is set from Warehouse system settings upon creation.\n If multiple stockpoints is used, then the rows will be per item-stockPoint-stockLocation.\n If multiple stockpoints is NOT used, then the rows will be per item-stockLocation.",
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_StockTaking"
              }
            }
          },
          "description": "stock taking"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTaking"
                }
              }
            },
            "description": "the created stock taking"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create stock taking",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-codegen-request-body-name": "stockTaking",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}": {
      "delete": {
        "description": "<p>\n Permanently deletes a Stock Taking document and its rows.\n <p>\n Only for documents in state <code>planning</code> and <code>started</code>.",
        "operationId": "deleteStockTaking",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Delete Stock Taking document",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "1_get_2",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTaking"
                }
              }
            },
            "description": "The <code>StockTaking</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get Stock Taking document",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "description": "<p>\n Updates can only be done when state is <code>planning</code> or <code>started</code>.\n <p>\n All updatable fields (<code>date</code>, <code>name</code>, <code>responsible</code>,\n <code>state</code>, <code>sortingId</code>, <code>costCenterCode</code>, <code>projectId</code>)\n in the document head are set to supplied values.\n <p>\n You cannot set <code>state</code> to <code>completed</code> or <code>voided</code>. Use endpoints\n release or void for this.\n <p>\n The <code>date</code>-field is mandatory for documents in state <code>started</code>.\n <p>\n When state is <code>started</code> you use this endpoint for setting the stock taken quantity.\n Only existing rows can be updated - no new rows will be created (use the addRows endpoint for this).\n Only the supplied rows will be updated. I.e. you don't have to send in <strong>all</strong>\n document rows - just supply the rows you want to set stockTakenQuantity for. Just make sure\n to always include all the fields from the document head as mentioned above.\n <p>\n The mandatory fields on the (optionally supplied) rows are: <code>itemId</code>,\n <code>stockPointId</code>, <code>stockLocationId</code>.\n Fields <code>countedBy</code> and <code>stockTakenQuantity</code> are technically\n not mandatory, but will be set to null if you don't supply them.",
        "operationId": "update_2",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_StockTaking"
              }
            }
          },
          "description": "stock taking"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTaking"
                }
              }
            },
            "description": "The <code>StockTaking</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update a stock taking",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-codegen-request-body-name": "stockTaking",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}/addrows": {
      "post": {
        "description": "<p>\n Add all matching candidate rows to a stock taking, as specified by filters.",
        "operationId": "addStockTakingRowsByFilter",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "explode": true,
            "in": "query",
            "name": "itemIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "supplierNumbers",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockPointIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockLocationIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "transactionDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemIdSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemDescriptionSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeZeroBalanceItems",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "excludeNonInboundItems",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": "Number of added rows."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Add rows by filter",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}/candidates": {
      "get": {
        "description": "<p>\n A candidate row is a combination of itemId, stockPointId and stockLocationId\n that can be added to the Stock Taking document.\n <p>\n Rows already added to the Stock Taking are excluded from this list.",
        "operationId": "getCandidateRows",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "explode": true,
            "in": "query",
            "name": "itemIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "supplierNumbers",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockPointIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockLocationIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "transactionDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemIdSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemDescriptionSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeZeroBalanceItems",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include items that do not exist on inbound deliveries.",
            "in": "query",
            "name": "includeNonInboundItems",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTakingRow"
                }
              }
            },
            "description": "A list of <code>StockTakingRows</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get candidate rows",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}/release": {
      "put": {
        "description": "<p>\n The document will be locked and bookkept.\n The Stock Taking document state will be set to <code>completed</code>.\n The stock amount will be adjusted according to the stock taken quantity.",
        "operationId": "release_2",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release Stock Taking document",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}/rows": {
      "delete": {
        "description": "<p>\n Remove all rows matching the filter parameters from the Stock Taking document.",
        "operationId": "deleteStockTakingRowByFilter",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "explode": true,
            "in": "query",
            "name": "itemIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "supplierNumbers",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockPointIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockLocationIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "transactionDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemIdSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemDescriptionSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeZeroBalanceItems",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": "number of deleted rows"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Delete rows by filter",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      },
      "get": {
        "operationId": "getRows",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "explode": true,
            "in": "query",
            "name": "itemIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "supplierNumbers",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockPointIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "stockLocationIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "transactionDate",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemIdSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "itemDescriptionSearch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeZeroBalanceItems",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Secondary sorting column",
            "in": "query",
            "name": "secondarysortby",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Secondary sorting order",
            "in": "query",
            "name": "secondaryorder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "stateFilter",
            "schema": {
              "enum": [
                "all",
                "notStockTaken",
                "stockTakenNoDeviation",
                "stockTakenWithDeviation"
              ],
              "type": "string"
            }
          },
          {
            "description": "the row number to start the search from, used with startingItemId to jump to specific rows, can be empty",
            "in": "query",
            "name": "startingRowNo",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "the itemId that should be on top of the rows list (used to jump to specific row), can be empty",
            "in": "query",
            "name": "startingItemId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTakingRow"
                }
              }
            },
            "description": "A list of <code>StockTakingRows</code>."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get Stock Taking Rows",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      },
      "post": {
        "description": "<p>\n Add rows to a stock taking.\n If you add an already existing row noting happens.",
        "operationId": "addStockTakingRows",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/warehouse_StockTakingRow"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of <code>StockTakingRows</code>."
        },
        "responses": {
          "204": {
            "description": "Successfully created a new resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Add rows",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-codegen-request-body-name": "rows",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}/rows/{rowId}": {
      "delete": {
        "description": "<p>\n Remove single row by id from the Stock Taking document.",
        "operationId": "deleteStockTakingRow",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "row id",
            "in": "path",
            "name": "rowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": "Number of deleted rows (1)"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Delete row",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktaking-v1/{id}/void": {
      "put": {
        "description": "<p>\n Sets the Stock Taking document state to <code>voided</code>.\n <p>\n Only documents in state <code>planning</code> and <code>started</code>\n can be voided. A <code>completed</code> document may not be voided.",
        "operationId": "voidStockTaking",
        "parameters": [
          {
            "description": "Stock Taking document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void Stock Taking document",
        "tags": [
          "warehouse_StockTaking"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktransfer-v1": {
      "post": {
        "description": "<p>\n Outbounds will be reserved in the from-place.\n Inbounds are created upon release of the stock transfer document.",
        "operationId": "1_create_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_StockTransferDocument"
              }
            }
          },
          "description": "stock transfer document"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTransferDocument"
                }
              }
            },
            "description": "The <code>StockTransferDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Create a stock transfer document",
        "tags": [
          "warehouse_StockTransfer"
        ],
        "x-codegen-request-body-name": "document",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktransfer-v1/{id}": {
      "get": {
        "operationId": "1_get_4",
        "parameters": [
          {
            "description": "Stock Transfer document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTransferDocument"
                }
              }
            },
            "description": "The <code>StockTransferDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get stock transfer document",
        "tags": [
          "warehouse_StockTransfer"
        ],
        "x-fn-is-public": "true"
      },
      "put": {
        "operationId": "1_update_4",
        "parameters": [
          {
            "description": "Stock Transfer document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_StockTransferDocument"
              }
            }
          },
          "description": "The <code>StockTransferDocument</code> document."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_StockTransferDocument"
                }
              }
            },
            "description": "The <code>StockTransferDocument</code> document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Update a stock transfer document",
        "tags": [
          "warehouse_StockTransfer"
        ],
        "x-codegen-request-body-name": "document",
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktransfer-v1/{id}/release": {
      "put": {
        "description": "<p>\n This will deliver all outbounds which are reserved in from-place, and\n create inbounds in the to-place.\n Nothing happens if you releasr an already released stock transfer document.\n <p>\n Returns <code>document_is_voided</code> if document is voided.",
        "operationId": "release_3",
        "parameters": [
          {
            "description": "Stock Transfer document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Release a stock transfer document",
        "tags": [
          "warehouse_StockTransfer"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/stocktransfer-v1/{id}/void": {
      "put": {
        "description": "<p>\n Voiding a released stock transfer document is not allowed, and\n will return <code>cannot_modify_released_document</code>",
        "operationId": "voidStockTransfer",
        "parameters": [
          {
            "description": "Stock Transfer document id.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the specified resource."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Void a stock transfer document",
        "tags": [
          "warehouse_StockTransfer"
        ],
        "x-fn-is-public": "true"
      }
    },
    "/api/warehouse/tenants-v4": {
      "get": {
        "description": "<p>\n Check if current tenant has activated Fortnox Warehouse.",
        "operationId": "getTenant",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_TenantInfo"
                }
              }
            },
            "description": "Warehouse activation status for the current tenant"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_WebException"
                }
              }
            },
            "description": "WebException"
          }
        },
        "summary": "Get Warehouse activation status",
        "tags": [
          "warehouse_Tenant"
        ],
        "x-fn-is-public": "true"
      }
    }
  },
  "servers": [
    {
      "description": "Default server",
      "url": "https://api.fortnox.se"
    }
  ],
  "tags": [
    {
      "description": "<table>\n     <caption>Possible filters on Orders endpoint</caption>\n <tr>\n <td><strong>Filter</strong></td>\n <td><strong>Description</strong></td>\n </tr>\n <tr>\n <td>cancelled</td>\n <td>Retrieves all orders with the status &quot;cancelled&quot;</td>\n </tr>\n <tr>\n <td>expired</td>\n <td>Retrieves all orders that has been expired</td>\n </tr>\n <tr>\n <td>invoicecreated</td>\n <td>Retrieves all offers where an invoice has been created</td>\n </tr>\n <tr>\n <td>invoicenotcreated</td>\n <td>Retrieves all orders where an invoice has not been created</td>\n </tr>\n </table>\n For information about how to use filters, please read this article.",
      "name": "fortnox_Orders",
      "x-displayName": "Orders"
    },
    {
      "description": "Article file connections resources",
      "name": "fortnox_ArticleFileConnections",
      "x-displayName": "Article File Connections"
    },
    {
      "description": "Voucher resources\n <table>\n     <caption>Possible search params on Vouchers endpoint</caption>\n   <tr>\n\t\t<td><strong>Search</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>lastmodified</td>\n\t\t<td>Retrives Vouchers modified after provided date and time</td>\n   </tr>\n   <tr>\n\t\t<td>costcenter</td>\n\t\t<td>Retrives Vouchers by costcenter</td>\n   </tr>\n   <tr>\n\t\t<td>fromdate</td>\n\t\t<td>Retrives Vouchers starting from provided date</td>\n   </tr>\n   <tr>\n\t\t<td>todate</td>\n\t\t<td>Retrives Vouchers until provided date todate</td>\n   </tr>\n   <tr>\n\t\t<td>voucherseries</td>\n\t\t<td>Retrives Vouchers by Voucher Series</td>\n   </tr>\n </table>\n\n <table>\n     <caption>Possible sort params on Vouchers endpoint</caption>\n   <tr>\n\t\t<td><strong>Sort</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>referencenumber</td>\n\t\t<td>Sorts vouchers according to referencenumber</td>\n   </tr>\n   <tr>\n\t\t<td>referencetype</td>\n\t\t<td>Sorts vouchers according to referencetype</td>\n   </tr>\n   <tr>\n\t\t<td>vouchernumber</td>\n\t\t<td>Sorts vouchers according to vouchernumber</td>\n   </tr>\n   <tr>\n\t\t<td>voucherseries</td>\n\t\t<td>Sorts vouchers according to voucherseries</td>\n   </tr>\n </table>",
      "name": "fortnox_Vouchers",
      "x-displayName": "Vouchers"
    },
    {
      "description": "Resource for the CRUD operations on suppliers",
      "name": "fortnox_Suppliers",
      "x-displayName": "Suppliers"
    },
    {
      "description": "Resource for CRUD operations on Supplier invoice file connections",
      "name": "fortnox_SupplierInvoiceFileConnections",
      "x-displayName": "Supplier Invoice File Connections"
    },
    {
      "description": "<table>\n     <caption>Possible filters on Offers endpoint</caption>\n <tr>\n <td><strong>Filter</strong></td>\n <td><strong>Description</strong></td>\n </tr>\n <tr>\n <td>cancelled</td>\n <td>Retrieves all offers with the status &quot;cancelled&quot;</td>\n </tr>\n <tr>\n <td>expired</td>\n <td>Retrieves all offers that has been expired</td>\n </tr>\n <tr>\n <td>completed</td>\n <td>Retrieves all offers where an order or invoice has been created</td>\n </tr>\n <tr>\n <td>notcompleted</td>\n <td>Retrieves all offers where an order or invoice has not been created</td>\n </tr>\n <tr>\n <td>ordercreated</td>\n <td>Retrieves all offers where an order has been created</td>\n </tr>\n <tr>\n <td>ordernotcreated</td>\n <td>Retrieves all offers where an order has not been created</td>\n </tr>\n </table>",
      "name": "fortnox_Offers",
      "x-displayName": "Offers"
    },
    {
      "description": "Customers resources",
      "name": "fortnox_Customers",
      "x-displayName": "Customers"
    },
    {
      "description": "Voucher file connections resources\n <table>\n     <caption>Possible search params on Voucher file connections endpoint</caption>\n   <tr>\n\t\t<td><strong>Search</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>voucheryear</td>\n\t\t<td>Retrives voucher file connections by voucher year</td>\n   </tr>\n   <tr>\n\t\t<td>voucherdescription</td>\n\t\t<td>Retrives voucher file connections by voucher description</td>\n   </tr>\n   <tr>\n\t\t<td>vouchernumber</td>\n\t\t<td>Retrives voucher file connections by voucher number</td>\n   </tr>\n   <tr>\n\t\t<td>voucherseries</td>\n\t\t<td>Retrives voucher file connections by voucher series</td>\n   </tr>\n </table>",
      "name": "fortnox_VoucherFileConnections",
      "x-displayName": "Voucher File Connections"
    },
    {
      "description": "Archive resources",
      "name": "fortnox_Archive",
      "x-displayName": "Archive"
    },
    {
      "description": "Supplier Invoice External URL Connections resource\n Note: Requires a supplier invoice file attachment to be visible in Fortnox GUI.",
      "name": "fortnox_SupplierInvoiceExternalUrlConnections",
      "x-displayName": "Supplier Invoice External Url Connections"
    },
    {
      "description": "Resource for the CRUD operations on trusted email senders",
      "name": "fortnox_TrustedEmailSenders",
      "x-displayName": "Trusted Email Senders"
    },
    {
      "description": "Company settings resource",
      "name": "fortnox_CompanySettings",
      "x-displayName": "Company Settings"
    },
    {
      "description": "Resource for CRUD operations on prices",
      "name": "fortnox_Prices",
      "x-displayName": "Prices"
    },
    {
      "description": "Predefined Accounts resources",
      "name": "fortnox_PredefinedAccounts",
      "x-displayName": "Predefined Accounts"
    },
    {
      "description": "Assets resources\n <table>\n     <caption>Possible filters on Assets endpoint</caption>\n <tr>\n <td><strong>Name</strong></td>\n <td><strong>Description</strong></td>\n </tr>\n <tr>\n <td>active</td>\n <td>Retrieves all active assets</td>\n </tr>\n <tr>\n <td>inactive</td>\n <td>Retrieves all inactive assets</td>\n </tr>\n <tr>\n <td>fully_depreciated</td>\n <td>Retrieves all fully depreciated assets</td>\n </tr>\n <tr>\n <td>sold</td>\n <td>Retrieves all sold assets</td>\n </tr>\n <tr>\n <td>scrapped</td>\n <td>Retrieves all scrapped assets</td>\n </tr>\n <tr>\n <td>voided</td>\n <td>Retrieves all voided assets</td>\n </tr>\n </table>",
      "name": "fortnox_Assets",
      "x-displayName": "Assets"
    },
    {
      "description": "Resource for CRUD operations on locked period",
      "name": "fortnox_LockedPeriod",
      "x-displayName": "Locked Period"
    },
    {
      "description": "Labels resources",
      "name": "fortnox_Labels",
      "x-displayName": "Labels"
    },
    {
      "description": "Tax reductions resources\n <table>\n     <caption>Possible filters</caption>\n     <tr>\n         <td><strong>Filter</strong></td>\n         <td><strong>Description</strong></td>\n     </tr>\n     <tr>\n \t\t   <td>invoices</td>\n \t\t   <td>Retrieves all Tax reductions for invoices</td>\n     </tr>\n     <tr>\n         <td>orders</td>\n         <td>Retrieves all Tax reductions for orders</td>\n     </tr>\n \t   <tr>\n \t       <td>offers</td>\n \t       <td>Retrieves all Tax reductions for offers</td>\n     </tr>\n </table>",
      "name": "fortnox_TaxReductions",
      "x-displayName": "Tax Reductions"
    },
    {
      "description": "Cost centers resources\n <table>\n     <caption>Possible search params on Cost Centers endpoint</caption>\n   <tr>\n\t\t<td><strong>Search</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>lastmodified</td>\n\t\t<td>Retrives costcenters modified after provided date and time</td>\n   </tr>\n </table>\n\n <table>\n     <caption>Possible sort params on Cost Centers endpoint</caption>\n   <tr>\n\t\t<td><strong>Sort</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>code</td>\n\t\t<td>Sorts cost centers according to code</td>\n   </tr>\n </table>",
      "name": "fortnox_CostCenters",
      "x-displayName": "Cost Centers"
    },
    {
      "description": "<table>\n     <caption>Possible filters on Supplier Invoice endpoint</caption>\n   <tr>\n\t\t<td><strong>Filter</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>cancelled</td>\n\t\t<td>Retrieves all invoices with the status &quot;cancelled&quot;.</td>\n   </tr>\n   <tr>\n\t\t<td>fullypaid</td>\n\t\t<td>Retrieves all invoices that has been fully paid.</td>\n\t </tr>\n\t <tr>\n\t\t<td>unpaid</td>\n\t\t<td>Retrieves all invoices that is unpaid.</td>\n   </tr>\n\t <tr>\n\t\t<td>unpaidoverdue</td>\n\t\t<td>Retrieves all invoices that is unpaid and overdue.</td>\n   </tr>\n\t <tr>\n\t\t<td>unbooked</td>\n\t\t<td>Retrieves all invoices that is unbooked.</td>\n   </tr>\n\t <tr>\n\t\t<td>pendingpayment</td>\n\t\t<td>Retrieves all invoices that has PaymentPending=true and is booked.</td>\n   </tr>\n\t <tr>\n\t\t<td>authorizepending</td>\n\t\t<td>Retrieves all invoices that has a waiting authorization pending.</td>\n   </tr>\n </table>",
      "name": "fortnox_SupplierInvoices",
      "x-displayName": "Supplier Invoices"
    },
    {
      "description": "Invoice payments resources",
      "name": "fortnox_InvoicePayments",
      "x-displayName": "Invoice Payments"
    },
    {
      "description": "Filters\n <table>\n     <caption>Possible filters on SIE endpoint</caption>\n <tr>\n <td>Type</td>\n <td>Description</td>\n </tr>\n <tr>\n <td>FinancialYear</td>\n <td>Retreives the SIE-files for the specific financial year</td>\n </tr>\n <tr>\n <td>Example:</td>\n <td>https://api.fortnox.se/3/sie/4?financialyear=1</td>\n </tr>\n </table>",
      "name": "fortnox_Sie",
      "x-displayName": "Sie"
    },
    {
      "description": "Resource for the CRUD operations on terms of payments",
      "name": "fortnox_TermsOfPayments",
      "x-displayName": "Terms Of Payments"
    },
    {
      "description": "Resource for CRUD operations on Way of Deliveries",
      "name": "fortnox_WayOfDeliveries",
      "x-displayName": "Way Of Deliveries"
    },
    {
      "description": "Articles resources",
      "name": "fortnox_Articles",
      "x-displayName": "Articles"
    },
    {
      "description": "Absence transactions resources.\n <table>\n <caption>Usable &quot;CauseCodes&quot;</caption>\n <tr><td><strong>Code</strong></td><td><strong>Description</strong></td></tr>\n <tr><td>ASK</td><td>Arbetsskada</td></tr>\n <tr><td>ATF</td><td>Arbetstidsförkortning</td></tr>\n <tr><td>FPE</td><td>Föräldraledig</td></tr>\n <tr><td>FRA or FR1</td><td>Frånvaro övrigt (FR1 is used in PAXml)</td></tr>\n <tr><td>HAV</td><td>Graviditetspenning</td></tr>\n <tr><td>KOM</td><td>Kompledig</td></tr>\n <tr><td>MIL</td><td>Militärtjänst (max 60 dagar)</td></tr>\n <tr><td>NAR or NÄR</td><td>Närståendevård (NÄR is used in PAXml)</td></tr>\n <tr><td>OS1</td><td>Sjuk-OB 1</td></tr>\n <tr><td>OS2</td><td>Sjuk-OB 2</td></tr>\n <tr><td>OS3</td><td>Sjuk-OB 3</td></tr>\n <tr><td>OS4</td><td>Sjuk-OB 4</td></tr>\n <tr><td>OS5</td><td>Sjuk-OB 5</td></tr>\n <tr><td>PAP</td><td>Pappadagar</td></tr>\n <tr><td>PEM</td><td>Permission</td></tr>\n <tr><td>PER</td><td>Permitterad</td></tr>\n <tr><td>SEM</td><td>Semester</td></tr>\n <tr><td>SJK</td><td>Sjukfrånvaro</td></tr>\n <tr><td>SMB</td><td>Smittbärare</td></tr>\n <tr><td>SVE</td><td>Svenska för invandrare</td></tr>\n <tr><td>TJL</td><td>Tjänstledig</td></tr>\n <tr><td>UTB or FAC</td><td>Facklig utbildning (FAC is used in PAXml)</td></tr>\n <tr><td>VAB</td><td>Vård av barn</td></tr>\n </table>",
      "name": "fortnox_AbsenceTransactions",
      "x-displayName": "Absence Transactions"
    },
    {
      "description": "Me resource",
      "name": "fortnox_Me",
      "x-displayName": "Me"
    },
    {
      "description": "Account charts resources",
      "name": "fortnox_AccountCharts",
      "x-displayName": "Account Charts"
    },
    {
      "description": "Schedule times resources",
      "name": "fortnox_ScheduleTimes",
      "x-displayName": "Schedule Times"
    },
    {
      "description": "Salary Transaction resources<br>\n Usable SalaryCodes:<br>\n You can get a list of usable salary codes in the GUI from Register, Lönearter och koder &minus; Lönearter by choosing one of two tables and pressing print.<br>\n Depending on which salary code table (löneartstabell) that is set in the settings (Inställningar, Lön, Avtal för arbetare/tjänsteman &minus; Allmänt) you can choose the salary code to use from either salary code table.<br>\n Make sure to use the correct table that is used for the employee PersonelType you want to sent the salary transaction for. Some salary codes do not exist in every table.",
      "name": "fortnox_SalaryTransactions",
      "x-displayName": "Salary Transactions"
    },
    {
      "description": "Accounts resources",
      "name": "fortnox_Accounts",
      "x-displayName": "Accounts"
    },
    {
      "description": "EU vat limit regulation resources",
      "name": "fortnox_EUVatLimitRegulation",
      "x-displayName": "EU Vat Limit Regulation"
    },
    {
      "description": "Resource for the CRUD operations on projects",
      "name": "fortnox_Projects",
      "x-displayName": "Projects"
    },
    {
      "description": "Resource for the CRUD operations on supplier invoice accruals",
      "name": "fortnox_SupplierInvoiceAccruals",
      "x-displayName": "Supplier Invoice Accruals"
    },
    {
      "description": "Company information resource",
      "name": "fortnox_CompanyInformation",
      "x-displayName": "Company Information"
    },
    {
      "description": "Contract templates resources",
      "name": "fortnox_ContractTemplates",
      "x-displayName": "Contract Templates"
    },
    {
      "description": "<b>Note!</b> if you are sending the invoice with Fortnox Finans, check out the <a href=\"/apidocs#tag/FinanceInvoicesResource\">Finance Invoices</a> section\n\n <table>\n     <caption>Possible filters on Invoice endpoint</caption>\n   <tr>\n\t\t<td><strong>Filter</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>cancelled</td>\n\t\t<td>Retrieves all invoices with the status &quot;cancelled&quot;.</td>\n   </tr>\n   <tr>\n\t\t<td>fullypaid</td>\n\t\t<td>Retrieves all invoices that has been fully paid.</td>\n\t </tr>\n\t <tr>\n\t\t<td>unpaid</td>\n\t\t<td>Retrieves all invoices that is unpaid.</td>\n   </tr>\n\t <tr>\n\t\t<td>unpaidoverdue</td>\n\t\t<td>Retrieves all invoices that is unpaid and overdue.</td>\n   </tr>\n\t <tr>\n\t\t<td>unbooked</td>\n\t\t<td>Retrieves all invoices that is unbooked.</td>\n   </tr>\n </table>",
      "name": "fortnox_Invoices",
      "x-displayName": "Invoices"
    },
    {
      "description": "Resource for the CRUD operations on print templates",
      "name": "fortnox_PrintTemplates",
      "x-displayName": "Print Templates"
    },
    {
      "description": "Contract accruals resources",
      "name": "fortnox_ContractAccruals",
      "x-displayName": "Contract Accruals"
    },
    {
      "description": "Attendance transactions resources\n <table>\n <caption>Usable &quot;CauseCodes&quot;</caption>\n <tr><td><strong>Code</strong></td><td><strong>Description</strong></td></tr>\n <tr><td>ARB</td><td>Timlön</td></tr>\n <tr><td>BE2</td><td>Beredskapstid 2</td></tr>\n <tr><td>BER or BE1</td><td>Beredskapstid (BE1 is used in PAXml)</td></tr>\n <tr><td>FLX</td><td>Flextid +/-</td></tr>\n <tr><td>HLG</td><td>Helglön</td></tr>\n <tr><td>JO2 or JR2</td><td>Jourtid 2 (JR2 is used in PAXml)</td></tr>\n <tr><td>JOR or JR1</td><td>Jourtid (JR1 is used in PAXml)</td></tr>\n <tr><td>MER</td><td>Mertid</td></tr>\n <tr><td>OB1</td><td>OB-ersättning 1</td></tr>\n <tr><td>OB2</td><td>OB-ersättning 2</td></tr>\n <tr><td>OB3</td><td>OB-ersättning 3</td></tr>\n <tr><td>OB4</td><td>OB-ersättning 4</td></tr>\n <tr><td>OB5</td><td>OB-ersättning 5</td></tr>\n <tr><td>OK0 or NV9</td><td>Extratid \\u2013 Komptid (NV9 is used in PAXml)</td></tr>\n <tr><td>OK1 or ÖK1</td><td>Övertid 1 \\u2013 Komptid (ÖK1 is used in PAXml)</td></tr>\n <tr><td>OK2 or ÖK2</td><td>Övertid 2 \\u2013 Komptid (ÖK2 is used in PAXml)</td></tr>\n <tr><td>OK3 or ÖK3</td><td>Övertid 3 \\u2013 Komptid (ÖK3 is used in PAXml)</td></tr>\n <tr><td>OK4 or ÖK4</td><td>Övertid 4 \\u2013 Komptid (ÖK4 is used in PAXml)</td></tr>\n <tr><td>OK5 or ÖK5</td><td>Övertid 5 \\u2013 Komptid (ÖK5 is used in PAXml)</td></tr>\n <tr><td>OT1 or ÖT1</td><td>Övertid 1 \\u2013 Betalning (ÖT1 is used in PAXml)</td></tr>\n <tr><td>OT2 or ÖT2</td><td>Övertid 2 \\u2013 Betalning (ÖT2 is used in PAXml)</td></tr>\n <tr><td>OT3 or ÖT3</td><td>Övertid 3 \\u2013 Betalning (ÖT3 is used in PAXml)</td></tr>\n <tr><td>OT4 or ÖT4</td><td>Övertid 4 \\u2013 Betalning (ÖT4 is used in PAXml)</td></tr>\n <tr><td>OT5 or ÖT5</td><td>Övertid 5 \\u2013 Betalning (ÖT5 is used in PAXml)</td></tr>\n <tr><td>RES or RE1</td><td>Restid (RE1 is used in PAXml)</td></tr>\n <tr><td>TID</td><td>Arbetstid</td></tr>\n </table>",
      "name": "fortnox_AttendanceTransactions",
      "x-displayName": "Attendance Transactions"
    },
    {
      "description": "Fortnox Finans Invoice resources\n <p>\n These endpoints are useful when transferring an invoice to Fortnox Finans factoring service. When Fortnox Finans has taken over the responsibility for collecting the invoice - the actual invoice, reminders, collections etc (depending on settings) are automatically sent to the customer on the selected media.\n <p>\n <b>Important before you start</b> Please note that you need to get a special sandbox instance of Fortnox to test Fortnox Finans services, if you are using a production sandbox, it will send out invoices and start the reminder process and charge you for the service.\n <p>\n <b>Also note</b> that older invoices (typically dated before 2020-04) might be handled in &quot;Noxbox&quot;, a platform previously used for administering invoices sent using Fortnox Finans' services. If this platform has been used for an invoice, some endpoints described below will not be available. In the &quot;Retrieve a Fortnox Finans invoice&quot; section it&rsquo;s described how to determine if the old &quot;Noxbox&quot; platform was used.\n <p>\n <b>Type of services</b>\n <p>\n A Fortnox user can let Fortnox Finans handle their customer ledger.\n Fortnox Finans currently offers two types of services\n <p>\n <i>Ledgerbase</i>\n <p>\n Depending on customer settings, two subtypes of the service are available:\n <ul>\n     <li>Invoice service <u>with</u> automatic reminders: this means that Fortnox Finans is sending\n     invoices to end-customers and handling the customer ledger with reminders and collection.\n     This service is also referred to as &quot;Service Full&quot;</li>\n     <li>Invoice service <u>without</u> automatic reminders: this means that Fortnox Finans is sending\n     invoices to end-customers and handling the customer ledger. No reminders or collections\n     are sent. This service is also referred to as &quot;Service Light&quot;</li>\n </ul>\n <i>Reminder</i>\n <p>\n <ul>\n     <li>Reminder service: this means that Fortnox Finans is sending reminders and collections on\n     invoices already sent from Fortnox (without any Fortnox Finans services). The invoice is\n     transferred to Fortnox Finans, and from now on reminders etc will automatically be sent\n     to the customer. The invoice has to be unpaid, and the due date must be passed.<br>\n     An invoice sent by Ledgerbase (without automatic reminders) could be transferred to\n     Reminder service.</li>\n </ul>\n <p>\n <b>Preconditions</b>\n <p>\n <i>General</i>\n <p>\n Scope of your application registered to Fortnox must contain &quot;Invoice Noxfinans&quot;\n Fortnox Finans services must have been activated in the client database\n <p>\n <i>Invoices</i>\n <p>\n <ul>\n     <li>Invoice must have been created in Fortnox (Manually or by API)</li>\n     <li>Invoice must have an open balance >0</li>\n     <li>Invoice date is not allowed to be older than two years</li>\n     <li>Currency of Invoice must be in SEK</li>\n     <li>Invoice contains at least name, address, zip and city</li>\n     <li>Invoice must contain at least one invoice record</li>\n     <li>Interest invoices are not permitted to be sent to Fortnox Finans</li>\n </ul>\n <p>\n <i>Credit Invoices</i>\n <p>\n Credit Invoice in Fortnox must have a connection to a debit invoice\n Debit invoice must have a open balance >= credit invoice amount\n <p>\n <i>Authentication</i>\n <p>\n To be able to use the endpoints, valid authentication must be provided.\n These are provided by Fortnox Finans when setting up the external api connection.\n <p>\n An <b>access token</b> (in the examples below stated as my_access_token) must be provided in\n the header of the request.\n <p>\n A <b>client secret</b> (in the examples below stated as my_client_secret) must be provided in the header of the request.\n <p>\n <b>Example</b>\n <p>\n <i>Request</i><br>\n curl -X &quot;GET&quot; &quot;https://api.fortnox.se/3/noxfinansinvoices/7201&quot;<br>\n      -H &quot;Access-Token: <b>my_access_token</b>&quot;<br>\n      -H &quot;Client-Secret: <b>my_client_secret</b>&quot;<br>\n      -H &quot;Content-Type: application/json&quot;<br>\n      -H &quot;Accept: application/json&quot;",
      "name": "fortnox_FinanceInvoices",
      "x-displayName": "Finance Invoices"
    },
    {
      "description": "Asset file connections resources",
      "name": "fortnox_AssetFileConnection",
      "x-displayName": "Asset File Connection"
    },
    {
      "description": "Units resources",
      "name": "fortnox_Units",
      "x-displayName": "Units"
    },
    {
      "description": "Resource for CRUD operations on Invoice Accruals",
      "name": "fortnox_InvoiceAccruals",
      "x-displayName": "Invoice Accruals"
    },
    {
      "description": "Asset types resource",
      "name": "fortnox_AssetTypes",
      "x-displayName": "Asset Types"
    },
    {
      "description": "Predefined Voucher Series resources",
      "name": "fortnox_PredefinedVoucherSeries",
      "x-displayName": "Predefined Voucher Series"
    },
    {
      "description": "<table>\n     <caption>Note that Inbox has nine static folders in the root directory.</caption>\n     <tr><td><strong>Path</strong></td><td><strong>Description</strong></td></tr>\n     <tr><td>Inbox_a</td><td>Asset register</td></tr>\n     <tr><td>Inbox_d</td><td>Daily takings</td></tr>\n     <tr><td>Inbox_s</td><td>Supplier invoices</td></tr>\n     <tr><td>Inbox_v</td><td>Vouchers</td></tr>\n     <tr><td>Inbox_b</td><td>Bank files</td></tr>\n     <tr><td>Inbox_l</td><td>Payroll files</td></tr>\n     <tr><td>Inbox_kf</td><td>Customer invoices</td></tr>\n     <tr><td>Inbox_o</td><td>Orders</td></tr>\n     <tr><td>Inbox_of</td><td>Offers</td></tr>\n </table>",
      "name": "fortnox_Inbox",
      "x-displayName": "Inbox"
    },
    {
      "description": "Financial years resources",
      "name": "fortnox_FinancialYears",
      "x-displayName": "Financial Years"
    },
    {
      "description": "Voucher Series resources\n <table>\n     <caption>Possible search params on Voucher Series endpoint</caption>\n   <tr>\n\t\t<td><strong>Search</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>lastmodified</td>\n\t\t<td>Retrives Voucher Series modified after provided date and time</td>\n   </tr>\n </table>\n\n <table>\n     <caption>Possible sort params on Voucher Series endpoint</caption>\n   <tr>\n\t\t<td><strong>Sort</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>code</td>\n\t\t<td>Sorts Voucher Series according to code</td>\n   </tr>\n </table>",
      "name": "fortnox_VoucherSeries",
      "x-displayName": "Voucher Series"
    },
    {
      "description": "Contracts resources\n <table>\n     <caption>Possible filters on Contracts endpoint</caption>\n   <tr>\n\t\t<td><strong>Filter</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>active</td>\n\t\t<td>Retrieves all active contracts</td>\n   </tr>\n   <tr>\n\t\t<td>inactive</td>\n\t\t<td>Retrieves all inactive contracts</td>\n\t </tr>\n\t <tr>\n\t\t<td>finished</td>\n\t\t<td>Retrieves all finished contracts</td>\n   </tr>\n </table>\n Possible values for filter",
      "name": "fortnox_Contracts",
      "x-displayName": "Contracts"
    },
    {
      "description": "Article url connections resources",
      "name": "fortnox_ArticleUrlConnections",
      "x-displayName": "Article Url Connections"
    },
    {
      "description": "Employees resources",
      "name": "fortnox_Employees",
      "x-displayName": "Employees"
    },
    {
      "description": "Customer references resource.",
      "name": "fortnox_CustomerReferences",
      "x-displayName": "Customer References"
    },
    {
      "description": "Resource for CRUD operations on Pricelists",
      "name": "fortnox_PriceLists",
      "x-displayName": "Price Lists"
    },
    {
      "description": "Resource for the CRUD operations on terms of deliveries",
      "name": "fortnox_TermsOfDeliveries",
      "x-displayName": "Terms Of Deliveries"
    },
    {
      "description": "Currencies resources",
      "name": "fortnox_Currencies",
      "x-displayName": "Currencies"
    },
    {
      "description": "Resource for the CRUD operations on modes of payments",
      "name": "fortnox_ModesOfPayments",
      "x-displayName": "Modes Of Payments"
    },
    {
      "description": "Expenses resources",
      "name": "fortnox_Expenses",
      "x-displayName": "Expenses"
    },
    {
      "description": "Supplier invoice payments resources\n <table>\n     <caption>Possible search params on Supplier Invoice Payments endpoint</caption>\n   <tr>\n\t\t<td><strong>Search</strong></td>\n\t\t<td><strong>Description</strong></td>\n   </tr>\n   <tr>\n\t\t<td>invoicenumber</td>\n\t\t<td>Retrives supplier invoice payments modified by invoicenumber</td>\n   </tr>\n   <tr>\n\t\t<td>lastmodified</td>\n\t\t<td>Retrives supplier invoice payments modified after provided date and time</td>\n   </tr>\n </table>",
      "name": "fortnox_SupplierInvoicePayments",
      "x-displayName": "Supplier Invoice Payments"
    },
    {
      "description": "Vacation Debt Basis resources",
      "name": "fortnox_VacationDebtBasis",
      "x-displayName": "Vacation Debt Basis"
    },
    {
      "description": "AttachmentResource\n\n  Attach/Detach files to entities.\n\n  Possible 400 response error codes: no_attachment_provided, mixed_documents, wrong_file_location, wrong_file_type, could_not_retrieve_document,\n  file_too_big, too_many_attachments_in_one_request, max_total_attachments_exceeded, attachment_files_max_count_exceeded,\n  attachment_files_max_size_exceeded, attachment_files_max_pages_exceeded, field_not_writable, mismatch_attachment_id, missing_mandatory_field\n\n  Possible 404 response error codes: file_not_found, document_not_found, attachment_not_found",
      "name": "fileattachments_Attachment",
      "x-displayName": "Attachment"
    },
    {
      "description": "IntegrationSalesResource",
      "name": "integration-developer_IntegrationSales",
      "x-displayName": "Integration Sales"
    },
    {
      "description": "Get ratings data ",
      "name": "integration-developer_Integration Ratings",
      "x-displayName": "Integration Ratings"
    },
    {
      "description": "Get sales data from your integrations",
      "name": "integration-partner_Integration Sales",
      "x-displayName": "Integration Sales"
    },
    {
      "description": "Register and manage working or absence time",
      "name": "time-reporting_Registrations",
      "x-displayName": "Registrations"
    },
    {
      "description": "Provides information on the status (presence of cost/price) of articles",
      "name": "time-reporting_Articles",
      "x-displayName": "Articles"
    },
    {
      "description": "Handles <code>ManualOutboundDocument</code>s",
      "name": "warehouse_ManualOutboundDocument",
      "x-displayName": "Manual Outbound Document"
    },
    {
      "description": "Handles Production Orders.",
      "name": "warehouse_ProductionOrder",
      "x-displayName": "Production Order"
    },
    {
      "description": "Handles Custom Outbound Documents.\n\n A Custom Outbound Document is an externally created document\n for registering outbound deliveries to warehouse.",
      "name": "warehouse_CustomOutboundDocument",
      "x-displayName": "Custom Outbound Document"
    },
    {
      "description": "Handles listing of <code>ManualDocument</code>s.\n <p>\n There are three types of Manual Documents in Warehouse:\n <ul>\n     <li>Manual Inbound Documents,\n     <li>Manual Outbound Documents, and\n     <li>Stock Transfer Documents\n </ul>",
      "name": "warehouse_ManualDocument",
      "x-displayName": "Manual Document"
    },
    {
      "description": "Handles Purchase Orders",
      "name": "warehouse_PurchaseOrder",
      "x-displayName": "Purchase Order"
    },
    {
      "description": "Handles <code>ManualInboundDocument</code>s",
      "name": "warehouse_ManualInboundDocument",
      "x-displayName": "Manual Inbound Document"
    },
    {
      "description": "Handles stock status.",
      "name": "warehouse_StockStatus",
      "x-displayName": "Stock Status"
    },
    {
      "description": "Handles types for custom documents.\n\n A custom document is identified by its type and id.\n Each type belongs to a category, either INBOUND or OUTBOUND.\n\n Note that custom document types are created automatically\n if necessary when you create custom documents.\n\n The following <code>referenceTypes</code> are not allowed for\n custom document types. Variants of these containing dashes,\n underscores, lower case, upper case etc are not allowed either.\n\n <ul>\n  <li>ARTICLEPRODUCTION</li>\n  <li>ARTIKELPRODUKTION</li>\n  <li>CUSTOMERINVOICE</li>\n  <li>CUSTOMERORDER</li>\n  <li>DELIVERYNOTE</li>\n  <li>FAKTURA</li>\n  <li>F&Ouml;LJESEDEL</li>\n  <li>ING&Aring;ENDESALDO</li>\n  <li>INK&Ouml;P</li>\n  <li>INK&Ouml;PSORDER</li>\n  <li>INVENTERING</li>\n  <li>INVENTORY</li>\n  <li>INVOICE</li>\n  <li>ITEMPRODUCTION</li>\n  <li>KREDITFAKTURA</li>\n  <li>KREDITORDER</li>\n  <li>KUNDFAKTURA</li>\n  <li>KUNDORDER</li>\n  <li>LAGERFLYTT</li>\n  <li>LEGACYINTEGRATIONIN</li>\n  <li>LEGACYINTEGRATIONOUT</li>\n  <li>LEVERANT&Ouml;RSFAKTURA</li>\n  <li>LEVFAKTURA</li>\n  <li>MANUALDELIVERY</li>\n  <li>MANUALINBOUND</li>\n  <li>MANUALINBOUNDDELIVERY</li>\n  <li>MANUALOUTBOUND</li>\n  <li>MANUALOUTBOUNDDELIVERY</li>\n  <li>MANUELLINLEVERANS</li>\n  <li>MANUELLLEVERANS</li>\n  <li>MANUELLUTLEVERANS</li>\n  <li>NEGATIVEOPENINGBALANCES</li>\n  <li>NEGATIVTING&Aring;ENDESALDO</li>\n  <li>ORDER</li>\n  <li>PLOCKLISTA</li>\n  <li>POSITIVEOPENINGBALANCES</li>\n  <li>PRODUCTION</li>\n  <li>PRODUKTION</li>\n  <li>PURCHASE</li>\n  <li>PURCHASEORDER</li>\n  <li>STOCKTAKING</li>\n  <li>STOCKTAKINGDEVIATION</li>\n  <li>STOCKTRANSFER</li>\n  <li>SUPINVOICE</li>\n  <li>SUPPLIERINVOICE</li>\n </ul>",
      "name": "warehouse_CustomDocumentType",
      "x-displayName": "Custom Document Type"
    },
    {
      "description": "Handles <code>StockTransferDocument</code>s.\n <p>\n A Stock Transfer moves stock from one location to another.\n You request a quantity to be moved. The quantity is reserved,\n and delivered upon release of the Stock Transfer document.\n The &quot;delivery&quot; makes an inbound delivery to the new\n location.",
      "name": "warehouse_StockTransfer",
      "x-displayName": "Stock Transfer"
    },
    {
      "description": "Return Warehouse activation status for a tenant.",
      "name": "warehouse_Tenant",
      "x-displayName": "Tenant"
    },
    {
      "description": "General resource for incoming goods.",
      "name": "warehouse_IncomingGoods",
      "x-displayName": "Incoming Goods"
    },
    {
      "description": "Handles stock taking.\n\n A Stock Taking document is created in state &quot;planning&quot;.\n Rows, containing item-stockpoint-stocklocation combinations to be counted,\n are added to the Stock Taking document.\n\n When the planning is done, the Stock Taking document is updated to state &quot;started&quot;,\n and the stock taking begins.\n\n Setting the stock taken quantity is done by updating the Stock Taking document, and supplying the\n counted rows. This can be done in &quot;batches&quot;, i.e. not all rows needs to be updated at once.\n\n When the stock taking is done, the document is released. The release process will adjust the stock\n for the stock taking date, and prepare the warehouse bookkeeping data.",
      "name": "warehouse_StockTaking",
      "x-displayName": "Stock Taking"
    },
    {
      "description": "Handles Custom Inbound Documents.\n\n A Custom Inbound Document is an externally created document\n for registering inbound deliveries to warehouse.",
      "name": "warehouse_CustomInboundDocument",
      "x-displayName": "Custom Inbound Document"
    },
    {
      "description": "Resource to handle <code>StockPoint</code>s.",
      "name": "warehouse_StockPoint",
      "x-displayName": "Stock Point"
    }
  ],
  "x-tagGroups": [
    {
      "collapsible": true,
      "name": "integration-developer",
      "tags": [
        "integration-developer_IntegrationSales"
      ]
    },
    {
      "collapsible": true,
      "name": "warehouse",
      "tags": [
        "warehouse_CustomDocumentType",
        "warehouse_CustomInboundDocument",
        "warehouse_CustomOutboundDocument",
        "warehouse_IncomingGoods",
        "warehouse_ManualDocument",
        "warehouse_ManualInboundDocument",
        "warehouse_ManualOutboundDocument",
        "warehouse_ProductionOrder",
        "warehouse_PurchaseOrder",
        "warehouse_StockPoint",
        "warehouse_StockStatus",
        "warehouse_StockTaking",
        "warehouse_StockTransfer",
        "warehouse_Tenant"
      ]
    },
    {
      "collapsible": true,
      "name": "time-reporting",
      "tags": [
        "time-reporting_Articles",
        "time-reporting_Registrations"
      ]
    },
    {
      "collapsible": true,
      "name": "fortnox",
      "tags": [
        "fortnox_AbsenceTransactions",
        "fortnox_AccountCharts",
        "fortnox_Accounts",
        "fortnox_Archive",
        "fortnox_ArticleFileConnections",
        "fortnox_ArticleUrlConnections",
        "fortnox_Articles",
        "fortnox_AssetFileConnection",
        "fortnox_AssetTypes",
        "fortnox_Assets",
        "fortnox_AttendanceTransactions",
        "fortnox_CompanyInformation",
        "fortnox_CompanySettings",
        "fortnox_ContractAccruals",
        "fortnox_ContractTemplates",
        "fortnox_Contracts",
        "fortnox_CostCenters",
        "fortnox_Currencies",
        "fortnox_CustomerReferences",
        "fortnox_Customers",
        "fortnox_EUVatLimitRegulation",
        "fortnox_Employees",
        "fortnox_Expenses",
        "fortnox_FinanceInvoices",
        "fortnox_FinancialYears",
        "fortnox_Inbox",
        "fortnox_InvoiceAccruals",
        "fortnox_InvoicePayments",
        "fortnox_Invoices",
        "fortnox_Labels",
        "fortnox_LockedPeriod",
        "fortnox_Me",
        "fortnox_ModesOfPayments",
        "fortnox_Offers",
        "fortnox_Orders",
        "fortnox_PredefinedAccounts",
        "fortnox_PredefinedVoucherSeries",
        "fortnox_PriceLists",
        "fortnox_Prices",
        "fortnox_PrintTemplates",
        "fortnox_Projects",
        "fortnox_SalaryTransactions",
        "fortnox_ScheduleTimes",
        "fortnox_Sie",
        "fortnox_SupplierInvoiceAccruals",
        "fortnox_SupplierInvoiceExternalUrlConnections",
        "fortnox_SupplierInvoiceFileConnections",
        "fortnox_SupplierInvoicePayments",
        "fortnox_SupplierInvoices",
        "fortnox_Suppliers",
        "fortnox_TaxReductions",
        "fortnox_TermsOfDeliveries",
        "fortnox_TermsOfPayments",
        "fortnox_TrustedEmailSenders",
        "fortnox_Units",
        "fortnox_VacationDebtBasis",
        "fortnox_VoucherFileConnections",
        "fortnox_VoucherSeries",
        "fortnox_Vouchers",
        "fortnox_WayOfDeliveries"
      ]
    },
    {
      "collapsible": true,
      "name": "fileattachments",
      "tags": [
        "fileattachments_Attachment"
      ]
    },
    {
      "collapsible": true,
      "name": "Developer",
      "tags": [
        "integration-developer_Integration Ratings",
        "integration-partner_Integration Sales"
      ]
    }
  ]
}
